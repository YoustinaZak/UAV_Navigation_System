
MPU_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005754  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005868  08005868  00015868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005968  08005968  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08005968  08005968  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005968  08005968  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005970  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200000f0  08005a60  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08005a60  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007676  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018db  00000000  00000000  000277d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  000290b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000607  00000000  00000000  000298b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a3b  00000000  00000000  00029eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4dd  00000000  00000000  000418f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082cba  00000000  00000000  0004cdcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028c0  00000000  00000000  000cfa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000d234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800584c 	.word	0x0800584c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	0800584c 	.word	0x0800584c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <I2C_MPU_READ>:
 * @param Data: pointer to an array of data
 * @param Len: length of the array
 *
 * @return uint8_t: 1 if acknowledge received, 0 if acknowledge not received
 */
uint8_t I2C_MPU_READ(uint8_t SL_address, uint8_t *Data, uint8_t Len){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ACK = HAL_I2C_Master_Receive(&hi2c1, SL_address<<1 ,
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b299      	uxth	r1, r3
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	2264      	movs	r2, #100	; 0x64
 80010ea:	9200      	str	r2, [sp, #0]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <I2C_MPU_READ+0x40>)
 80010f0:	f001 fcc4 	bl	8002a7c <HAL_I2C_Master_Receive>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
						Data, Len, 100); //sends read bit automatically
				return (ACK == HAL_OK) ? 1 : 0;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	bf0c      	ite	eq
 80010fe:	2301      	moveq	r3, #1
 8001100:	2300      	movne	r3, #0
 8001102:	b2db      	uxtb	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000010c 	.word	0x2000010c

08001110 <I2C_MPU_WRITE>:
 * @param Data: pointer to an array of data
 * @param Len: length of the array
 *
 * @return uint8_t: 1 if acknowledge received, 0 if acknowledge not received
 */
uint8_t I2C_MPU_WRITE(uint8_t SL_address, uint8_t *Data, uint8_t Len){
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ACK = HAL_I2C_Master_Transmit(&hi2c1, SL_address << 1,
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29b      	uxth	r3, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b299      	uxth	r1, r3
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	b29b      	uxth	r3, r3
 800112c:	2264      	movs	r2, #100	; 0x64
 800112e:	9200      	str	r2, [sp, #0]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <I2C_MPU_WRITE+0x40>)
 8001134:	f001 fba4 	bl	8002880 <HAL_I2C_Master_Transmit>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
							Data, Len, 100); //sends write bit automatically
					return (ACK == HAL_OK) ? 1 : 0;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000010c 	.word	0x2000010c

08001154 <I2C_MPU_CHECK>:
 * @fn void I2C_MPU_CECK(uint8_t, uint8_t*, uint8_t)
 * @brief checks for sleep mode (power management reg) and slave address (WHO_AM_I)
 *
 * @param SL_address slave address
 */
uint8_t I2C_MPU_CHECK(uint8_t SL_address){
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af04      	add	r7, sp, #16
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t check;
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, SL_address << 1, 0x75, 1, &check, 1, 100);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	b29b      	uxth	r3, r3
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	b299      	uxth	r1, r3
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	f107 030e 	add.w	r3, r7, #14
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2275      	movs	r2, #117	; 0x75
 8001178:	4810      	ldr	r0, [pc, #64]	; (80011bc <I2C_MPU_CHECK+0x68>)
 800117a:	f001 ffe5 	bl	8003148 <HAL_I2C_Mem_Read>

	    if (check == 0x68) {  // 0x68 is the default WHO_AM_I register value
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	2b68      	cmp	r3, #104	; 0x68
 8001182:	d117      	bne.n	80011b4 <I2C_MPU_CHECK+0x60>
	        data = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	737b      	strb	r3, [r7, #13]
	        // Wake up the MPU6050 by writing 0 to the Power Management register (0x6B)
	        HAL_StatusTypeDef ACK =HAL_I2C_Mem_Write(&hi2c1, MPU_slave_address << 1, 0x6B, 1, &data, 1, 100);
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	f107 030d 	add.w	r3, r7, #13
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	226b      	movs	r2, #107	; 0x6b
 800119a:	21d0      	movs	r1, #208	; 0xd0
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <I2C_MPU_CHECK+0x68>)
 800119e:	f001 fed9 	bl	8002f54 <HAL_I2C_Mem_Write>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]
	        if(ACK==HAL_OK){
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <I2C_MPU_CHECK+0x5c>
	        	return 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <I2C_MPU_CHECK+0x60>
	        }
	        return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e7ff      	b.n	80011b4 <I2C_MPU_CHECK+0x60>
	    }

}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000010c 	.word	0x2000010c

080011c0 <GET_TICK>:
 * @brief utilizing ticks in knowing how much time passed since turn on
 *
 * @return number of milliseconds passed since turn on
 */

uint32_t GET_TICK(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80011c4:	f000 ff6a 	bl	800209c <HAL_GetTick>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b096      	sub	sp, #88	; 0x58
 80011d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 ff09 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f8a5 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f000 f90d 	bl	80013fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80011e2:	f000 f8dd 	bl	80013a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Alcd_Init(& lcd1, 1, 0);                     //removeable
 80011e6:	2200      	movs	r2, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	4848      	ldr	r0, [pc, #288]	; (800130c <main+0x13c>)
 80011ec:	f000 fb4e 	bl	800188c <Alcd_Init>
  Alcd_PutAt_n(&lcd1, 1, 0, "UnderTest", 9);    //removeable
 80011f0:	2309      	movs	r3, #9
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4b46      	ldr	r3, [pc, #280]	; (8001310 <main+0x140>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	2101      	movs	r1, #1
 80011fa:	4844      	ldr	r0, [pc, #272]	; (800130c <main+0x13c>)
 80011fc:	f000 fc01 	bl	8001a02 <Alcd_PutAt_n>
  HAL_Delay(3000);                             //removeable
 8001200:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001204:	f000 ff54 	bl	80020b0 <HAL_Delay>


  MPU_Check(&mpu_6050);  //test success
 8001208:	4842      	ldr	r0, [pc, #264]	; (8001314 <main+0x144>)
 800120a:	f000 fc67 	bl	8001adc <MPU_Check>
  MPU_Init(&mpu_6050);   //test success
 800120e:	4841      	ldr	r0, [pc, #260]	; (8001314 <main+0x144>)
 8001210:	f000 fc70 	bl	8001af4 <MPU_Init>
	  uint8_t test1[20];
	  uint8_t test2[20];
	  uint8_t test3[20];
	  uint8_t test4[20];

	  MPU_GET_TEMP(&mpu_6050);
 8001214:	483f      	ldr	r0, [pc, #252]	; (8001314 <main+0x144>)
 8001216:	f000 fd9f 	bl	8001d58 <MPU_GET_TEMP>
      MPU_GET_PITCH_ROLL_YAW(&mpu_6050);
 800121a:	483e      	ldr	r0, [pc, #248]	; (8001314 <main+0x144>)
 800121c:	f000 fdf0 	bl	8001e00 <MPU_GET_PITCH_ROLL_YAW>

	  sprintf(test1,"p:%d",(int)mpu_6050.pitch);
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <main+0x144>)
 8001222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff2b 	bl	8001080 <__aeabi_f2iz>
 800122a:	4602      	mov	r2, r0
 800122c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001230:	4939      	ldr	r1, [pc, #228]	; (8001318 <main+0x148>)
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fafc 	bl	8004830 <siprintf>
	  sprintf(test2,"r:%d",(int)mpu_6050.roll);
 8001238:	4b36      	ldr	r3, [pc, #216]	; (8001314 <main+0x144>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff1f 	bl	8001080 <__aeabi_f2iz>
 8001242:	4602      	mov	r2, r0
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	4934      	ldr	r1, [pc, #208]	; (800131c <main+0x14c>)
 800124a:	4618      	mov	r0, r3
 800124c:	f003 faf0 	bl	8004830 <siprintf>
	  sprintf(test3,"y:%d",(int)mpu_6050.yaw);
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <main+0x144>)
 8001252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff13 	bl	8001080 <__aeabi_f2iz>
 800125a:	4602      	mov	r2, r0
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	492f      	ldr	r1, [pc, #188]	; (8001320 <main+0x150>)
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fae4 	bl	8004830 <siprintf>
	  sprintf(test4,"t:%d",(int)mpu_6050.norm_temp);
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <main+0x144>)
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff07 	bl	8001080 <__aeabi_f2iz>
 8001272:	4602      	mov	r2, r0
 8001274:	463b      	mov	r3, r7
 8001276:	492b      	ldr	r1, [pc, #172]	; (8001324 <main+0x154>)
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fad9 	bl	8004830 <siprintf>

	  Alcd_PutAt_n(&lcd1, 0, 0, test1, strlen(test1));
 800127e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ff64 	bl	8000150 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	4613      	mov	r3, r2
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	481c      	ldr	r0, [pc, #112]	; (800130c <main+0x13c>)
 800129a:	f000 fbb2 	bl	8001a02 <Alcd_PutAt_n>
	  Alcd_PutAt_n(&lcd1, 0, 7, test4, strlen(test4));
 800129e:	463b      	mov	r3, r7
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ff55 	bl	8000150 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	463a      	mov	r2, r7
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4613      	mov	r3, r2
 80012b0:	2207      	movs	r2, #7
 80012b2:	2100      	movs	r1, #0
 80012b4:	4815      	ldr	r0, [pc, #84]	; (800130c <main+0x13c>)
 80012b6:	f000 fba4 	bl	8001a02 <Alcd_PutAt_n>
	  Alcd_PutAt_n(&lcd1, 1, 0, test2, strlen(test2));
 80012ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ff46 	bl	8000150 <strlen>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <main+0x13c>)
 80012d6:	f000 fb94 	bl	8001a02 <Alcd_PutAt_n>
	  Alcd_PutAt_n(&lcd1, 1, 7, test3, strlen(test3));
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff36 	bl	8000150 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f107 0214 	add.w	r2, r7, #20
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4613      	mov	r3, r2
 80012f0:	2207      	movs	r2, #7
 80012f2:	2101      	movs	r1, #1
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <main+0x13c>)
 80012f6:	f000 fb84 	bl	8001a02 <Alcd_PutAt_n>
	  HAL_Delay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f000 fed7 	bl	80020b0 <HAL_Delay>
	  Alcd_Clear(&lcd1);
 8001302:	4802      	ldr	r0, [pc, #8]	; (800130c <main+0x13c>)
 8001304:	f000 fb96 	bl	8001a34 <Alcd_Clear>
  {
 8001308:	e784      	b.n	8001214 <main+0x44>
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000
 8001310:	08005868 	.word	0x08005868
 8001314:	20000020 	.word	0x20000020
 8001318:	08005874 	.word	0x08005874
 800131c:	0800587c 	.word	0x0800587c
 8001320:	08005884 	.word	0x08005884
 8001324:	0800588c 	.word	0x0800588c

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b090      	sub	sp, #64	; 0x40
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	2228      	movs	r2, #40	; 0x28
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fa9a 	bl	8004870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134e:	2301      	movs	r3, #1
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001352:	2310      	movs	r3, #16
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fe6a 	bl	8004038 <HAL_RCC_OscConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800136a:	f000 f875 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f003 f8d8 	bl	800453c <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001392:	f000 f861 	bl	8001458 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3740      	adds	r7, #64	; 0x40
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <MX_I2C1_Init+0x54>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_I2C1_Init+0x58>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013de:	f001 f90b 	bl	80025f8 <HAL_I2C_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e8:	f000 f836 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000010c 	.word	0x2000010c
 80013f4:	40005400 	.word	0x40005400
 80013f8:	000186a0 	.word	0x000186a0

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_GPIO_Init+0x58>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <MX_GPIO_Init+0x58>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_GPIO_Init+0x58>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_GPIO_Init+0x58>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <MX_GPIO_Init+0x58>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_GPIO_Init+0x58>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_GPIO_Init+0x58>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <MX_GPIO_Init+0x58>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6193      	str	r3, [r2, #24]
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <MX_GPIO_Init+0x58>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_MspInit+0x5c>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_MspInit+0x5c>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_MspInit+0x5c>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_MspInit+0x5c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_MspInit+0x5c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_MspInit+0x5c>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_MspInit+0x60>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_MspInit+0x60>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <HAL_I2C_MspInit+0x70>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d123      	bne.n	8001530 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_I2C_MspInit+0x74>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_I2C_MspInit+0x74>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_I2C_MspInit+0x74>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001500:	23c0      	movs	r3, #192	; 0xc0
 8001502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	4619      	mov	r1, r3
 8001512:	480b      	ldr	r0, [pc, #44]	; (8001540 <HAL_I2C_MspInit+0x78>)
 8001514:	f000 fed4 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_I2C_MspInit+0x74>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_I2C_MspInit+0x74>)
 800151e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001522:	61d3      	str	r3, [r2, #28]
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_I2C_MspInit+0x74>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40005400 	.word	0x40005400
 800153c:	40021000 	.word	0x40021000
 8001540:	40010c00 	.word	0x40010c00

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158a:	f000 fd75 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <_sbrk+0x5c>)
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <_sbrk+0x60>)
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <_sbrk+0x64>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <_sbrk+0x68>)
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d207      	bcs.n	80015d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c4:	f003 f95c 	bl	8004880 <__errno>
 80015c8:	4603      	mov	r3, r0
 80015ca:	220c      	movs	r2, #12
 80015cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e009      	b.n	80015e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <_sbrk+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20005000 	.word	0x20005000
 80015f4:	00000400 	.word	0x00000400
 80015f8:	20000160 	.word	0x20000160
 80015fc:	200002b8 	.word	0x200002b8

08001600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800160c:	f7ff fff8 	bl	8001600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001612:	490c      	ldr	r1, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001614:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001628:	4c09      	ldr	r4, [pc, #36]	; (8001650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f003 f929 	bl	800488c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163a:	f7ff fdc9 	bl	80011d0 <main>
  bx lr
 800163e:	4770      	bx	lr
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001648:	08005970 	.word	0x08005970
  ldr r2, =_sbss
 800164c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001650:	200002b8 	.word	0x200002b8

08001654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC1_2_IRQHandler>
	...

08001658 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <DWT_Delay_Init+0x58>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <DWT_Delay_Init+0x58>)
 8001662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001666:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <DWT_Delay_Init+0x58>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <DWT_Delay_Init+0x58>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001672:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <DWT_Delay_Init+0x5c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <DWT_Delay_Init+0x5c>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <DWT_Delay_Init+0x5c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <DWT_Delay_Init+0x5c>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <DWT_Delay_Init+0x5c>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001692:	bf00      	nop
     __ASM volatile ("NOP");
 8001694:	bf00      	nop
  __ASM volatile ("NOP");
 8001696:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <DWT_Delay_Init+0x5c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80016a0:	2300      	movs	r3, #0
 80016a2:	e000      	b.n	80016a6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80016a4:	2301      	movs	r3, #1
  }
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000edf0 	.word	0xe000edf0
 80016b4:	e0001000 	.word	0xe0001000

080016b8 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <DWT_Delay_us+0x40>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80016c6:	f003 f877 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <DWT_Delay_us+0x44>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0c9b      	lsrs	r3, r3, #18
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80016dc:	bf00      	nop
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <DWT_Delay_us+0x40>)
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad2      	subs	r2, r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3f8      	bcc.n	80016de <DWT_Delay_us+0x26>
		;
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e0001000 	.word	0xe0001000
 80016fc:	431bde83 	.word	0x431bde83

08001700 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ffd3 	bl	80016b8 <DWT_Delay_us>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7a1b      	ldrb	r3, [r3, #8]
 8001730:	4619      	mov	r1, r3
 8001732:	230f      	movs	r3, #15
 8001734:	408b      	lsls	r3, r1
 8001736:	43db      	mvns	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	400a      	ands	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	7a09      	ldrb	r1, [r1, #8]
 800174e:	408b      	lsls	r3, r1
 8001750:	4619      	mov	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	430a      	orrs	r2, r1
 8001758:	60da      	str	r2, [r3, #12]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6958      	ldr	r0, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	8b1b      	ldrh	r3, [r3, #24]
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	4619      	mov	r1, r3
 800177c:	f000 ff24 	bl	80025c8 <HAL_GPIO_WritePin>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68d8      	ldr	r0, [r3, #12]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	8a1b      	ldrh	r3, [r3, #16]
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	4619      	mov	r1, r3
 80017a0:	f000 ff12 	bl	80025c8 <HAL_GPIO_WritePin>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	2301      	movs	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	2302      	movs	r3, #2
 80017ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fd70 	bl	80022c0 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	8a1b      	ldrh	r3, [r3, #16]
 80017e4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f107 0208 	add.w	r2, r7, #8
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fd65 	bl	80022c0 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7a1b      	ldrb	r3, [r3, #8]
 80017fa:	461a      	mov	r2, r3
 80017fc:	230f      	movs	r3, #15
 80017fe:	4093      	lsls	r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f107 0208 	add.w	r2, r7, #8
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fd57 	bl	80022c0 <HAL_GPIO_Init>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	70fb      	strb	r3, [r7, #3]
 8001826:	4613      	mov	r3, r2
 8001828:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff98 	bl	8001764 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8001834:	78bb      	ldrb	r3, [r7, #2]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff6c 	bl	800171a <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8001842:	2101      	movs	r1, #1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff9f 	bl	8001788 <EN_SET>
 800184a:	200a      	movs	r0, #10
 800184c:	f7ff ff58 	bl	8001700 <usDelay>
 8001850:	2100      	movs	r1, #0
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff98 	bl	8001788 <EN_SET>
 8001858:	2064      	movs	r0, #100	; 0x64
 800185a:	f7ff ff51 	bl	8001700 <usDelay>
	;
	Write_HalfByte(lcd, value);
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	4619      	mov	r1, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff59 	bl	800171a <Write_HalfByte>
	PulseEn
 8001868:	2101      	movs	r1, #1
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff8c 	bl	8001788 <EN_SET>
 8001870:	200a      	movs	r0, #10
 8001872:	f7ff ff45 	bl	8001700 <usDelay>
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff85 	bl	8001788 <EN_SET>
 800187e:	2064      	movs	r0, #100	; 0x64
 8001880:	f7ff ff3e 	bl	8001700 <usDelay>
	;
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
 8001898:	4613      	mov	r3, r2
 800189a:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 800189c:	f7ff fedc 	bl	8001658 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff83 	bl	80017ac <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	78ba      	ldrb	r2, [r7, #2]
 80018b6:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 80018b8:	78bb      	ldrb	r3, [r7, #2]
 80018ba:	3340      	adds	r3, #64	; 0x40
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 80018c2:	2100      	movs	r1, #0
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff4d 	bl	8001764 <RS_SET>
	EN_SET(lcd, 0);
 80018ca:	2100      	movs	r1, #0
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff5b 	bl	8001788 <EN_SET>
	usDelay(50000);
 80018d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018d6:	f7ff ff13 	bl	8001700 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e018      	b.n	8001912 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 80018e0:	2103      	movs	r1, #3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff19 	bl	800171a <Write_HalfByte>
		PulseEn
 80018e8:	2101      	movs	r1, #1
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ff4c 	bl	8001788 <EN_SET>
 80018f0:	200a      	movs	r0, #10
 80018f2:	f7ff ff05 	bl	8001700 <usDelay>
 80018f6:	2100      	movs	r1, #0
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff45 	bl	8001788 <EN_SET>
 80018fe:	2064      	movs	r0, #100	; 0x64
 8001900:	f7ff fefe 	bl	8001700 <usDelay>
		;
		usDelay(4500);
 8001904:	f241 1094 	movw	r0, #4500	; 0x1194
 8001908:	f7ff fefa 	bl	8001700 <usDelay>
	for (x = 0; x < 2; x++)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	3301      	adds	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d9e3      	bls.n	80018e0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8001918:	2103      	movs	r1, #3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fefd 	bl	800171a <Write_HalfByte>
	PulseEn
 8001920:	2101      	movs	r1, #1
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff30 	bl	8001788 <EN_SET>
 8001928:	200a      	movs	r0, #10
 800192a:	f7ff fee9 	bl	8001700 <usDelay>
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <EN_SET>
 8001936:	2064      	movs	r0, #100	; 0x64
 8001938:	f7ff fee2 	bl	8001700 <usDelay>
	;
	usDelay(150);
 800193c:	2096      	movs	r0, #150	; 0x96
 800193e:	f7ff fedf 	bl	8001700 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8001942:	2102      	movs	r1, #2
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fee8 	bl	800171a <Write_HalfByte>
	PulseEn
 800194a:	2101      	movs	r1, #1
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff1b 	bl	8001788 <EN_SET>
 8001952:	200a      	movs	r0, #10
 8001954:	f7ff fed4 	bl	8001700 <usDelay>
 8001958:	2100      	movs	r1, #0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff14 	bl	8001788 <EN_SET>
 8001960:	2064      	movs	r0, #100	; 0x64
 8001962:	f7ff fecd 	bl	8001700 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8001966:	2228      	movs	r2, #40	; 0x28
 8001968:	2100      	movs	r1, #0
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff55 	bl	800181a <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8001970:	2300      	movs	r3, #0
 8001972:	2200      	movs	r2, #0
 8001974:	2101      	movs	r1, #1
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f86d 	bl	8001a56 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f859 	bl	8001a34 <Alcd_Clear>
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
 8001996:	4613      	mov	r3, r2
 8001998:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	7e9a      	ldrb	r2, [r3, #26]
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	4413      	add	r3, r2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff2f 	bl	800181a <Alcd_SendByte>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	4613      	mov	r3, r2
 80019d0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]
 80019d6:	e00b      	b.n	80019f0 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	60ba      	str	r2, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	2101      	movs	r1, #1
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff ff18 	bl	800181a <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	3301      	adds	r3, #1
 80019ee:	75fb      	strb	r3, [r7, #23]
 80019f0:	7dfa      	ldrb	r2, [r7, #23]
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3ef      	bcc.n	80019d8 <Alcd_Put_n+0x14>
	}
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	72fb      	strb	r3, [r7, #11]
 8001a10:	4613      	mov	r3, r2
 8001a12:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8001a14:	7aba      	ldrb	r2, [r7, #10]
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f7ff ffb5 	bl	800198a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8001a20:	7e3b      	ldrb	r3, [r7, #24]
 8001a22:	461a      	mov	r2, r3
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff ffcc 	bl	80019c4 <Alcd_Put_n>
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2100      	movs	r1, #0
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff feea 	bl	800181a <Alcd_SendByte>
	usDelay(2000);
 8001a46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a4a:	f7ff fe59 	bl	8001700 <usDelay>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	4608      	mov	r0, r1
 8001a60:	4611      	mov	r1, r2
 8001a62:	461a      	mov	r2, r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	70fb      	strb	r3, [r7, #3]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70bb      	strb	r3, [r7, #2]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7f9b      	ldrb	r3, [r3, #30]
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 8001a8a:	78bb      	ldrb	r3, [r7, #2]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7f9b      	ldrb	r3, [r3, #30]
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8001a9e:	787b      	ldrb	r3, [r7, #1]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7f9b      	ldrb	r3, [r3, #30]
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7f9b      	ldrb	r3, [r3, #30]
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7f9b      	ldrb	r3, [r3, #30]
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	2100      	movs	r1, #0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fea3 	bl	800181a <Alcd_SendByte>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <MPU_Check>:
 * @brief checks for sleep mode and slave address by using a function pointer
 *
 * @param sensor an instance of the MPU sensor
 */

void MPU_Check(MPU_t *sensor){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	sensor->HW_Interface.Check_UI(MPU_slave_address);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2068      	movs	r0, #104	; 0x68
 8001aea:	4798      	blx	r3
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <MPU_Init>:
 * @brief initializes full scale range for both gyro and accelerometer
 *
 * @param sensor an instance of the MPU sensor
 */

void MPU_Init(MPU_t *sensor){            //test success
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	sensor->gyro_scale_buffer[0]=0x1B;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	221b      	movs	r2, #27
 8001b00:	701a      	strb	r2, [r3, #0]
	sensor->gyro_scale_buffer[1]= (sensor->gyro_scale_range)<<3;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	789b      	ldrb	r3, [r3, #2]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	705a      	strb	r2, [r3, #1]
	sensor->acc_scale_buffer[0]=0x1C;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	221c      	movs	r2, #28
 8001b12:	70da      	strb	r2, [r3, #3]
	sensor->acc_scale_buffer[1]= (sensor->acc_scale_range)<<3;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	795b      	ldrb	r3, [r3, #5]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	711a      	strb	r2, [r3, #4]
	sensor->HW_Interface.Write_UI(MPU_slave_address, sensor->gyro_scale_buffer, 2 );
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	2068      	movs	r0, #104	; 0x68
 8001b2a:	4798      	blx	r3
	sensor->HW_Interface.Write_UI(MPU_slave_address, sensor->acc_scale_buffer, 2 );
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	1cd1      	adds	r1, r2, #3
 8001b34:	2202      	movs	r2, #2
 8001b36:	2068      	movs	r0, #104	; 0x68
 8001b38:	4798      	blx	r3
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <MPU_GET_ACC_RAW>:
 * @brief gets raw data of the accel
 *
 * @param sensor an instance of the MPU sensor
 */

void MPU_GET_ACC_RAW(MPU_t *sensor){ //leh pointer
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]

	uint8_t reg_address=59;                               //recheck
 8001b4a:	233b      	movs	r3, #59	; 0x3b
 8001b4c:	73fb      	strb	r3, [r7, #15]
	sensor->HW_Interface.Write_UI(MPU_slave_address, &reg_address, 1 );
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f107 010f 	add.w	r1, r7, #15
 8001b56:	2201      	movs	r2, #1
 8001b58:	2068      	movs	r0, #104	; 0x68
 8001b5a:	4798      	blx	r3
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->acc_buffer, 6 );
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	1d91      	adds	r1, r2, #6
 8001b64:	2206      	movs	r2, #6
 8001b66:	2068      	movs	r0, #104	; 0x68
 8001b68:	4798      	blx	r3
	sensor->acc_x =(int16_t) ((sensor->acc_buffer[0] << 8) | sensor->acc_buffer[1]);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	799b      	ldrb	r3, [r3, #6]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	79db      	ldrb	r3, [r3, #7]
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	819a      	strh	r2, [r3, #12]
	sensor->acc_y =(int16_t) ((sensor->acc_buffer[2] << 8) | sensor->acc_buffer[3]);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7a1b      	ldrb	r3, [r3, #8]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	b21a      	sxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7a5b      	ldrb	r3, [r3, #9]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	829a      	strh	r2, [r3, #20]
	sensor->acc_z =(int16_t) ((sensor->acc_buffer[4] << 8) | sensor->acc_buffer[5]);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7a9b      	ldrb	r3, [r3, #10]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7adb      	ldrb	r3, [r3, #11]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	839a      	strh	r2, [r3, #28]
	/*reg_address =63;
	sensor->HW_Interface.Write_UI(MPU_slave_address, &reg_address, 1 );
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->buff, 2 );*/
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <MPU_GET_GYRO_RAW>:
 * @fn void MPU_GET_GYRO_RAW(MPU_t*)
 * @brief gets raw data of the gyro
 *
 * @param sensor an instance of the MPU sensor
 */
void MPU_GET_GYRO_RAW(MPU_t *sensor){ //leh pointer
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

	uint8_t reg_address =67;
 8001bbc:	2343      	movs	r3, #67	; 0x43
 8001bbe:	73fb      	strb	r3, [r7, #15]
	sensor->HW_Interface.Write_UI(MPU_slave_address, &reg_address, 1 );
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	f107 010f 	add.w	r1, r7, #15
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2068      	movs	r0, #104	; 0x68
 8001bcc:	4798      	blx	r3
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->gyro_buffer, 6 );
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8001bd8:	2206      	movs	r2, #6
 8001bda:	2068      	movs	r0, #104	; 0x68
 8001bdc:	4798      	blx	r3
	sensor->gyro_x = ((sensor->gyro_buffer[0] << 8) | sensor->gyro_buffer[1]);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->gyro_y = ((sensor->gyro_buffer[2] << 8) | sensor->gyro_buffer[3]);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->gyro_z = ((sensor->gyro_buffer[4] << 8) | sensor->gyro_buffer[5]);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <MPU_CALC_ACC_NORM>:
 * @brief calculates normalized accel readings
 *
 * @param sensor an instance of the MPU sensor
 */

void MPU_CALC_ACC_NORM(MPU_t *sensor){
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	sensor->norm_acc_x = (float)sensor->acc_x / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f802 	bl	8000c4c <__aeabi_i2f>
 8001c48:	4604      	mov	r4, r0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	795b      	ldrb	r3, [r3, #5]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c54:	fa42 f303 	asr.w	r3, r2, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fff7 	bl	8000c4c <__aeabi_i2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4619      	mov	r1, r3
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff f8fa 	bl	8000e5c <__aeabi_fdiv>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	611a      	str	r2, [r3, #16]
	sensor->norm_acc_y = (float)sensor->acc_y / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe ffe8 	bl	8000c4c <__aeabi_i2f>
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	795b      	ldrb	r3, [r3, #5]
 8001c82:	3301      	adds	r3, #1
 8001c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c88:	fa42 f303 	asr.w	r3, r2, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe ffdd 	bl	8000c4c <__aeabi_i2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4619      	mov	r1, r3
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff f8e0 	bl	8000e5c <__aeabi_fdiv>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
	sensor->norm_acc_z = (float)sensor->acc_z / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe ffce 	bl	8000c4c <__aeabi_i2f>
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	795b      	ldrb	r3, [r3, #5]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cbc:	fa42 f303 	asr.w	r3, r2, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe ffc3 	bl	8000c4c <__aeabi_i2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff f8c6 	bl	8000e5c <__aeabi_fdiv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	621a      	str	r2, [r3, #32]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}

08001ce0 <MPU_CALC_GYRO_NORM>:
 * @brief calculates normalized gyro readings
 *
 * @param sensor an instance of the MPU sensor
 */

void MPU_CALC_GYRO_NORM(MPU_t *sensor){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	sensor->norm_gyro_x = sensor->gyro_x / (131 / (1<<sensor->gyro_scale_range));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	789b      	ldrb	r3, [r3, #2]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2383      	movs	r3, #131	; 0x83
 8001cf8:	410b      	asrs	r3, r1
 8001cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe ffa4 	bl	8000c4c <__aeabi_i2f>
 8001d04:	4602      	mov	r2, r0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
	sensor->norm_gyro_y = sensor->gyro_y / (131 / (1<<sensor->gyro_scale_range));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001d10:	461a      	mov	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	789b      	ldrb	r3, [r3, #2]
 8001d16:	4619      	mov	r1, r3
 8001d18:	2383      	movs	r3, #131	; 0x83
 8001d1a:	410b      	asrs	r3, r1
 8001d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ff93 	bl	8000c4c <__aeabi_i2f>
 8001d26:	4602      	mov	r2, r0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34
	sensor->norm_gyro_z = sensor->gyro_z / (131 / (1<<sensor->gyro_scale_range));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	789b      	ldrb	r3, [r3, #2]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	2383      	movs	r3, #131	; 0x83
 8001d3c:	410b      	asrs	r3, r1
 8001d3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe ff82 	bl	8000c4c <__aeabi_i2f>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <MPU_GET_TEMP>:
 * @brief gets raw temp reading and calculates normalized temp
 *
 * @param sensor an instance of the MPU sensor
 */

void MPU_GET_TEMP(MPU_t *sensor){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	uint8_t reg_address =65;
 8001d60:	2341      	movs	r3, #65	; 0x41
 8001d62:	73fb      	strb	r3, [r7, #15]
    sensor->HW_Interface.Write_UI(MPU_slave_address, &reg_address, 1 );
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f107 010f 	add.w	r1, r7, #15
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2068      	movs	r0, #104	; 0x68
 8001d70:	4798      	blx	r3
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->temp_buffer, 6 );
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8001d7c:	2206      	movs	r2, #6
 8001d7e:	2068      	movs	r0, #104	; 0x68
 8001d80:	4798      	blx	r3
	sensor->raw_temp = (int16_t)((sensor->temp_buffer[0] << 8) | sensor->temp_buffer[1]);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sensor->norm_temp = (float)(sensor->raw_temp/340.0) +36.53; //temp in celsius
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fb2d 	bl	8000404 <__aeabi_i2d>
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <MPU_GET_TEMP+0xa0>)
 8001db0:	f7fe fcbc 	bl	800072c <__aeabi_ddiv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fe3c 	bl	8000a38 <__aeabi_d2f>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fb30 	bl	8000428 <__aeabi_f2d>
 8001dc8:	a309      	add	r3, pc, #36	; (adr r3, 8001df0 <MPU_GET_TEMP+0x98>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe f9cd 	bl	800016c <__adddf3>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe fe2d 	bl	8000a38 <__aeabi_d2f>
 8001dde:	4602      	mov	r2, r0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	0a3d70a4 	.word	0x0a3d70a4
 8001df4:	404243d7 	.word	0x404243d7
 8001df8:	40754000 	.word	0x40754000
 8001dfc:	00000000 	.word	0x00000000

08001e00 <MPU_GET_PITCH_ROLL_YAW>:
 * @brief calculates pitch, roll and yaw angles
 *
 * @param sensor an instance of the MPU sensor
 */

void MPU_GET_PITCH_ROLL_YAW(MPU_t *sensor){
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

	static float previousYaw =0;
	static uint32_t previousTime = 0;
	uint32_t currentTime = sensor->HW_Interface.Tick();
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0c:	4798      	blx	r3
 8001e0e:	60f8      	str	r0, [r7, #12]
	float deltaTime = (float)(currentTime - previousTime) / 1000;
 8001e10:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <MPU_GET_PITCH_ROLL_YAW+0x1d8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe ff13 	bl	8000c44 <__aeabi_ui2f>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	496e      	ldr	r1, [pc, #440]	; (8001fdc <MPU_GET_PITCH_ROLL_YAW+0x1dc>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f81a 	bl	8000e5c <__aeabi_fdiv>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60bb      	str	r3, [r7, #8]

	MPU_GET_ACC_RAW(sensor);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fe88 	bl	8001b42 <MPU_GET_ACC_RAW>
	MPU_GET_GYRO_RAW(sensor);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff febe 	bl	8001bb4 <MPU_GET_GYRO_RAW>
	MPU_CALC_ACC_NORM(sensor);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fefb 	bl	8001c34 <MPU_CALC_ACC_NORM>
	MPU_CALC_GYRO_NORM(sensor);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff4e 	bl	8001ce0 <MPU_CALC_GYRO_NORM>

	sensor->pitch = (float)atan2(sensor->acc_y, sqrt(sensor->acc_x * sensor->acc_x + sensor->acc_z * sensor->acc_z)) * RAD_TO_DEG;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fada 	bl	8000404 <__aeabi_i2d>
 8001e50:	4604      	mov	r4, r0
 8001e52:	460d      	mov	r5, r1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e62:	fb03 f202 	mul.w	r2, r3, r2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fac2 	bl	8000404 <__aeabi_i2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f003 f985 	bl	8005196 <sqrt>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4620      	mov	r0, r4
 8001e92:	4629      	mov	r1, r5
 8001e94:	f003 f97d 	bl	8005192 <atan2>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fdca 	bl	8000a38 <__aeabi_d2f>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fabe 	bl	8000428 <__aeabi_f2d>
 8001eac:	a348      	add	r3, pc, #288	; (adr r3, 8001fd0 <MPU_GET_PITCH_ROLL_YAW+0x1d0>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe fb11 	bl	80004d8 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fdbb 	bl	8000a38 <__aeabi_d2f>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	649a      	str	r2, [r3, #72]	; 0x48
	sensor->roll = (float)atan2(sensor->acc_x, sqrt(sensor->acc_y * sensor->acc_y + sensor->acc_z * sensor->acc_z)) * RAD_TO_DEG;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fa98 	bl	8000404 <__aeabi_i2d>
 8001ed4:	4604      	mov	r4, r0
 8001ed6:	460d      	mov	r5, r1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ee6:	fb03 f202 	mul.w	r2, r3, r2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fa80 	bl	8000404 <__aeabi_i2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f003 f943 	bl	8005196 <sqrt>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f003 f93b 	bl	8005192 <atan2>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fd88 	bl	8000a38 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fa7c 	bl	8000428 <__aeabi_f2d>
 8001f30:	a327      	add	r3, pc, #156	; (adr r3, 8001fd0 <MPU_GET_PITCH_ROLL_YAW+0x1d0>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe facf 	bl	80004d8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fd79 	bl	8000a38 <__aeabi_d2f>
 8001f46:	4602      	mov	r2, r0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	64da      	str	r2, [r3, #76]	; 0x4c
    sensor->yaw = (float)previousYaw + sensor->norm_gyro_z * deltaTime;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fece 	bl	8000cf4 <__aeabi_fmul>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <MPU_GET_PITCH_ROLL_YAW+0x1e0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f7fe fdbe 	bl	8000ae4 <__addsf3>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	651a      	str	r2, [r3, #80]	; 0x50

    if(sensor->yaw >=360){   //issue**************
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f74:	491b      	ldr	r1, [pc, #108]	; (8001fe4 <MPU_GET_PITCH_ROLL_YAW+0x1e4>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f86e 	bl	8001058 <__aeabi_fcmpge>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <MPU_GET_PITCH_ROLL_YAW+0x198>
    	sensor->yaw= sensor->yaw - 360 ;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <MPU_GET_PITCH_ROLL_YAW+0x1e4>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fda9 	bl	8000ae0 <__aeabi_fsub>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	651a      	str	r2, [r3, #80]	; 0x50
 8001f96:	e00e      	b.n	8001fb6 <MPU_GET_PITCH_ROLL_YAW+0x1b6>
    } else if (sensor->yaw <= -360){
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9c:	4912      	ldr	r1, [pc, #72]	; (8001fe8 <MPU_GET_PITCH_ROLL_YAW+0x1e8>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f850 	bl	8001044 <__aeabi_fcmple>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <MPU_GET_PITCH_ROLL_YAW+0x1b6>
    	sensor->yaw <= 360 + sensor->yaw ;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fae:	490d      	ldr	r1, [pc, #52]	; (8001fe4 <MPU_GET_PITCH_ROLL_YAW+0x1e4>)
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fd97 	bl	8000ae4 <__addsf3>
    }

    previousTime = currentTime;
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <MPU_GET_PITCH_ROLL_YAW+0x1d8>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6013      	str	r3, [r2, #0]
    previousYaw = sensor->yaw;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <MPU_GET_PITCH_ROLL_YAW+0x1e0>)
 8001fc2:	6013      	str	r3, [r2, #0]

}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bdb0      	pop	{r4, r5, r7, pc}
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	1a63cbb0 	.word	0x1a63cbb0
 8001fd4:	404ca5dc 	.word	0x404ca5dc
 8001fd8:	20000164 	.word	0x20000164
 8001fdc:	447a0000 	.word	0x447a0000
 8001fe0:	20000168 	.word	0x20000168
 8001fe4:	43b40000 	.word	0x43b40000
 8001fe8:	c3b40000 	.word	0xc3b40000

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_Init+0x28>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_Init+0x28>)
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 f92b 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	200f      	movs	r0, #15
 8002004:	f000 f808 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff fa2c 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f935 	bl	80022a6 <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 f90b 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000084 	.word	0x20000084
 8002070:	2000008c 	.word	0x2000008c
 8002074:	20000088 	.word	0x20000088

08002078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x1c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x20>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a03      	ldr	r2, [pc, #12]	; (8002098 <HAL_IncTick+0x20>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	2000008c 	.word	0x2000008c
 8002098:	2000016c 	.word	0x2000016c

0800209c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <HAL_GetTick+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	2000016c 	.word	0x2000016c

080020b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff fff0 	bl	800209c <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_Delay+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffe0 	bl	800209c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000008c 	.word	0x2000008c

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff90 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff49 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff5e 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffb0 	bl	8002214 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b08b      	sub	sp, #44	; 0x2c
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	e169      	b.n	80025a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d4:	2201      	movs	r2, #1
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8158 	bne.w	80025a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a9a      	ldr	r2, [pc, #616]	; (8002560 <HAL_GPIO_Init+0x2a0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d05e      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 80022fc:	4a98      	ldr	r2, [pc, #608]	; (8002560 <HAL_GPIO_Init+0x2a0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d875      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002302:	4a98      	ldr	r2, [pc, #608]	; (8002564 <HAL_GPIO_Init+0x2a4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d058      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002308:	4a96      	ldr	r2, [pc, #600]	; (8002564 <HAL_GPIO_Init+0x2a4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d86f      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800230e:	4a96      	ldr	r2, [pc, #600]	; (8002568 <HAL_GPIO_Init+0x2a8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d052      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002314:	4a94      	ldr	r2, [pc, #592]	; (8002568 <HAL_GPIO_Init+0x2a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d869      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800231a:	4a94      	ldr	r2, [pc, #592]	; (800256c <HAL_GPIO_Init+0x2ac>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04c      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002320:	4a92      	ldr	r2, [pc, #584]	; (800256c <HAL_GPIO_Init+0x2ac>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d863      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002326:	4a92      	ldr	r2, [pc, #584]	; (8002570 <HAL_GPIO_Init+0x2b0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d046      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 800232c:	4a90      	ldr	r2, [pc, #576]	; (8002570 <HAL_GPIO_Init+0x2b0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d85d      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002332:	2b12      	cmp	r3, #18
 8002334:	d82a      	bhi.n	800238c <HAL_GPIO_Init+0xcc>
 8002336:	2b12      	cmp	r3, #18
 8002338:	d859      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_GPIO_Init+0x80>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	080023bb 	.word	0x080023bb
 8002344:	08002395 	.word	0x08002395
 8002348:	080023a7 	.word	0x080023a7
 800234c:	080023e9 	.word	0x080023e9
 8002350:	080023ef 	.word	0x080023ef
 8002354:	080023ef 	.word	0x080023ef
 8002358:	080023ef 	.word	0x080023ef
 800235c:	080023ef 	.word	0x080023ef
 8002360:	080023ef 	.word	0x080023ef
 8002364:	080023ef 	.word	0x080023ef
 8002368:	080023ef 	.word	0x080023ef
 800236c:	080023ef 	.word	0x080023ef
 8002370:	080023ef 	.word	0x080023ef
 8002374:	080023ef 	.word	0x080023ef
 8002378:	080023ef 	.word	0x080023ef
 800237c:	080023ef 	.word	0x080023ef
 8002380:	080023ef 	.word	0x080023ef
 8002384:	0800239d 	.word	0x0800239d
 8002388:	080023b1 	.word	0x080023b1
 800238c:	4a79      	ldr	r2, [pc, #484]	; (8002574 <HAL_GPIO_Init+0x2b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002392:	e02c      	b.n	80023ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e029      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	3304      	adds	r3, #4
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e024      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	3308      	adds	r3, #8
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e01f      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	330c      	adds	r3, #12
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e01a      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c2:	2304      	movs	r3, #4
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e013      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	611a      	str	r2, [r3, #16]
          break;
 80023da:	e009      	b.n	80023f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023dc:	2308      	movs	r3, #8
 80023de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	615a      	str	r2, [r3, #20]
          break;
 80023e6:	e003      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          break;
 80023ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d801      	bhi.n	80023fa <HAL_GPIO_Init+0x13a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	e001      	b.n	80023fe <HAL_GPIO_Init+0x13e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d802      	bhi.n	800240c <HAL_GPIO_Init+0x14c>
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x152>
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	3b08      	subs	r3, #8
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	210f      	movs	r1, #15
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	401a      	ands	r2, r3
 8002424:	6a39      	ldr	r1, [r7, #32]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80b1 	beq.w	80025a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002458:	4a48      	ldr	r2, [pc, #288]	; (800257c <HAL_GPIO_Init+0x2bc>)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a40      	ldr	r2, [pc, #256]	; (8002580 <HAL_GPIO_Init+0x2c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1ec>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3f      	ldr	r2, [pc, #252]	; (8002584 <HAL_GPIO_Init+0x2c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1e8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3e      	ldr	r2, [pc, #248]	; (8002588 <HAL_GPIO_Init+0x2c8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1e4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3d      	ldr	r2, [pc, #244]	; (800258c <HAL_GPIO_Init+0x2cc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1e0>
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024ac:	2300      	movs	r3, #0
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024be:	492f      	ldr	r1, [pc, #188]	; (800257c <HAL_GPIO_Init+0x2bc>)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	492c      	ldr	r1, [pc, #176]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4928      	ldr	r1, [pc, #160]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	43db      	mvns	r3, r3
 8002516:	491e      	ldr	r1, [pc, #120]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002518:	4013      	ands	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4918      	ldr	r1, [pc, #96]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	4914      	ldr	r1, [pc, #80]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002540:	4013      	ands	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d021      	beq.n	8002594 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	490e      	ldr	r1, [pc, #56]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
 800255c:	e021      	b.n	80025a2 <HAL_GPIO_Init+0x2e2>
 800255e:	bf00      	nop
 8002560:	10320000 	.word	0x10320000
 8002564:	10310000 	.word	0x10310000
 8002568:	10220000 	.word	0x10220000
 800256c:	10210000 	.word	0x10210000
 8002570:	10120000 	.word	0x10120000
 8002574:	10110000 	.word	0x10110000
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000
 8002580:	40010800 	.word	0x40010800
 8002584:	40010c00 	.word	0x40010c00
 8002588:	40011000 	.word	0x40011000
 800258c:	40011400 	.word	0x40011400
 8002590:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	43db      	mvns	r3, r3
 800259c:	4909      	ldr	r1, [pc, #36]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800259e:	4013      	ands	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f ae8e 	bne.w	80022d4 <HAL_GPIO_Init+0x14>
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	372c      	adds	r7, #44	; 0x2c
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e12b      	b.n	8002862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe ff52 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800265c:	f002 f8b6 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8002660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a81      	ldr	r2, [pc, #516]	; (800286c <HAL_I2C_Init+0x274>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d807      	bhi.n	800267c <HAL_I2C_Init+0x84>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a80      	ldr	r2, [pc, #512]	; (8002870 <HAL_I2C_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	bf94      	ite	ls
 8002674:	2301      	movls	r3, #1
 8002676:	2300      	movhi	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e006      	b.n	800268a <HAL_I2C_Init+0x92>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a7d      	ldr	r2, [pc, #500]	; (8002874 <HAL_I2C_Init+0x27c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0e7      	b.n	8002862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a78      	ldr	r2, [pc, #480]	; (8002878 <HAL_I2C_Init+0x280>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a6a      	ldr	r2, [pc, #424]	; (800286c <HAL_I2C_Init+0x274>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d802      	bhi.n	80026cc <HAL_I2C_Init+0xd4>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	e009      	b.n	80026e0 <HAL_I2C_Init+0xe8>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4a69      	ldr	r2, [pc, #420]	; (800287c <HAL_I2C_Init+0x284>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	3301      	adds	r3, #1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	495c      	ldr	r1, [pc, #368]	; (800286c <HAL_I2C_Init+0x274>)
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d819      	bhi.n	8002734 <HAL_I2C_Init+0x13c>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e59      	subs	r1, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fbb1 f3f3 	udiv	r3, r1, r3
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002714:	400b      	ands	r3, r1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_I2C_Init+0x138>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e59      	subs	r1, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fbb1 f3f3 	udiv	r3, r1, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272e:	e051      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002730:	2304      	movs	r3, #4
 8002732:	e04f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d111      	bne.n	8002760 <HAL_I2C_Init+0x168>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	440b      	add	r3, r1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e012      	b.n	8002786 <HAL_I2C_Init+0x18e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Init+0x196>
 800278a:	2301      	movs	r3, #1
 800278c:	e022      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10e      	bne.n	80027b4 <HAL_I2C_Init+0x1bc>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1e58      	subs	r0, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	440b      	add	r3, r1
 80027a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b2:	e00f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6809      	ldr	r1, [r1, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69da      	ldr	r2, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6911      	ldr	r1, [r2, #16]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	430b      	orrs	r3, r1
 8002816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	000186a0 	.word	0x000186a0
 8002870:	001e847f 	.word	0x001e847f
 8002874:	003d08ff 	.word	0x003d08ff
 8002878:	431bde83 	.word	0x431bde83
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	461a      	mov	r2, r3
 800288c:	460b      	mov	r3, r1
 800288e:	817b      	strh	r3, [r7, #10]
 8002890:	4613      	mov	r3, r2
 8002892:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fc02 	bl	800209c <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	f040 80e0 	bne.w	8002a68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2319      	movs	r3, #25
 80028ae:	2201      	movs	r2, #1
 80028b0:	4970      	ldr	r1, [pc, #448]	; (8002a74 <HAL_I2C_Master_Transmit+0x1f4>)
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f001 f98a 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	e0d3      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_I2C_Master_Transmit+0x50>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e0cc      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d007      	beq.n	80028f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002904:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2221      	movs	r2, #33	; 0x21
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2210      	movs	r2, #16
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	893a      	ldrh	r2, [r7, #8]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a50      	ldr	r2, [pc, #320]	; (8002a78 <HAL_I2C_Master_Transmit+0x1f8>)
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002938:	8979      	ldrh	r1, [r7, #10]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fe76 	bl	8003630 <I2C_MasterRequestWrite>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e08d      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002964:	e066      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f001 fa48 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b04      	cmp	r3, #4
 800297c:	d107      	bne.n	800298e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06b      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d11b      	bne.n	8002a08 <HAL_I2C_Master_Transmit+0x188>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d017      	beq.n	8002a08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6a39      	ldr	r1, [r7, #32]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f001 fa3f 	bl	8003e90 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d107      	bne.n	8002a30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e01a      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d194      	bne.n	8002966 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	00100002 	.word	0x00100002
 8002a78:	ffff0000 	.word	0xffff0000

08002a7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	461a      	mov	r2, r3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	817b      	strh	r3, [r7, #10]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff fb02 	bl	800209c <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	f040 824b 	bne.w	8002f3e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2319      	movs	r3, #25
 8002aae:	2201      	movs	r2, #1
 8002ab0:	497f      	ldr	r1, [pc, #508]	; (8002cb0 <HAL_I2C_Master_Receive+0x234>)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f001 f88a 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e23e      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_I2C_Master_Receive+0x54>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e237      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d007      	beq.n	8002af6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2222      	movs	r2, #34	; 0x22
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2210      	movs	r2, #16
 8002b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	893a      	ldrh	r2, [r7, #8]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a5f      	ldr	r2, [pc, #380]	; (8002cb4 <HAL_I2C_Master_Receive+0x238>)
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fdf8 	bl	8003734 <I2C_MasterRequestRead>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1f8      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d113      	bne.n	8002b7e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e1cc      	b.n	8002f18 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d11e      	bne.n	8002bc4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b96:	b672      	cpsid	i
}
 8002b98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bc0:	b662      	cpsie	i
}
 8002bc2:	e035      	b.n	8002c30 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11e      	bne.n	8002c0a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bdc:	b672      	cpsid	i
}
 8002bde:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c06:	b662      	cpsie	i
}
 8002c08:	e012      	b.n	8002c30 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c30:	e172      	b.n	8002f18 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	f200 811f 	bhi.w	8002e7a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d123      	bne.n	8002c8c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f001 f969 	bl	8003f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e173      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c8a:	e145      	b.n	8002f18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d152      	bne.n	8002d3a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <HAL_I2C_Master_Receive+0x23c>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 ff94 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e148      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
 8002cae:	bf00      	nop
 8002cb0:	00100002 	.word	0x00100002
 8002cb4:	ffff0000 	.word	0xffff0000
 8002cb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cbc:	b672      	cpsid	i
}
 8002cbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d02:	b662      	cpsie	i
}
 8002d04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d38:	e0ee      	b.n	8002f18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2200      	movs	r2, #0
 8002d42:	4981      	ldr	r1, [pc, #516]	; (8002f48 <HAL_I2C_Master_Receive+0x4cc>)
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 ff41 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0f5      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d64:	b672      	cpsid	i
}
 8002d66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d9a:	4b6c      	ldr	r3, [pc, #432]	; (8002f4c <HAL_I2C_Master_Receive+0x4d0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	08db      	lsrs	r3, r3, #3
 8002da0:	4a6b      	ldr	r2, [pc, #428]	; (8002f50 <HAL_I2C_Master_Receive+0x4d4>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0a1a      	lsrs	r2, r3, #8
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d118      	bne.n	8002df2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002de2:	b662      	cpsie	i
}
 8002de4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0a6      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d1d9      	bne.n	8002db4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e42:	b662      	cpsie	i
}
 8002e44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e78:	e04e      	b.n	8002f18 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 f84e 	bl	8003f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e058      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d124      	bne.n	8002f18 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d107      	bne.n	8002ee6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f47f ae88 	bne.w	8002c32 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00010004 	.word	0x00010004
 8002f4c:	20000084 	.word	0x20000084
 8002f50:	14f8b589 	.word	0x14f8b589

08002f54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f6e:	f7ff f895 	bl	800209c <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	f040 80d9 	bne.w	8003134 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2319      	movs	r3, #25
 8002f88:	2201      	movs	r2, #1
 8002f8a:	496d      	ldr	r1, [pc, #436]	; (8003140 <HAL_I2C_Mem_Write+0x1ec>)
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fe1d 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e0cc      	b.n	8003136 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Mem_Write+0x56>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e0c5      	b.n	8003136 <HAL_I2C_Mem_Write+0x1e2>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d007      	beq.n	8002fd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2221      	movs	r2, #33	; 0x21
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a4d      	ldr	r2, [pc, #308]	; (8003144 <HAL_I2C_Mem_Write+0x1f0>)
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003012:	88f8      	ldrh	r0, [r7, #6]
 8003014:	893a      	ldrh	r2, [r7, #8]
 8003016:	8979      	ldrh	r1, [r7, #10]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4603      	mov	r3, r0
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fc54 	bl	80038d0 <I2C_RequestMemoryWrite>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d052      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e081      	b.n	8003136 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fee2 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b04      	cmp	r3, #4
 8003048:	d107      	bne.n	800305a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06b      	b.n	8003136 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d11b      	bne.n	80030d4 <HAL_I2C_Mem_Write+0x180>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1aa      	bne.n	8003032 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fed5 	bl	8003e90 <I2C_WaitOnBTFFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d107      	bne.n	8003104 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003102:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e016      	b.n	8003136 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	00100002 	.word	0x00100002
 8003144:	ffff0000 	.word	0xffff0000

08003148 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	4608      	mov	r0, r1
 8003152:	4611      	mov	r1, r2
 8003154:	461a      	mov	r2, r3
 8003156:	4603      	mov	r3, r0
 8003158:	817b      	strh	r3, [r7, #10]
 800315a:	460b      	mov	r3, r1
 800315c:	813b      	strh	r3, [r7, #8]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003166:	f7fe ff99 	bl	800209c <HAL_GetTick>
 800316a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	f040 8250 	bne.w	800361a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	2319      	movs	r3, #25
 8003180:	2201      	movs	r2, #1
 8003182:	4982      	ldr	r1, [pc, #520]	; (800338c <HAL_I2C_Mem_Read+0x244>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fd21 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	e243      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_I2C_Mem_Read+0x5a>
 800319e:	2302      	movs	r3, #2
 80031a0:	e23c      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d007      	beq.n	80031c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2222      	movs	r2, #34	; 0x22
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a62      	ldr	r2, [pc, #392]	; (8003390 <HAL_I2C_Mem_Read+0x248>)
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800320a:	88f8      	ldrh	r0, [r7, #6]
 800320c:	893a      	ldrh	r2, [r7, #8]
 800320e:	8979      	ldrh	r1, [r7, #10]
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	4603      	mov	r3, r0
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fbee 	bl	80039fc <I2C_RequestMemoryRead>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1f8      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d113      	bne.n	800325a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e1cc      	b.n	80035f4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b01      	cmp	r3, #1
 8003260:	d11e      	bne.n	80032a0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003272:	b672      	cpsid	i
}
 8003274:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800329c:	b662      	cpsie	i
}
 800329e:	e035      	b.n	800330c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d11e      	bne.n	80032e6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032b8:	b672      	cpsid	i
}
 80032ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032e2:	b662      	cpsie	i
}
 80032e4:	e012      	b.n	800330c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800330c:	e172      	b.n	80035f4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	2b03      	cmp	r3, #3
 8003314:	f200 811f 	bhi.w	8003556 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	2b01      	cmp	r3, #1
 800331e:	d123      	bne.n	8003368 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fdfb 	bl	8003f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e173      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003366:	e145      	b.n	80035f4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336c:	2b02      	cmp	r3, #2
 800336e:	d152      	bne.n	8003416 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	2200      	movs	r2, #0
 8003378:	4906      	ldr	r1, [pc, #24]	; (8003394 <HAL_I2C_Mem_Read+0x24c>)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fc26 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e148      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
 800338a:	bf00      	nop
 800338c:	00100002 	.word	0x00100002
 8003390:	ffff0000 	.word	0xffff0000
 8003394:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003398:	b672      	cpsid	i
}
 800339a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033de:	b662      	cpsie	i
}
 80033e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003414:	e0ee      	b.n	80035f4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	2200      	movs	r2, #0
 800341e:	4981      	ldr	r1, [pc, #516]	; (8003624 <HAL_I2C_Mem_Read+0x4dc>)
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fbd3 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0f5      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003440:	b672      	cpsid	i
}
 8003442:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003476:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <HAL_I2C_Mem_Read+0x4e0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	08db      	lsrs	r3, r3, #3
 800347c:	4a6b      	ldr	r2, [pc, #428]	; (800362c <HAL_I2C_Mem_Read+0x4e4>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0a1a      	lsrs	r2, r3, #8
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00da      	lsls	r2, r3, #3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	3b01      	subs	r3, #1
 8003494:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d118      	bne.n	80034ce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034be:	b662      	cpsie	i
}
 80034c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0a6      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d1d9      	bne.n	8003490 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800351e:	b662      	cpsie	i
}
 8003520:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003554:	e04e      	b.n	80035f4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fce0 	bl	8003f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e058      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d124      	bne.n	80035f4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d107      	bne.n	80035c2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f47f ae88 	bne.w	800330e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	00010004 	.word	0x00010004
 8003628:	20000084 	.word	0x20000084
 800362c:	14f8b589 	.word	0x14f8b589

08003630 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	460b      	mov	r3, r1
 800363e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d006      	beq.n	800365a <I2C_MasterRequestWrite+0x2a>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d003      	beq.n	800365a <I2C_MasterRequestWrite+0x2a>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003658:	d108      	bne.n	800366c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e00b      	b.n	8003684 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	2b12      	cmp	r3, #18
 8003672:	d107      	bne.n	8003684 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003682:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fa9b 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	d103      	bne.n	80036b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e035      	b.n	8003724 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c0:	d108      	bne.n	80036d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d0:	611a      	str	r2, [r3, #16]
 80036d2:	e01b      	b.n	800370c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036d4:	897b      	ldrh	r3, [r7, #10]
 80036d6:	11db      	asrs	r3, r3, #7
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0306 	and.w	r3, r3, #6
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f063 030f 	orn	r3, r3, #15
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	490e      	ldr	r1, [pc, #56]	; (800372c <I2C_MasterRequestWrite+0xfc>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fae4 	bl	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e010      	b.n	8003724 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4907      	ldr	r1, [pc, #28]	; (8003730 <I2C_MasterRequestWrite+0x100>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fad4 	bl	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	00010008 	.word	0x00010008
 8003730:	00010002 	.word	0x00010002

08003734 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	460b      	mov	r3, r1
 8003742:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003758:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d006      	beq.n	800376e <I2C_MasterRequestRead+0x3a>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d003      	beq.n	800376e <I2C_MasterRequestRead+0x3a>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800376c:	d108      	bne.n	8003780 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e00b      	b.n	8003798 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	2b11      	cmp	r3, #17
 8003786:	d107      	bne.n	8003798 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fa11 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037be:	d103      	bne.n	80037c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e079      	b.n	80038c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d4:	d108      	bne.n	80037e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	611a      	str	r2, [r3, #16]
 80037e6:	e05f      	b.n	80038a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037e8:	897b      	ldrh	r3, [r7, #10]
 80037ea:	11db      	asrs	r3, r3, #7
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f063 030f 	orn	r3, r3, #15
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4930      	ldr	r1, [pc, #192]	; (80038c8 <I2C_MasterRequestRead+0x194>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fa5a 	bl	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e054      	b.n	80038c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4929      	ldr	r1, [pc, #164]	; (80038cc <I2C_MasterRequestRead+0x198>)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fa4a 	bl	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e044      	b.n	80038c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f9af 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d103      	bne.n	800388c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e017      	b.n	80038c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003890:	897b      	ldrh	r3, [r7, #10]
 8003892:	11db      	asrs	r3, r3, #7
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 0306 	and.w	r3, r3, #6
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f063 030e 	orn	r3, r3, #14
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4907      	ldr	r1, [pc, #28]	; (80038cc <I2C_MasterRequestRead+0x198>)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fa06 	bl	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	00010008 	.word	0x00010008
 80038cc:	00010002 	.word	0x00010002

080038d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	4608      	mov	r0, r1
 80038da:	4611      	mov	r1, r2
 80038dc:	461a      	mov	r2, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	817b      	strh	r3, [r7, #10]
 80038e2:	460b      	mov	r3, r1
 80038e4:	813b      	strh	r3, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2200      	movs	r2, #0
 8003902:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f960 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003920:	d103      	bne.n	800392a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e05f      	b.n	80039ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800392e:	897b      	ldrh	r3, [r7, #10]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800393c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	492d      	ldr	r1, [pc, #180]	; (80039f8 <I2C_RequestMemoryWrite+0x128>)
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f9bb 	bl	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e04c      	b.n	80039ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	6a39      	ldr	r1, [r7, #32]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fa46 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00d      	beq.n	8003996 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b04      	cmp	r3, #4
 8003980:	d107      	bne.n	8003992 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e02b      	b.n	80039ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800399c:	893b      	ldrh	r3, [r7, #8]
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	611a      	str	r2, [r3, #16]
 80039a6:	e021      	b.n	80039ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039a8:	893b      	ldrh	r3, [r7, #8]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa20 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d107      	bne.n	80039de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e005      	b.n	80039ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039e2:	893b      	ldrh	r3, [r7, #8]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	00010002 	.word	0x00010002

080039fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f8c2 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5c:	d103      	bne.n	8003a66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0aa      	b.n	8003bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a6a:	897b      	ldrh	r3, [r7, #10]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	6a3a      	ldr	r2, [r7, #32]
 8003a7e:	4952      	ldr	r1, [pc, #328]	; (8003bc8 <I2C_RequestMemoryRead+0x1cc>)
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f91d 	bl	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e097      	b.n	8003bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	6a39      	ldr	r1, [r7, #32]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f9a8 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00d      	beq.n	8003ad2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d107      	bne.n	8003ace <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003acc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e076      	b.n	8003bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d105      	bne.n	8003ae4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad8:	893b      	ldrh	r3, [r7, #8]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]
 8003ae2:	e021      	b.n	8003b28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ae4:	893b      	ldrh	r3, [r7, #8]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	6a39      	ldr	r1, [r7, #32]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f982 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d107      	bne.n	8003b1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e050      	b.n	8003bc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b1e:	893b      	ldrh	r3, [r7, #8]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	6a39      	ldr	r1, [r7, #32]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f967 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d107      	bne.n	8003b50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e035      	b.n	8003bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f82b 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8a:	d103      	bne.n	8003b94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e013      	b.n	8003bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b98:	897b      	ldrh	r3, [r7, #10]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	4906      	ldr	r1, [pc, #24]	; (8003bc8 <I2C_RequestMemoryRead+0x1cc>)
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f886 	bl	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	00010002 	.word	0x00010002

08003bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bdc:	e048      	b.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d044      	beq.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be6:	f7fe fa59 	bl	800209c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d139      	bne.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	0c1b      	lsrs	r3, r3, #16
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d10d      	bne.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	e00c      	b.n	8003c3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d116      	bne.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e023      	b.n	8003cb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10d      	bne.n	8003c96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	43da      	mvns	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	e00c      	b.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d093      	beq.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cce:	e071      	b.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	d123      	bne.n	8003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f043 0204 	orr.w	r2, r3, #4
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e067      	b.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d041      	beq.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d30:	f7fe f9b4 	bl	800209c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d302      	bcc.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d136      	bne.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d10c      	bne.n	8003d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	e00b      	b.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	43da      	mvns	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e021      	b.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d10c      	bne.n	8003dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e00b      	b.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	43da      	mvns	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f47f af6d 	bne.w	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e0c:	e034      	b.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f8e3 	bl	8003fda <I2C_IsAcknowledgeFailed>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e034      	b.n	8003e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d028      	beq.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe f939 	bl	800209c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d11d      	bne.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d016      	beq.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e007      	b.n	8003e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d1c3      	bne.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e9c:	e034      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f89b 	bl	8003fda <I2C_IsAcknowledgeFailed>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e034      	b.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d028      	beq.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb6:	f7fe f8f1 	bl	800209c <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d302      	bcc.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d11d      	bne.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d016      	beq.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e007      	b.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d1c3      	bne.n	8003e9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f2c:	e049      	b.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d119      	bne.n	8003f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0210 	mvn.w	r2, #16
 8003f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e030      	b.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f70:	f7fe f894 	bl	800209c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d11d      	bne.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d016      	beq.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e007      	b.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d1ae      	bne.n	8003f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff0:	d11b      	bne.n	800402a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ffa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0204 	orr.w	r2, r3, #4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
	...

08004038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e272      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8087 	beq.w	8004166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004058:	4b92      	ldr	r3, [pc, #584]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b04      	cmp	r3, #4
 8004062:	d00c      	beq.n	800407e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004064:	4b8f      	ldr	r3, [pc, #572]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d112      	bne.n	8004096 <HAL_RCC_OscConfig+0x5e>
 8004070:	4b8c      	ldr	r3, [pc, #560]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d10b      	bne.n	8004096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407e:	4b89      	ldr	r3, [pc, #548]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d06c      	beq.n	8004164 <HAL_RCC_OscConfig+0x12c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d168      	bne.n	8004164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e24c      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x76>
 80040a0:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a7f      	ldr	r2, [pc, #508]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e02e      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x98>
 80040b6:	4b7b      	ldr	r3, [pc, #492]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7a      	ldr	r2, [pc, #488]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b78      	ldr	r3, [pc, #480]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a77      	ldr	r2, [pc, #476]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0xbc>
 80040da:	4b72      	ldr	r3, [pc, #456]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a71      	ldr	r2, [pc, #452]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b6f      	ldr	r3, [pc, #444]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6e      	ldr	r2, [pc, #440]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040f4:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6a      	ldr	r2, [pc, #424]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fd ffc2 	bl	800209c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411c:	f7fd ffbe 	bl	800209c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e200      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b5d      	ldr	r3, [pc, #372]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xe4>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fd ffae 	bl	800209c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fd ffaa 	bl	800209c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1ec      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x10c>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004172:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800417e:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b08      	cmp	r3, #8
 8004188:	d11c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x18c>
 800418a:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d116      	bne.n	80041c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x176>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e1c0      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4939      	ldr	r1, [pc, #228]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	e03a      	b.n	800423a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041cc:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <HAL_RCC_OscConfig+0x270>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fd ff63 	bl	800209c <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041da:	f7fd ff5f 	bl	800209c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e1a1      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	4b2d      	ldr	r3, [pc, #180]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4927      	ldr	r1, [pc, #156]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <HAL_RCC_OscConfig+0x270>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fd ff42 	bl	800209c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421c:	f7fd ff3e 	bl	800209c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e180      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d03a      	beq.n	80042bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d019      	beq.n	8004282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004254:	f7fd ff22 	bl	800209c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425c:	f7fd ff1e 	bl	800209c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e160      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800427a:	2001      	movs	r0, #1
 800427c:	f000 faba 	bl	80047f4 <RCC_Delay>
 8004280:	e01c      	b.n	80042bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fd ff08 	bl	800209c <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428e:	e00f      	b.n	80042b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004290:	f7fd ff04 	bl	800209c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d908      	bls.n	80042b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e146      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	42420000 	.word	0x42420000
 80042ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b0:	4b92      	ldr	r3, [pc, #584]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e9      	bne.n	8004290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a6 	beq.w	8004416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ca:	2300      	movs	r3, #0
 80042cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ce:	4b8b      	ldr	r3, [pc, #556]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10d      	bne.n	80042f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4a87      	ldr	r2, [pc, #540]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e4:	61d3      	str	r3, [r2, #28]
 80042e6:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f6:	4b82      	ldr	r3, [pc, #520]	; (8004500 <HAL_RCC_OscConfig+0x4c8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d118      	bne.n	8004334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004302:	4b7f      	ldr	r3, [pc, #508]	; (8004500 <HAL_RCC_OscConfig+0x4c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7e      	ldr	r2, [pc, #504]	; (8004500 <HAL_RCC_OscConfig+0x4c8>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430e:	f7fd fec5 	bl	800209c <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fd fec1 	bl	800209c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e103      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	4b75      	ldr	r3, [pc, #468]	; (8004500 <HAL_RCC_OscConfig+0x4c8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x312>
 800433c:	4b6f      	ldr	r3, [pc, #444]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4a6e      	ldr	r2, [pc, #440]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6213      	str	r3, [r2, #32]
 8004348:	e02d      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x334>
 8004352:	4b6a      	ldr	r3, [pc, #424]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	4a69      	ldr	r2, [pc, #420]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	6213      	str	r3, [r2, #32]
 800435e:	4b67      	ldr	r3, [pc, #412]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4a66      	ldr	r2, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	6213      	str	r3, [r2, #32]
 800436a:	e01c      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0x356>
 8004374:	4b61      	ldr	r3, [pc, #388]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4a60      	ldr	r2, [pc, #384]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6213      	str	r3, [r2, #32]
 8004380:	4b5e      	ldr	r3, [pc, #376]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4a5d      	ldr	r2, [pc, #372]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6213      	str	r3, [r2, #32]
 800438c:	e00b      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800438e:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	4a5a      	ldr	r2, [pc, #360]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6213      	str	r3, [r2, #32]
 800439a:	4b58      	ldr	r3, [pc, #352]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a57      	ldr	r2, [pc, #348]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ae:	f7fd fe75 	bl	800209c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fd fe71 	bl	800209c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0b1      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	4b4b      	ldr	r3, [pc, #300]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCC_OscConfig+0x37e>
 80043d8:	e014      	b.n	8004404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fd fe5f 	bl	800209c <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fd fe5b 	bl	800209c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e09b      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	4b40      	ldr	r3, [pc, #256]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ee      	bne.n	80043e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b3c      	ldr	r3, [pc, #240]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4a3b      	ldr	r2, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8087 	beq.w	800452e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004420:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b08      	cmp	r3, #8
 800442a:	d061      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d146      	bne.n	80044c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <HAL_RCC_OscConfig+0x4cc>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fd fe2f 	bl	800209c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004442:	f7fd fe2b 	bl	800209c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e06d      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d108      	bne.n	800447c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800446a:	4b24      	ldr	r3, [pc, #144]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	4921      	ldr	r1, [pc, #132]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800447c:	4b1f      	ldr	r3, [pc, #124]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a19      	ldr	r1, [r3, #32]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	430b      	orrs	r3, r1
 800448e:	491b      	ldr	r1, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <HAL_RCC_OscConfig+0x4cc>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fd fdff 	bl	800209c <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fd fdfb 	bl	800209c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e03d      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x46a>
 80044c0:	e035      	b.n	800452e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <HAL_RCC_OscConfig+0x4cc>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fd fde8 	bl	800209c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fd fde4 	bl	800209c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e026      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x498>
 80044ee:	e01e      	b.n	800452e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e019      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
 80044fc:	40021000 	.word	0x40021000
 8004500:	40007000 	.word	0x40007000
 8004504:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_OscConfig+0x500>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	429a      	cmp	r2, r3
 800451a:	d106      	bne.n	800452a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d001      	beq.n	800452e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000

0800453c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0d0      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004550:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d910      	bls.n	8004580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b67      	ldr	r3, [pc, #412]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 0207 	bic.w	r2, r3, #7
 8004566:	4965      	ldr	r1, [pc, #404]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	4b63      	ldr	r3, [pc, #396]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0b8      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004598:	4b59      	ldr	r3, [pc, #356]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a58      	ldr	r2, [pc, #352]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b0:	4b53      	ldr	r3, [pc, #332]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a52      	ldr	r2, [pc, #328]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045bc:	4b50      	ldr	r3, [pc, #320]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	494d      	ldr	r1, [pc, #308]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d040      	beq.n	800465c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d115      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e07f      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fa:	4b41      	ldr	r3, [pc, #260]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e073      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	4b3d      	ldr	r3, [pc, #244]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e06b      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4936      	ldr	r1, [pc, #216]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800462c:	f7fd fd36 	bl	800209c <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	e00a      	b.n	800464a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004634:	f7fd fd32 	bl	800209c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e053      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 020c 	and.w	r2, r3, #12
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	429a      	cmp	r2, r3
 800465a:	d1eb      	bne.n	8004634 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800465c:	4b27      	ldr	r3, [pc, #156]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d210      	bcs.n	800468c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 0207 	bic.w	r2, r3, #7
 8004672:	4922      	ldr	r1, [pc, #136]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e032      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4916      	ldr	r1, [pc, #88]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	490e      	ldr	r1, [pc, #56]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ca:	f000 f821 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	490a      	ldr	r1, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	5ccb      	ldrb	r3, [r1, r3]
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	4a09      	ldr	r2, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1cc>)
 80046e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1d0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fd fc94 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40022000 	.word	0x40022000
 8004700:	40021000 	.word	0x40021000
 8004704:	08005894 	.word	0x08005894
 8004708:	20000084 	.word	0x20000084
 800470c:	20000088 	.word	0x20000088

08004710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800472a:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b04      	cmp	r3, #4
 8004738:	d002      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x30>
 800473a:	2b08      	cmp	r3, #8
 800473c:	d003      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0x36>
 800473e:	e027      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004740:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004742:	613b      	str	r3, [r7, #16]
      break;
 8004744:	e027      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	0c9b      	lsrs	r3, r3, #18
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004750:	5cd3      	ldrb	r3, [r2, r3]
 8004752:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d010      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	0c5b      	lsrs	r3, r3, #17
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004772:	fb03 f202 	mul.w	r2, r3, r2
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e004      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	613b      	str	r3, [r7, #16]
      break;
 800478e:	e002      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004792:	613b      	str	r3, [r7, #16]
      break;
 8004794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004796:	693b      	ldr	r3, [r7, #16]
}
 8004798:	4618      	mov	r0, r3
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	007a1200 	.word	0x007a1200
 80047ac:	080058ac 	.word	0x080058ac
 80047b0:	080058bc 	.word	0x080058bc
 80047b4:	003d0900 	.word	0x003d0900

080047b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047bc:	4b02      	ldr	r3, [pc, #8]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	20000084 	.word	0x20000084

080047cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047d0:	f7ff fff2 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4903      	ldr	r1, [pc, #12]	; (80047f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40021000 	.word	0x40021000
 80047f0:	080058a4 	.word	0x080058a4

080047f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <RCC_Delay+0x34>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0a      	ldr	r2, [pc, #40]	; (800482c <RCC_Delay+0x38>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	0a5b      	lsrs	r3, r3, #9
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004810:	bf00      	nop
  }
  while (Delay --);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1e5a      	subs	r2, r3, #1
 8004816:	60fa      	str	r2, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f9      	bne.n	8004810 <RCC_Delay+0x1c>
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr
 8004828:	20000084 	.word	0x20000084
 800482c:	10624dd3 	.word	0x10624dd3

08004830 <siprintf>:
 8004830:	b40e      	push	{r1, r2, r3}
 8004832:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004836:	b500      	push	{lr}
 8004838:	b09c      	sub	sp, #112	; 0x70
 800483a:	ab1d      	add	r3, sp, #116	; 0x74
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	9006      	str	r0, [sp, #24]
 8004840:	9107      	str	r1, [sp, #28]
 8004842:	9104      	str	r1, [sp, #16]
 8004844:	4808      	ldr	r0, [pc, #32]	; (8004868 <siprintf+0x38>)
 8004846:	4909      	ldr	r1, [pc, #36]	; (800486c <siprintf+0x3c>)
 8004848:	f853 2b04 	ldr.w	r2, [r3], #4
 800484c:	9105      	str	r1, [sp, #20]
 800484e:	6800      	ldr	r0, [r0, #0]
 8004850:	a902      	add	r1, sp, #8
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	f000 f98e 	bl	8004b74 <_svfiprintf_r>
 8004858:	2200      	movs	r2, #0
 800485a:	9b02      	ldr	r3, [sp, #8]
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	b01c      	add	sp, #112	; 0x70
 8004860:	f85d eb04 	ldr.w	lr, [sp], #4
 8004864:	b003      	add	sp, #12
 8004866:	4770      	bx	lr
 8004868:	200000dc 	.word	0x200000dc
 800486c:	ffff0208 	.word	0xffff0208

08004870 <memset>:
 8004870:	4603      	mov	r3, r0
 8004872:	4402      	add	r2, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	d100      	bne.n	800487a <memset+0xa>
 8004878:	4770      	bx	lr
 800487a:	f803 1b01 	strb.w	r1, [r3], #1
 800487e:	e7f9      	b.n	8004874 <memset+0x4>

08004880 <__errno>:
 8004880:	4b01      	ldr	r3, [pc, #4]	; (8004888 <__errno+0x8>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	200000dc 	.word	0x200000dc

0800488c <__libc_init_array>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	2600      	movs	r6, #0
 8004890:	4d0c      	ldr	r5, [pc, #48]	; (80048c4 <__libc_init_array+0x38>)
 8004892:	4c0d      	ldr	r4, [pc, #52]	; (80048c8 <__libc_init_array+0x3c>)
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	42a6      	cmp	r6, r4
 800489a:	d109      	bne.n	80048b0 <__libc_init_array+0x24>
 800489c:	f000 ffd6 	bl	800584c <_init>
 80048a0:	2600      	movs	r6, #0
 80048a2:	4d0a      	ldr	r5, [pc, #40]	; (80048cc <__libc_init_array+0x40>)
 80048a4:	4c0a      	ldr	r4, [pc, #40]	; (80048d0 <__libc_init_array+0x44>)
 80048a6:	1b64      	subs	r4, r4, r5
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	42a6      	cmp	r6, r4
 80048ac:	d105      	bne.n	80048ba <__libc_init_array+0x2e>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b4:	4798      	blx	r3
 80048b6:	3601      	adds	r6, #1
 80048b8:	e7ee      	b.n	8004898 <__libc_init_array+0xc>
 80048ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80048be:	4798      	blx	r3
 80048c0:	3601      	adds	r6, #1
 80048c2:	e7f2      	b.n	80048aa <__libc_init_array+0x1e>
 80048c4:	08005968 	.word	0x08005968
 80048c8:	08005968 	.word	0x08005968
 80048cc:	08005968 	.word	0x08005968
 80048d0:	0800596c 	.word	0x0800596c

080048d4 <__retarget_lock_acquire_recursive>:
 80048d4:	4770      	bx	lr

080048d6 <__retarget_lock_release_recursive>:
 80048d6:	4770      	bx	lr

080048d8 <_free_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4605      	mov	r5, r0
 80048dc:	2900      	cmp	r1, #0
 80048de:	d040      	beq.n	8004962 <_free_r+0x8a>
 80048e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e4:	1f0c      	subs	r4, r1, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bfb8      	it	lt
 80048ea:	18e4      	addlt	r4, r4, r3
 80048ec:	f000 f8dc 	bl	8004aa8 <__malloc_lock>
 80048f0:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <_free_r+0x8c>)
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	b933      	cbnz	r3, 8004904 <_free_r+0x2c>
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	6014      	str	r4, [r2, #0]
 80048fa:	4628      	mov	r0, r5
 80048fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004900:	f000 b8d8 	b.w	8004ab4 <__malloc_unlock>
 8004904:	42a3      	cmp	r3, r4
 8004906:	d908      	bls.n	800491a <_free_r+0x42>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	bf01      	itttt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	1809      	addeq	r1, r1, r0
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	e7ed      	b.n	80048f6 <_free_r+0x1e>
 800491a:	461a      	mov	r2, r3
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b10b      	cbz	r3, 8004924 <_free_r+0x4c>
 8004920:	42a3      	cmp	r3, r4
 8004922:	d9fa      	bls.n	800491a <_free_r+0x42>
 8004924:	6811      	ldr	r1, [r2, #0]
 8004926:	1850      	adds	r0, r2, r1
 8004928:	42a0      	cmp	r0, r4
 800492a:	d10b      	bne.n	8004944 <_free_r+0x6c>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	4401      	add	r1, r0
 8004930:	1850      	adds	r0, r2, r1
 8004932:	4283      	cmp	r3, r0
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	d1e0      	bne.n	80048fa <_free_r+0x22>
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4408      	add	r0, r1
 800493e:	6010      	str	r0, [r2, #0]
 8004940:	6053      	str	r3, [r2, #4]
 8004942:	e7da      	b.n	80048fa <_free_r+0x22>
 8004944:	d902      	bls.n	800494c <_free_r+0x74>
 8004946:	230c      	movs	r3, #12
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	e7d6      	b.n	80048fa <_free_r+0x22>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	1821      	adds	r1, r4, r0
 8004950:	428b      	cmp	r3, r1
 8004952:	bf01      	itttt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	1809      	addeq	r1, r1, r0
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	6063      	str	r3, [r4, #4]
 800495e:	6054      	str	r4, [r2, #4]
 8004960:	e7cb      	b.n	80048fa <_free_r+0x22>
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	200002b0 	.word	0x200002b0

08004968 <sbrk_aligned>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	4e0e      	ldr	r6, [pc, #56]	; (80049a4 <sbrk_aligned+0x3c>)
 800496c:	460c      	mov	r4, r1
 800496e:	6831      	ldr	r1, [r6, #0]
 8004970:	4605      	mov	r5, r0
 8004972:	b911      	cbnz	r1, 800497a <sbrk_aligned+0x12>
 8004974:	f000 fbaa 	bl	80050cc <_sbrk_r>
 8004978:	6030      	str	r0, [r6, #0]
 800497a:	4621      	mov	r1, r4
 800497c:	4628      	mov	r0, r5
 800497e:	f000 fba5 	bl	80050cc <_sbrk_r>
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	d00a      	beq.n	800499c <sbrk_aligned+0x34>
 8004986:	1cc4      	adds	r4, r0, #3
 8004988:	f024 0403 	bic.w	r4, r4, #3
 800498c:	42a0      	cmp	r0, r4
 800498e:	d007      	beq.n	80049a0 <sbrk_aligned+0x38>
 8004990:	1a21      	subs	r1, r4, r0
 8004992:	4628      	mov	r0, r5
 8004994:	f000 fb9a 	bl	80050cc <_sbrk_r>
 8004998:	3001      	adds	r0, #1
 800499a:	d101      	bne.n	80049a0 <sbrk_aligned+0x38>
 800499c:	f04f 34ff 	mov.w	r4, #4294967295
 80049a0:	4620      	mov	r0, r4
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
 80049a4:	200002b4 	.word	0x200002b4

080049a8 <_malloc_r>:
 80049a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ac:	1ccd      	adds	r5, r1, #3
 80049ae:	f025 0503 	bic.w	r5, r5, #3
 80049b2:	3508      	adds	r5, #8
 80049b4:	2d0c      	cmp	r5, #12
 80049b6:	bf38      	it	cc
 80049b8:	250c      	movcc	r5, #12
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	4607      	mov	r7, r0
 80049be:	db01      	blt.n	80049c4 <_malloc_r+0x1c>
 80049c0:	42a9      	cmp	r1, r5
 80049c2:	d905      	bls.n	80049d0 <_malloc_r+0x28>
 80049c4:	230c      	movs	r3, #12
 80049c6:	2600      	movs	r6, #0
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	4630      	mov	r0, r6
 80049cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004aa4 <_malloc_r+0xfc>
 80049d4:	f000 f868 	bl	8004aa8 <__malloc_lock>
 80049d8:	f8d8 3000 	ldr.w	r3, [r8]
 80049dc:	461c      	mov	r4, r3
 80049de:	bb5c      	cbnz	r4, 8004a38 <_malloc_r+0x90>
 80049e0:	4629      	mov	r1, r5
 80049e2:	4638      	mov	r0, r7
 80049e4:	f7ff ffc0 	bl	8004968 <sbrk_aligned>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	4604      	mov	r4, r0
 80049ec:	d155      	bne.n	8004a9a <_malloc_r+0xf2>
 80049ee:	f8d8 4000 	ldr.w	r4, [r8]
 80049f2:	4626      	mov	r6, r4
 80049f4:	2e00      	cmp	r6, #0
 80049f6:	d145      	bne.n	8004a84 <_malloc_r+0xdc>
 80049f8:	2c00      	cmp	r4, #0
 80049fa:	d048      	beq.n	8004a8e <_malloc_r+0xe6>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	4631      	mov	r1, r6
 8004a00:	4638      	mov	r0, r7
 8004a02:	eb04 0903 	add.w	r9, r4, r3
 8004a06:	f000 fb61 	bl	80050cc <_sbrk_r>
 8004a0a:	4581      	cmp	r9, r0
 8004a0c:	d13f      	bne.n	8004a8e <_malloc_r+0xe6>
 8004a0e:	6821      	ldr	r1, [r4, #0]
 8004a10:	4638      	mov	r0, r7
 8004a12:	1a6d      	subs	r5, r5, r1
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7ff ffa7 	bl	8004968 <sbrk_aligned>
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d037      	beq.n	8004a8e <_malloc_r+0xe6>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	442b      	add	r3, r5
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	f8d8 3000 	ldr.w	r3, [r8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d038      	beq.n	8004a9e <_malloc_r+0xf6>
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	42a2      	cmp	r2, r4
 8004a30:	d12b      	bne.n	8004a8a <_malloc_r+0xe2>
 8004a32:	2200      	movs	r2, #0
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	e00f      	b.n	8004a58 <_malloc_r+0xb0>
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	1b52      	subs	r2, r2, r5
 8004a3c:	d41f      	bmi.n	8004a7e <_malloc_r+0xd6>
 8004a3e:	2a0b      	cmp	r2, #11
 8004a40:	d917      	bls.n	8004a72 <_malloc_r+0xca>
 8004a42:	1961      	adds	r1, r4, r5
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	6025      	str	r5, [r4, #0]
 8004a48:	bf18      	it	ne
 8004a4a:	6059      	strne	r1, [r3, #4]
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	bf08      	it	eq
 8004a50:	f8c8 1000 	streq.w	r1, [r8]
 8004a54:	5162      	str	r2, [r4, r5]
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f104 060b 	add.w	r6, r4, #11
 8004a5e:	f000 f829 	bl	8004ab4 <__malloc_unlock>
 8004a62:	f026 0607 	bic.w	r6, r6, #7
 8004a66:	1d23      	adds	r3, r4, #4
 8004a68:	1af2      	subs	r2, r6, r3
 8004a6a:	d0ae      	beq.n	80049ca <_malloc_r+0x22>
 8004a6c:	1b9b      	subs	r3, r3, r6
 8004a6e:	50a3      	str	r3, [r4, r2]
 8004a70:	e7ab      	b.n	80049ca <_malloc_r+0x22>
 8004a72:	42a3      	cmp	r3, r4
 8004a74:	6862      	ldr	r2, [r4, #4]
 8004a76:	d1dd      	bne.n	8004a34 <_malloc_r+0x8c>
 8004a78:	f8c8 2000 	str.w	r2, [r8]
 8004a7c:	e7ec      	b.n	8004a58 <_malloc_r+0xb0>
 8004a7e:	4623      	mov	r3, r4
 8004a80:	6864      	ldr	r4, [r4, #4]
 8004a82:	e7ac      	b.n	80049de <_malloc_r+0x36>
 8004a84:	4634      	mov	r4, r6
 8004a86:	6876      	ldr	r6, [r6, #4]
 8004a88:	e7b4      	b.n	80049f4 <_malloc_r+0x4c>
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	e7cc      	b.n	8004a28 <_malloc_r+0x80>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	4638      	mov	r0, r7
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	f000 f80e 	bl	8004ab4 <__malloc_unlock>
 8004a98:	e797      	b.n	80049ca <_malloc_r+0x22>
 8004a9a:	6025      	str	r5, [r4, #0]
 8004a9c:	e7dc      	b.n	8004a58 <_malloc_r+0xb0>
 8004a9e:	605b      	str	r3, [r3, #4]
 8004aa0:	deff      	udf	#255	; 0xff
 8004aa2:	bf00      	nop
 8004aa4:	200002b0 	.word	0x200002b0

08004aa8 <__malloc_lock>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__malloc_lock+0x8>)
 8004aaa:	f7ff bf13 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 8004aae:	bf00      	nop
 8004ab0:	200002ac 	.word	0x200002ac

08004ab4 <__malloc_unlock>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__malloc_unlock+0x8>)
 8004ab6:	f7ff bf0e 	b.w	80048d6 <__retarget_lock_release_recursive>
 8004aba:	bf00      	nop
 8004abc:	200002ac 	.word	0x200002ac

08004ac0 <__ssputs_r>:
 8004ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	461f      	mov	r7, r3
 8004ac6:	688e      	ldr	r6, [r1, #8]
 8004ac8:	4682      	mov	sl, r0
 8004aca:	42be      	cmp	r6, r7
 8004acc:	460c      	mov	r4, r1
 8004ace:	4690      	mov	r8, r2
 8004ad0:	680b      	ldr	r3, [r1, #0]
 8004ad2:	d82c      	bhi.n	8004b2e <__ssputs_r+0x6e>
 8004ad4:	898a      	ldrh	r2, [r1, #12]
 8004ad6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ada:	d026      	beq.n	8004b2a <__ssputs_r+0x6a>
 8004adc:	6965      	ldr	r5, [r4, #20]
 8004ade:	6909      	ldr	r1, [r1, #16]
 8004ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae4:	eba3 0901 	sub.w	r9, r3, r1
 8004ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aec:	1c7b      	adds	r3, r7, #1
 8004aee:	444b      	add	r3, r9
 8004af0:	106d      	asrs	r5, r5, #1
 8004af2:	429d      	cmp	r5, r3
 8004af4:	bf38      	it	cc
 8004af6:	461d      	movcc	r5, r3
 8004af8:	0553      	lsls	r3, r2, #21
 8004afa:	d527      	bpl.n	8004b4c <__ssputs_r+0x8c>
 8004afc:	4629      	mov	r1, r5
 8004afe:	f7ff ff53 	bl	80049a8 <_malloc_r>
 8004b02:	4606      	mov	r6, r0
 8004b04:	b360      	cbz	r0, 8004b60 <__ssputs_r+0xa0>
 8004b06:	464a      	mov	r2, r9
 8004b08:	6921      	ldr	r1, [r4, #16]
 8004b0a:	f000 fafd 	bl	8005108 <memcpy>
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b18:	81a3      	strh	r3, [r4, #12]
 8004b1a:	6126      	str	r6, [r4, #16]
 8004b1c:	444e      	add	r6, r9
 8004b1e:	6026      	str	r6, [r4, #0]
 8004b20:	463e      	mov	r6, r7
 8004b22:	6165      	str	r5, [r4, #20]
 8004b24:	eba5 0509 	sub.w	r5, r5, r9
 8004b28:	60a5      	str	r5, [r4, #8]
 8004b2a:	42be      	cmp	r6, r7
 8004b2c:	d900      	bls.n	8004b30 <__ssputs_r+0x70>
 8004b2e:	463e      	mov	r6, r7
 8004b30:	4632      	mov	r2, r6
 8004b32:	4641      	mov	r1, r8
 8004b34:	6820      	ldr	r0, [r4, #0]
 8004b36:	f000 faaf 	bl	8005098 <memmove>
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	68a3      	ldr	r3, [r4, #8]
 8004b3e:	1b9b      	subs	r3, r3, r6
 8004b40:	60a3      	str	r3, [r4, #8]
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	4433      	add	r3, r6
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	f000 fae9 	bl	8005124 <_realloc_r>
 8004b52:	4606      	mov	r6, r0
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d1e0      	bne.n	8004b1a <__ssputs_r+0x5a>
 8004b58:	4650      	mov	r0, sl
 8004b5a:	6921      	ldr	r1, [r4, #16]
 8004b5c:	f7ff febc 	bl	80048d8 <_free_r>
 8004b60:	230c      	movs	r3, #12
 8004b62:	f8ca 3000 	str.w	r3, [sl]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	e7e9      	b.n	8004b48 <__ssputs_r+0x88>

08004b74 <_svfiprintf_r>:
 8004b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	4698      	mov	r8, r3
 8004b7a:	898b      	ldrh	r3, [r1, #12]
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	460d      	mov	r5, r1
 8004b82:	4614      	mov	r4, r2
 8004b84:	b09d      	sub	sp, #116	; 0x74
 8004b86:	d50e      	bpl.n	8004ba6 <_svfiprintf_r+0x32>
 8004b88:	690b      	ldr	r3, [r1, #16]
 8004b8a:	b963      	cbnz	r3, 8004ba6 <_svfiprintf_r+0x32>
 8004b8c:	2140      	movs	r1, #64	; 0x40
 8004b8e:	f7ff ff0b 	bl	80049a8 <_malloc_r>
 8004b92:	6028      	str	r0, [r5, #0]
 8004b94:	6128      	str	r0, [r5, #16]
 8004b96:	b920      	cbnz	r0, 8004ba2 <_svfiprintf_r+0x2e>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	e0d0      	b.n	8004d44 <_svfiprintf_r+0x1d0>
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	616b      	str	r3, [r5, #20]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8004baa:	2320      	movs	r3, #32
 8004bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bb0:	2330      	movs	r3, #48	; 0x30
 8004bb2:	f04f 0901 	mov.w	r9, #1
 8004bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004d5c <_svfiprintf_r+0x1e8>
 8004bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	469a      	mov	sl, r3
 8004bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bca:	b10a      	cbz	r2, 8004bd0 <_svfiprintf_r+0x5c>
 8004bcc:	2a25      	cmp	r2, #37	; 0x25
 8004bce:	d1f9      	bne.n	8004bc4 <_svfiprintf_r+0x50>
 8004bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd4:	d00b      	beq.n	8004bee <_svfiprintf_r+0x7a>
 8004bd6:	465b      	mov	r3, fp
 8004bd8:	4622      	mov	r2, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7ff ff6f 	bl	8004ac0 <__ssputs_r>
 8004be2:	3001      	adds	r0, #1
 8004be4:	f000 80a9 	beq.w	8004d3a <_svfiprintf_r+0x1c6>
 8004be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bea:	445a      	add	r2, fp
 8004bec:	9209      	str	r2, [sp, #36]	; 0x24
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a1 	beq.w	8004d3a <_svfiprintf_r+0x1c6>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c02:	f10a 0a01 	add.w	sl, sl, #1
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	9307      	str	r3, [sp, #28]
 8004c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c10:	4654      	mov	r4, sl
 8004c12:	2205      	movs	r2, #5
 8004c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c18:	4850      	ldr	r0, [pc, #320]	; (8004d5c <_svfiprintf_r+0x1e8>)
 8004c1a:	f000 fa67 	bl	80050ec <memchr>
 8004c1e:	9a04      	ldr	r2, [sp, #16]
 8004c20:	b9d8      	cbnz	r0, 8004c5a <_svfiprintf_r+0xe6>
 8004c22:	06d0      	lsls	r0, r2, #27
 8004c24:	bf44      	itt	mi
 8004c26:	2320      	movmi	r3, #32
 8004c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c2c:	0711      	lsls	r1, r2, #28
 8004c2e:	bf44      	itt	mi
 8004c30:	232b      	movmi	r3, #43	; 0x2b
 8004c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c36:	f89a 3000 	ldrb.w	r3, [sl]
 8004c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3c:	d015      	beq.n	8004c6a <_svfiprintf_r+0xf6>
 8004c3e:	4654      	mov	r4, sl
 8004c40:	2000      	movs	r0, #0
 8004c42:	f04f 0c0a 	mov.w	ip, #10
 8004c46:	9a07      	ldr	r2, [sp, #28]
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c4e:	3b30      	subs	r3, #48	; 0x30
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d94d      	bls.n	8004cf0 <_svfiprintf_r+0x17c>
 8004c54:	b1b0      	cbz	r0, 8004c84 <_svfiprintf_r+0x110>
 8004c56:	9207      	str	r2, [sp, #28]
 8004c58:	e014      	b.n	8004c84 <_svfiprintf_r+0x110>
 8004c5a:	eba0 0308 	sub.w	r3, r0, r8
 8004c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	46a2      	mov	sl, r4
 8004c66:	9304      	str	r3, [sp, #16]
 8004c68:	e7d2      	b.n	8004c10 <_svfiprintf_r+0x9c>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	9103      	str	r1, [sp, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bfbb      	ittet	lt
 8004c76:	425b      	neglt	r3, r3
 8004c78:	f042 0202 	orrlt.w	r2, r2, #2
 8004c7c:	9307      	strge	r3, [sp, #28]
 8004c7e:	9307      	strlt	r3, [sp, #28]
 8004c80:	bfb8      	it	lt
 8004c82:	9204      	strlt	r2, [sp, #16]
 8004c84:	7823      	ldrb	r3, [r4, #0]
 8004c86:	2b2e      	cmp	r3, #46	; 0x2e
 8004c88:	d10c      	bne.n	8004ca4 <_svfiprintf_r+0x130>
 8004c8a:	7863      	ldrb	r3, [r4, #1]
 8004c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c8e:	d134      	bne.n	8004cfa <_svfiprintf_r+0x186>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	3402      	adds	r4, #2
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	9203      	str	r2, [sp, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfb8      	it	lt
 8004c9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004d60 <_svfiprintf_r+0x1ec>
 8004ca8:	2203      	movs	r2, #3
 8004caa:	4650      	mov	r0, sl
 8004cac:	7821      	ldrb	r1, [r4, #0]
 8004cae:	f000 fa1d 	bl	80050ec <memchr>
 8004cb2:	b138      	cbz	r0, 8004cc4 <_svfiprintf_r+0x150>
 8004cb4:	2240      	movs	r2, #64	; 0x40
 8004cb6:	9b04      	ldr	r3, [sp, #16]
 8004cb8:	eba0 000a 	sub.w	r0, r0, sl
 8004cbc:	4082      	lsls	r2, r0
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	3401      	adds	r4, #1
 8004cc2:	9304      	str	r3, [sp, #16]
 8004cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc8:	2206      	movs	r2, #6
 8004cca:	4826      	ldr	r0, [pc, #152]	; (8004d64 <_svfiprintf_r+0x1f0>)
 8004ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cd0:	f000 fa0c 	bl	80050ec <memchr>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d038      	beq.n	8004d4a <_svfiprintf_r+0x1d6>
 8004cd8:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <_svfiprintf_r+0x1f4>)
 8004cda:	bb1b      	cbnz	r3, 8004d24 <_svfiprintf_r+0x1b0>
 8004cdc:	9b03      	ldr	r3, [sp, #12]
 8004cde:	3307      	adds	r3, #7
 8004ce0:	f023 0307 	bic.w	r3, r3, #7
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	9303      	str	r3, [sp, #12]
 8004ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cea:	4433      	add	r3, r6
 8004cec:	9309      	str	r3, [sp, #36]	; 0x24
 8004cee:	e768      	b.n	8004bc2 <_svfiprintf_r+0x4e>
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf8:	e7a6      	b.n	8004c48 <_svfiprintf_r+0xd4>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f04f 0c0a 	mov.w	ip, #10
 8004d00:	4619      	mov	r1, r3
 8004d02:	3401      	adds	r4, #1
 8004d04:	9305      	str	r3, [sp, #20]
 8004d06:	4620      	mov	r0, r4
 8004d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d0c:	3a30      	subs	r2, #48	; 0x30
 8004d0e:	2a09      	cmp	r2, #9
 8004d10:	d903      	bls.n	8004d1a <_svfiprintf_r+0x1a6>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0c6      	beq.n	8004ca4 <_svfiprintf_r+0x130>
 8004d16:	9105      	str	r1, [sp, #20]
 8004d18:	e7c4      	b.n	8004ca4 <_svfiprintf_r+0x130>
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d22:	e7f0      	b.n	8004d06 <_svfiprintf_r+0x192>
 8004d24:	ab03      	add	r3, sp, #12
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	462a      	mov	r2, r5
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <_svfiprintf_r+0x1f8>)
 8004d2e:	a904      	add	r1, sp, #16
 8004d30:	f3af 8000 	nop.w
 8004d34:	1c42      	adds	r2, r0, #1
 8004d36:	4606      	mov	r6, r0
 8004d38:	d1d6      	bne.n	8004ce8 <_svfiprintf_r+0x174>
 8004d3a:	89ab      	ldrh	r3, [r5, #12]
 8004d3c:	065b      	lsls	r3, r3, #25
 8004d3e:	f53f af2d 	bmi.w	8004b9c <_svfiprintf_r+0x28>
 8004d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d44:	b01d      	add	sp, #116	; 0x74
 8004d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4a:	ab03      	add	r3, sp, #12
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	462a      	mov	r2, r5
 8004d50:	4638      	mov	r0, r7
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <_svfiprintf_r+0x1f8>)
 8004d54:	a904      	add	r1, sp, #16
 8004d56:	f000 f87d 	bl	8004e54 <_printf_i>
 8004d5a:	e7eb      	b.n	8004d34 <_svfiprintf_r+0x1c0>
 8004d5c:	080058be 	.word	0x080058be
 8004d60:	080058c4 	.word	0x080058c4
 8004d64:	080058c8 	.word	0x080058c8
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	08004ac1 	.word	0x08004ac1

08004d70 <_printf_common>:
 8004d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	4616      	mov	r6, r2
 8004d76:	4699      	mov	r9, r3
 8004d78:	688a      	ldr	r2, [r1, #8]
 8004d7a:	690b      	ldr	r3, [r1, #16]
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bfb8      	it	lt
 8004d82:	4613      	movlt	r3, r2
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d90:	b10a      	cbz	r2, 8004d96 <_printf_common+0x26>
 8004d92:	3301      	adds	r3, #1
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	0699      	lsls	r1, r3, #26
 8004d9a:	bf42      	ittt	mi
 8004d9c:	6833      	ldrmi	r3, [r6, #0]
 8004d9e:	3302      	addmi	r3, #2
 8004da0:	6033      	strmi	r3, [r6, #0]
 8004da2:	6825      	ldr	r5, [r4, #0]
 8004da4:	f015 0506 	ands.w	r5, r5, #6
 8004da8:	d106      	bne.n	8004db8 <_printf_common+0x48>
 8004daa:	f104 0a19 	add.w	sl, r4, #25
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	6832      	ldr	r2, [r6, #0]
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	42ab      	cmp	r3, r5
 8004db6:	dc2b      	bgt.n	8004e10 <_printf_common+0xa0>
 8004db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dbc:	1e13      	subs	r3, r2, #0
 8004dbe:	6822      	ldr	r2, [r4, #0]
 8004dc0:	bf18      	it	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	0692      	lsls	r2, r2, #26
 8004dc6:	d430      	bmi.n	8004e2a <_printf_common+0xba>
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd0:	47c0      	blx	r8
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d023      	beq.n	8004e1e <_printf_common+0xae>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	6922      	ldr	r2, [r4, #16]
 8004dda:	f003 0306 	and.w	r3, r3, #6
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	bf14      	ite	ne
 8004de2:	2500      	movne	r5, #0
 8004de4:	6833      	ldreq	r3, [r6, #0]
 8004de6:	f04f 0600 	mov.w	r6, #0
 8004dea:	bf08      	it	eq
 8004dec:	68e5      	ldreq	r5, [r4, #12]
 8004dee:	f104 041a 	add.w	r4, r4, #26
 8004df2:	bf08      	it	eq
 8004df4:	1aed      	subeq	r5, r5, r3
 8004df6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dfa:	bf08      	it	eq
 8004dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e00:	4293      	cmp	r3, r2
 8004e02:	bfc4      	itt	gt
 8004e04:	1a9b      	subgt	r3, r3, r2
 8004e06:	18ed      	addgt	r5, r5, r3
 8004e08:	42b5      	cmp	r5, r6
 8004e0a:	d11a      	bne.n	8004e42 <_printf_common+0xd2>
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e008      	b.n	8004e22 <_printf_common+0xb2>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4652      	mov	r2, sl
 8004e14:	4649      	mov	r1, r9
 8004e16:	4638      	mov	r0, r7
 8004e18:	47c0      	blx	r8
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d103      	bne.n	8004e26 <_printf_common+0xb6>
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e26:	3501      	adds	r5, #1
 8004e28:	e7c1      	b.n	8004dae <_printf_common+0x3e>
 8004e2a:	2030      	movs	r0, #48	; 0x30
 8004e2c:	18e1      	adds	r1, r4, r3
 8004e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e38:	4422      	add	r2, r4
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e40:	e7c2      	b.n	8004dc8 <_printf_common+0x58>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4622      	mov	r2, r4
 8004e46:	4649      	mov	r1, r9
 8004e48:	4638      	mov	r0, r7
 8004e4a:	47c0      	blx	r8
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d0e6      	beq.n	8004e1e <_printf_common+0xae>
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7d9      	b.n	8004e08 <_printf_common+0x98>

08004e54 <_printf_i>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	7e0f      	ldrb	r7, [r1, #24]
 8004e5a:	4691      	mov	r9, r2
 8004e5c:	2f78      	cmp	r7, #120	; 0x78
 8004e5e:	4680      	mov	r8, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	469a      	mov	sl, r3
 8004e64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e6a:	d807      	bhi.n	8004e7c <_printf_i+0x28>
 8004e6c:	2f62      	cmp	r7, #98	; 0x62
 8004e6e:	d80a      	bhi.n	8004e86 <_printf_i+0x32>
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	f000 80d5 	beq.w	8005020 <_printf_i+0x1cc>
 8004e76:	2f58      	cmp	r7, #88	; 0x58
 8004e78:	f000 80c1 	beq.w	8004ffe <_printf_i+0x1aa>
 8004e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e84:	e03a      	b.n	8004efc <_printf_i+0xa8>
 8004e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e8a:	2b15      	cmp	r3, #21
 8004e8c:	d8f6      	bhi.n	8004e7c <_printf_i+0x28>
 8004e8e:	a101      	add	r1, pc, #4	; (adr r1, 8004e94 <_printf_i+0x40>)
 8004e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004e7d 	.word	0x08004e7d
 8004ea0:	08004e7d 	.word	0x08004e7d
 8004ea4:	08004e7d 	.word	0x08004e7d
 8004ea8:	08004e7d 	.word	0x08004e7d
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08004e7d 	.word	0x08004e7d
 8004eb4:	08004e7d 	.word	0x08004e7d
 8004eb8:	08004e7d 	.word	0x08004e7d
 8004ebc:	08004e7d 	.word	0x08004e7d
 8004ec0:	08005007 	.word	0x08005007
 8004ec4:	08004f2d 	.word	0x08004f2d
 8004ec8:	08004fc1 	.word	0x08004fc1
 8004ecc:	08004e7d 	.word	0x08004e7d
 8004ed0:	08004e7d 	.word	0x08004e7d
 8004ed4:	08005029 	.word	0x08005029
 8004ed8:	08004e7d 	.word	0x08004e7d
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004e7d 	.word	0x08004e7d
 8004ee4:	08004e7d 	.word	0x08004e7d
 8004ee8:	08004fc9 	.word	0x08004fc9
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0a0      	b.n	8005042 <_printf_i+0x1ee>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	0607      	lsls	r7, r0, #24
 8004f06:	f103 0104 	add.w	r1, r3, #4
 8004f0a:	6029      	str	r1, [r5, #0]
 8004f0c:	d501      	bpl.n	8004f12 <_printf_i+0xbe>
 8004f0e:	681e      	ldr	r6, [r3, #0]
 8004f10:	e003      	b.n	8004f1a <_printf_i+0xc6>
 8004f12:	0646      	lsls	r6, r0, #25
 8004f14:	d5fb      	bpl.n	8004f0e <_printf_i+0xba>
 8004f16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	da03      	bge.n	8004f26 <_printf_i+0xd2>
 8004f1e:	232d      	movs	r3, #45	; 0x2d
 8004f20:	4276      	negs	r6, r6
 8004f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f26:	230a      	movs	r3, #10
 8004f28:	4859      	ldr	r0, [pc, #356]	; (8005090 <_printf_i+0x23c>)
 8004f2a:	e012      	b.n	8004f52 <_printf_i+0xfe>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	1d19      	adds	r1, r3, #4
 8004f32:	6029      	str	r1, [r5, #0]
 8004f34:	0605      	lsls	r5, r0, #24
 8004f36:	d501      	bpl.n	8004f3c <_printf_i+0xe8>
 8004f38:	681e      	ldr	r6, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <_printf_i+0xee>
 8004f3c:	0641      	lsls	r1, r0, #25
 8004f3e:	d5fb      	bpl.n	8004f38 <_printf_i+0xe4>
 8004f40:	881e      	ldrh	r6, [r3, #0]
 8004f42:	2f6f      	cmp	r7, #111	; 0x6f
 8004f44:	bf0c      	ite	eq
 8004f46:	2308      	moveq	r3, #8
 8004f48:	230a      	movne	r3, #10
 8004f4a:	4851      	ldr	r0, [pc, #324]	; (8005090 <_printf_i+0x23c>)
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f52:	6865      	ldr	r5, [r4, #4]
 8004f54:	2d00      	cmp	r5, #0
 8004f56:	bfa8      	it	ge
 8004f58:	6821      	ldrge	r1, [r4, #0]
 8004f5a:	60a5      	str	r5, [r4, #8]
 8004f5c:	bfa4      	itt	ge
 8004f5e:	f021 0104 	bicge.w	r1, r1, #4
 8004f62:	6021      	strge	r1, [r4, #0]
 8004f64:	b90e      	cbnz	r6, 8004f6a <_printf_i+0x116>
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	d04b      	beq.n	8005002 <_printf_i+0x1ae>
 8004f6a:	4615      	mov	r5, r2
 8004f6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f70:	fb03 6711 	mls	r7, r3, r1, r6
 8004f74:	5dc7      	ldrb	r7, [r0, r7]
 8004f76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f7a:	4637      	mov	r7, r6
 8004f7c:	42bb      	cmp	r3, r7
 8004f7e:	460e      	mov	r6, r1
 8004f80:	d9f4      	bls.n	8004f6c <_printf_i+0x118>
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d10b      	bne.n	8004f9e <_printf_i+0x14a>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	07de      	lsls	r6, r3, #31
 8004f8a:	d508      	bpl.n	8004f9e <_printf_i+0x14a>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	6861      	ldr	r1, [r4, #4]
 8004f90:	4299      	cmp	r1, r3
 8004f92:	bfde      	ittt	le
 8004f94:	2330      	movle	r3, #48	; 0x30
 8004f96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f9e:	1b52      	subs	r2, r2, r5
 8004fa0:	6122      	str	r2, [r4, #16]
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	4640      	mov	r0, r8
 8004fa8:	f8cd a000 	str.w	sl, [sp]
 8004fac:	aa03      	add	r2, sp, #12
 8004fae:	f7ff fedf 	bl	8004d70 <_printf_common>
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d14a      	bne.n	800504c <_printf_i+0x1f8>
 8004fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fba:	b004      	add	sp, #16
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	f043 0320 	orr.w	r3, r3, #32
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	2778      	movs	r7, #120	; 0x78
 8004fca:	4832      	ldr	r0, [pc, #200]	; (8005094 <_printf_i+0x240>)
 8004fcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	6829      	ldr	r1, [r5, #0]
 8004fd4:	061f      	lsls	r7, r3, #24
 8004fd6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fda:	d402      	bmi.n	8004fe2 <_printf_i+0x18e>
 8004fdc:	065f      	lsls	r7, r3, #25
 8004fde:	bf48      	it	mi
 8004fe0:	b2b6      	uxthmi	r6, r6
 8004fe2:	07df      	lsls	r7, r3, #31
 8004fe4:	bf48      	it	mi
 8004fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fea:	6029      	str	r1, [r5, #0]
 8004fec:	bf48      	it	mi
 8004fee:	6023      	strmi	r3, [r4, #0]
 8004ff0:	b91e      	cbnz	r6, 8004ffa <_printf_i+0x1a6>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	f023 0320 	bic.w	r3, r3, #32
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	e7a6      	b.n	8004f4c <_printf_i+0xf8>
 8004ffe:	4824      	ldr	r0, [pc, #144]	; (8005090 <_printf_i+0x23c>)
 8005000:	e7e4      	b.n	8004fcc <_printf_i+0x178>
 8005002:	4615      	mov	r5, r2
 8005004:	e7bd      	b.n	8004f82 <_printf_i+0x12e>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	6826      	ldr	r6, [r4, #0]
 800500a:	1d18      	adds	r0, r3, #4
 800500c:	6961      	ldr	r1, [r4, #20]
 800500e:	6028      	str	r0, [r5, #0]
 8005010:	0635      	lsls	r5, r6, #24
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	d501      	bpl.n	800501a <_printf_i+0x1c6>
 8005016:	6019      	str	r1, [r3, #0]
 8005018:	e002      	b.n	8005020 <_printf_i+0x1cc>
 800501a:	0670      	lsls	r0, r6, #25
 800501c:	d5fb      	bpl.n	8005016 <_printf_i+0x1c2>
 800501e:	8019      	strh	r1, [r3, #0]
 8005020:	2300      	movs	r3, #0
 8005022:	4615      	mov	r5, r2
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	e7bc      	b.n	8004fa2 <_printf_i+0x14e>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	2100      	movs	r1, #0
 800502c:	1d1a      	adds	r2, r3, #4
 800502e:	602a      	str	r2, [r5, #0]
 8005030:	681d      	ldr	r5, [r3, #0]
 8005032:	6862      	ldr	r2, [r4, #4]
 8005034:	4628      	mov	r0, r5
 8005036:	f000 f859 	bl	80050ec <memchr>
 800503a:	b108      	cbz	r0, 8005040 <_printf_i+0x1ec>
 800503c:	1b40      	subs	r0, r0, r5
 800503e:	6060      	str	r0, [r4, #4]
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	2300      	movs	r3, #0
 8005046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504a:	e7aa      	b.n	8004fa2 <_printf_i+0x14e>
 800504c:	462a      	mov	r2, r5
 800504e:	4649      	mov	r1, r9
 8005050:	4640      	mov	r0, r8
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	47d0      	blx	sl
 8005056:	3001      	adds	r0, #1
 8005058:	d0ad      	beq.n	8004fb6 <_printf_i+0x162>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	079b      	lsls	r3, r3, #30
 800505e:	d413      	bmi.n	8005088 <_printf_i+0x234>
 8005060:	68e0      	ldr	r0, [r4, #12]
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	4298      	cmp	r0, r3
 8005066:	bfb8      	it	lt
 8005068:	4618      	movlt	r0, r3
 800506a:	e7a6      	b.n	8004fba <_printf_i+0x166>
 800506c:	2301      	movs	r3, #1
 800506e:	4632      	mov	r2, r6
 8005070:	4649      	mov	r1, r9
 8005072:	4640      	mov	r0, r8
 8005074:	47d0      	blx	sl
 8005076:	3001      	adds	r0, #1
 8005078:	d09d      	beq.n	8004fb6 <_printf_i+0x162>
 800507a:	3501      	adds	r5, #1
 800507c:	68e3      	ldr	r3, [r4, #12]
 800507e:	9903      	ldr	r1, [sp, #12]
 8005080:	1a5b      	subs	r3, r3, r1
 8005082:	42ab      	cmp	r3, r5
 8005084:	dcf2      	bgt.n	800506c <_printf_i+0x218>
 8005086:	e7eb      	b.n	8005060 <_printf_i+0x20c>
 8005088:	2500      	movs	r5, #0
 800508a:	f104 0619 	add.w	r6, r4, #25
 800508e:	e7f5      	b.n	800507c <_printf_i+0x228>
 8005090:	080058cf 	.word	0x080058cf
 8005094:	080058e0 	.word	0x080058e0

08005098 <memmove>:
 8005098:	4288      	cmp	r0, r1
 800509a:	b510      	push	{r4, lr}
 800509c:	eb01 0402 	add.w	r4, r1, r2
 80050a0:	d902      	bls.n	80050a8 <memmove+0x10>
 80050a2:	4284      	cmp	r4, r0
 80050a4:	4623      	mov	r3, r4
 80050a6:	d807      	bhi.n	80050b8 <memmove+0x20>
 80050a8:	1e43      	subs	r3, r0, #1
 80050aa:	42a1      	cmp	r1, r4
 80050ac:	d008      	beq.n	80050c0 <memmove+0x28>
 80050ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050b6:	e7f8      	b.n	80050aa <memmove+0x12>
 80050b8:	4601      	mov	r1, r0
 80050ba:	4402      	add	r2, r0
 80050bc:	428a      	cmp	r2, r1
 80050be:	d100      	bne.n	80050c2 <memmove+0x2a>
 80050c0:	bd10      	pop	{r4, pc}
 80050c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ca:	e7f7      	b.n	80050bc <memmove+0x24>

080050cc <_sbrk_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	2300      	movs	r3, #0
 80050d0:	4d05      	ldr	r5, [pc, #20]	; (80050e8 <_sbrk_r+0x1c>)
 80050d2:	4604      	mov	r4, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	f7fc fa5c 	bl	8001594 <_sbrk>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_sbrk_r+0x1a>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_sbrk_r+0x1a>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	200002a8 	.word	0x200002a8

080050ec <memchr>:
 80050ec:	4603      	mov	r3, r0
 80050ee:	b510      	push	{r4, lr}
 80050f0:	b2c9      	uxtb	r1, r1
 80050f2:	4402      	add	r2, r0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	d101      	bne.n	80050fe <memchr+0x12>
 80050fa:	2000      	movs	r0, #0
 80050fc:	e003      	b.n	8005106 <memchr+0x1a>
 80050fe:	7804      	ldrb	r4, [r0, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	428c      	cmp	r4, r1
 8005104:	d1f6      	bne.n	80050f4 <memchr+0x8>
 8005106:	bd10      	pop	{r4, pc}

08005108 <memcpy>:
 8005108:	440a      	add	r2, r1
 800510a:	4291      	cmp	r1, r2
 800510c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005110:	d100      	bne.n	8005114 <memcpy+0xc>
 8005112:	4770      	bx	lr
 8005114:	b510      	push	{r4, lr}
 8005116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800511a:	4291      	cmp	r1, r2
 800511c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005120:	d1f9      	bne.n	8005116 <memcpy+0xe>
 8005122:	bd10      	pop	{r4, pc}

08005124 <_realloc_r>:
 8005124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005128:	4680      	mov	r8, r0
 800512a:	4614      	mov	r4, r2
 800512c:	460e      	mov	r6, r1
 800512e:	b921      	cbnz	r1, 800513a <_realloc_r+0x16>
 8005130:	4611      	mov	r1, r2
 8005132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005136:	f7ff bc37 	b.w	80049a8 <_malloc_r>
 800513a:	b92a      	cbnz	r2, 8005148 <_realloc_r+0x24>
 800513c:	f7ff fbcc 	bl	80048d8 <_free_r>
 8005140:	4625      	mov	r5, r4
 8005142:	4628      	mov	r0, r5
 8005144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005148:	f000 f81b 	bl	8005182 <_malloc_usable_size_r>
 800514c:	4284      	cmp	r4, r0
 800514e:	4607      	mov	r7, r0
 8005150:	d802      	bhi.n	8005158 <_realloc_r+0x34>
 8005152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005156:	d812      	bhi.n	800517e <_realloc_r+0x5a>
 8005158:	4621      	mov	r1, r4
 800515a:	4640      	mov	r0, r8
 800515c:	f7ff fc24 	bl	80049a8 <_malloc_r>
 8005160:	4605      	mov	r5, r0
 8005162:	2800      	cmp	r0, #0
 8005164:	d0ed      	beq.n	8005142 <_realloc_r+0x1e>
 8005166:	42bc      	cmp	r4, r7
 8005168:	4622      	mov	r2, r4
 800516a:	4631      	mov	r1, r6
 800516c:	bf28      	it	cs
 800516e:	463a      	movcs	r2, r7
 8005170:	f7ff ffca 	bl	8005108 <memcpy>
 8005174:	4631      	mov	r1, r6
 8005176:	4640      	mov	r0, r8
 8005178:	f7ff fbae 	bl	80048d8 <_free_r>
 800517c:	e7e1      	b.n	8005142 <_realloc_r+0x1e>
 800517e:	4635      	mov	r5, r6
 8005180:	e7df      	b.n	8005142 <_realloc_r+0x1e>

08005182 <_malloc_usable_size_r>:
 8005182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005186:	1f18      	subs	r0, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	bfbc      	itt	lt
 800518c:	580b      	ldrlt	r3, [r1, r0]
 800518e:	18c0      	addlt	r0, r0, r3
 8005190:	4770      	bx	lr

08005192 <atan2>:
 8005192:	f000 b8fd 	b.w	8005390 <__ieee754_atan2>

08005196 <sqrt>:
 8005196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005198:	4606      	mov	r6, r0
 800519a:	460f      	mov	r7, r1
 800519c:	f000 f820 	bl	80051e0 <__ieee754_sqrt>
 80051a0:	4632      	mov	r2, r6
 80051a2:	4604      	mov	r4, r0
 80051a4:	460d      	mov	r5, r1
 80051a6:	463b      	mov	r3, r7
 80051a8:	4630      	mov	r0, r6
 80051aa:	4639      	mov	r1, r7
 80051ac:	f7fb fc2e 	bl	8000a0c <__aeabi_dcmpun>
 80051b0:	b990      	cbnz	r0, 80051d8 <sqrt+0x42>
 80051b2:	2200      	movs	r2, #0
 80051b4:	2300      	movs	r3, #0
 80051b6:	4630      	mov	r0, r6
 80051b8:	4639      	mov	r1, r7
 80051ba:	f7fb fbff 	bl	80009bc <__aeabi_dcmplt>
 80051be:	b158      	cbz	r0, 80051d8 <sqrt+0x42>
 80051c0:	f7ff fb5e 	bl	8004880 <__errno>
 80051c4:	2321      	movs	r3, #33	; 0x21
 80051c6:	2200      	movs	r2, #0
 80051c8:	6003      	str	r3, [r0, #0]
 80051ca:	2300      	movs	r3, #0
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	f7fb faac 	bl	800072c <__aeabi_ddiv>
 80051d4:	4604      	mov	r4, r0
 80051d6:	460d      	mov	r5, r1
 80051d8:	4620      	mov	r0, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051e0 <__ieee754_sqrt>:
 80051e0:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005384 <__ieee754_sqrt+0x1a4>
 80051e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e8:	ea3c 0c01 	bics.w	ip, ip, r1
 80051ec:	460b      	mov	r3, r1
 80051ee:	4606      	mov	r6, r0
 80051f0:	460d      	mov	r5, r1
 80051f2:	460a      	mov	r2, r1
 80051f4:	4604      	mov	r4, r0
 80051f6:	d10e      	bne.n	8005216 <__ieee754_sqrt+0x36>
 80051f8:	4602      	mov	r2, r0
 80051fa:	f7fb f96d 	bl	80004d8 <__aeabi_dmul>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4630      	mov	r0, r6
 8005204:	4629      	mov	r1, r5
 8005206:	f7fa ffb1 	bl	800016c <__adddf3>
 800520a:	4606      	mov	r6, r0
 800520c:	460d      	mov	r5, r1
 800520e:	4630      	mov	r0, r6
 8005210:	4629      	mov	r1, r5
 8005212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005216:	2900      	cmp	r1, #0
 8005218:	dc0d      	bgt.n	8005236 <__ieee754_sqrt+0x56>
 800521a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800521e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005222:	d0f4      	beq.n	800520e <__ieee754_sqrt+0x2e>
 8005224:	b139      	cbz	r1, 8005236 <__ieee754_sqrt+0x56>
 8005226:	4602      	mov	r2, r0
 8005228:	f7fa ff9e 	bl	8000168 <__aeabi_dsub>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	f7fb fa7c 	bl	800072c <__aeabi_ddiv>
 8005234:	e7e9      	b.n	800520a <__ieee754_sqrt+0x2a>
 8005236:	1512      	asrs	r2, r2, #20
 8005238:	f000 8089 	beq.w	800534e <__ieee754_sqrt+0x16e>
 800523c:	2500      	movs	r5, #0
 800523e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005242:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800524a:	07d2      	lsls	r2, r2, #31
 800524c:	bf5c      	itt	pl
 800524e:	005b      	lslpl	r3, r3, #1
 8005250:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005254:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005258:	bf58      	it	pl
 800525a:	0064      	lslpl	r4, r4, #1
 800525c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005260:	0062      	lsls	r2, r4, #1
 8005262:	2016      	movs	r0, #22
 8005264:	4629      	mov	r1, r5
 8005266:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800526a:	1076      	asrs	r6, r6, #1
 800526c:	190f      	adds	r7, r1, r4
 800526e:	429f      	cmp	r7, r3
 8005270:	bfde      	ittt	le
 8005272:	1bdb      	suble	r3, r3, r7
 8005274:	1939      	addle	r1, r7, r4
 8005276:	192d      	addle	r5, r5, r4
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	3801      	subs	r0, #1
 800527c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005280:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005284:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005288:	d1f0      	bne.n	800526c <__ieee754_sqrt+0x8c>
 800528a:	4604      	mov	r4, r0
 800528c:	2720      	movs	r7, #32
 800528e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005292:	428b      	cmp	r3, r1
 8005294:	eb0c 0e00 	add.w	lr, ip, r0
 8005298:	dc02      	bgt.n	80052a0 <__ieee754_sqrt+0xc0>
 800529a:	d113      	bne.n	80052c4 <__ieee754_sqrt+0xe4>
 800529c:	4596      	cmp	lr, r2
 800529e:	d811      	bhi.n	80052c4 <__ieee754_sqrt+0xe4>
 80052a0:	f1be 0f00 	cmp.w	lr, #0
 80052a4:	eb0e 000c 	add.w	r0, lr, ip
 80052a8:	da56      	bge.n	8005358 <__ieee754_sqrt+0x178>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	db54      	blt.n	8005358 <__ieee754_sqrt+0x178>
 80052ae:	f101 0801 	add.w	r8, r1, #1
 80052b2:	1a5b      	subs	r3, r3, r1
 80052b4:	4641      	mov	r1, r8
 80052b6:	4596      	cmp	lr, r2
 80052b8:	bf88      	it	hi
 80052ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80052be:	eba2 020e 	sub.w	r2, r2, lr
 80052c2:	4464      	add	r4, ip
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	3f01      	subs	r7, #1
 80052c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80052cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80052d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80052d4:	d1dd      	bne.n	8005292 <__ieee754_sqrt+0xb2>
 80052d6:	4313      	orrs	r3, r2
 80052d8:	d01b      	beq.n	8005312 <__ieee754_sqrt+0x132>
 80052da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005388 <__ieee754_sqrt+0x1a8>
 80052de:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800538c <__ieee754_sqrt+0x1ac>
 80052e2:	e9da 0100 	ldrd	r0, r1, [sl]
 80052e6:	e9db 2300 	ldrd	r2, r3, [fp]
 80052ea:	f7fa ff3d 	bl	8000168 <__aeabi_dsub>
 80052ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4640      	mov	r0, r8
 80052f8:	4649      	mov	r1, r9
 80052fa:	f7fb fb69 	bl	80009d0 <__aeabi_dcmple>
 80052fe:	b140      	cbz	r0, 8005312 <__ieee754_sqrt+0x132>
 8005300:	e9da 0100 	ldrd	r0, r1, [sl]
 8005304:	e9db 2300 	ldrd	r2, r3, [fp]
 8005308:	f1b4 3fff 	cmp.w	r4, #4294967295
 800530c:	d126      	bne.n	800535c <__ieee754_sqrt+0x17c>
 800530e:	463c      	mov	r4, r7
 8005310:	3501      	adds	r5, #1
 8005312:	106b      	asrs	r3, r5, #1
 8005314:	0864      	lsrs	r4, r4, #1
 8005316:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800531a:	07ea      	lsls	r2, r5, #31
 800531c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005320:	bf48      	it	mi
 8005322:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8005326:	4620      	mov	r0, r4
 8005328:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800532c:	e76d      	b.n	800520a <__ieee754_sqrt+0x2a>
 800532e:	0ae3      	lsrs	r3, r4, #11
 8005330:	3915      	subs	r1, #21
 8005332:	0564      	lsls	r4, r4, #21
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0fa      	beq.n	800532e <__ieee754_sqrt+0x14e>
 8005338:	02d8      	lsls	r0, r3, #11
 800533a:	d50a      	bpl.n	8005352 <__ieee754_sqrt+0x172>
 800533c:	f1c2 0020 	rsb	r0, r2, #32
 8005340:	fa24 f000 	lsr.w	r0, r4, r0
 8005344:	1e55      	subs	r5, r2, #1
 8005346:	4094      	lsls	r4, r2
 8005348:	4303      	orrs	r3, r0
 800534a:	1b4a      	subs	r2, r1, r5
 800534c:	e776      	b.n	800523c <__ieee754_sqrt+0x5c>
 800534e:	4611      	mov	r1, r2
 8005350:	e7f0      	b.n	8005334 <__ieee754_sqrt+0x154>
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	3201      	adds	r2, #1
 8005356:	e7ef      	b.n	8005338 <__ieee754_sqrt+0x158>
 8005358:	4688      	mov	r8, r1
 800535a:	e7aa      	b.n	80052b2 <__ieee754_sqrt+0xd2>
 800535c:	f7fa ff06 	bl	800016c <__adddf3>
 8005360:	e9da 8900 	ldrd	r8, r9, [sl]
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4640      	mov	r0, r8
 800536a:	4649      	mov	r1, r9
 800536c:	f7fb fb26 	bl	80009bc <__aeabi_dcmplt>
 8005370:	b120      	cbz	r0, 800537c <__ieee754_sqrt+0x19c>
 8005372:	1ca1      	adds	r1, r4, #2
 8005374:	bf08      	it	eq
 8005376:	3501      	addeq	r5, #1
 8005378:	3402      	adds	r4, #2
 800537a:	e7ca      	b.n	8005312 <__ieee754_sqrt+0x132>
 800537c:	3401      	adds	r4, #1
 800537e:	f024 0401 	bic.w	r4, r4, #1
 8005382:	e7c6      	b.n	8005312 <__ieee754_sqrt+0x132>
 8005384:	7ff00000 	.word	0x7ff00000
 8005388:	200000e0 	.word	0x200000e0
 800538c:	200000e8 	.word	0x200000e8

08005390 <__ieee754_atan2>:
 8005390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	4617      	mov	r7, r2
 8005396:	4692      	mov	sl, r2
 8005398:	4699      	mov	r9, r3
 800539a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800539e:	427b      	negs	r3, r7
 80053a0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8005520 <__ieee754_atan2+0x190>
 80053a4:	433b      	orrs	r3, r7
 80053a6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80053aa:	4543      	cmp	r3, r8
 80053ac:	4604      	mov	r4, r0
 80053ae:	460d      	mov	r5, r1
 80053b0:	d809      	bhi.n	80053c6 <__ieee754_atan2+0x36>
 80053b2:	4246      	negs	r6, r0
 80053b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053b8:	4306      	orrs	r6, r0
 80053ba:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80053be:	4546      	cmp	r6, r8
 80053c0:	468e      	mov	lr, r1
 80053c2:	4683      	mov	fp, r0
 80053c4:	d908      	bls.n	80053d8 <__ieee754_atan2+0x48>
 80053c6:	4652      	mov	r2, sl
 80053c8:	464b      	mov	r3, r9
 80053ca:	4620      	mov	r0, r4
 80053cc:	4629      	mov	r1, r5
 80053ce:	f7fa fecd 	bl	800016c <__adddf3>
 80053d2:	4604      	mov	r4, r0
 80053d4:	460d      	mov	r5, r1
 80053d6:	e019      	b.n	800540c <__ieee754_atan2+0x7c>
 80053d8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80053dc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80053e0:	433e      	orrs	r6, r7
 80053e2:	d103      	bne.n	80053ec <__ieee754_atan2+0x5c>
 80053e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	f000 b8a2 	b.w	8005530 <atan>
 80053ec:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80053f0:	f006 0602 	and.w	r6, r6, #2
 80053f4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80053f8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80053fc:	d10a      	bne.n	8005414 <__ieee754_atan2+0x84>
 80053fe:	2e02      	cmp	r6, #2
 8005400:	d067      	beq.n	80054d2 <__ieee754_atan2+0x142>
 8005402:	2e03      	cmp	r6, #3
 8005404:	d102      	bne.n	800540c <__ieee754_atan2+0x7c>
 8005406:	a53a      	add	r5, pc, #232	; (adr r5, 80054f0 <__ieee754_atan2+0x160>)
 8005408:	e9d5 4500 	ldrd	r4, r5, [r5]
 800540c:	4620      	mov	r0, r4
 800540e:	4629      	mov	r1, r5
 8005410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005414:	4317      	orrs	r7, r2
 8005416:	d106      	bne.n	8005426 <__ieee754_atan2+0x96>
 8005418:	f1be 0f00 	cmp.w	lr, #0
 800541c:	da64      	bge.n	80054e8 <__ieee754_atan2+0x158>
 800541e:	a536      	add	r5, pc, #216	; (adr r5, 80054f8 <__ieee754_atan2+0x168>)
 8005420:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005424:	e7f2      	b.n	800540c <__ieee754_atan2+0x7c>
 8005426:	4542      	cmp	r2, r8
 8005428:	d10f      	bne.n	800544a <__ieee754_atan2+0xba>
 800542a:	4293      	cmp	r3, r2
 800542c:	f106 36ff 	add.w	r6, r6, #4294967295
 8005430:	d107      	bne.n	8005442 <__ieee754_atan2+0xb2>
 8005432:	2e02      	cmp	r6, #2
 8005434:	d851      	bhi.n	80054da <__ieee754_atan2+0x14a>
 8005436:	4b3b      	ldr	r3, [pc, #236]	; (8005524 <__ieee754_atan2+0x194>)
 8005438:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800543c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005440:	e7e4      	b.n	800540c <__ieee754_atan2+0x7c>
 8005442:	2e02      	cmp	r6, #2
 8005444:	d84d      	bhi.n	80054e2 <__ieee754_atan2+0x152>
 8005446:	4b38      	ldr	r3, [pc, #224]	; (8005528 <__ieee754_atan2+0x198>)
 8005448:	e7f6      	b.n	8005438 <__ieee754_atan2+0xa8>
 800544a:	4543      	cmp	r3, r8
 800544c:	d0e4      	beq.n	8005418 <__ieee754_atan2+0x88>
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005454:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005458:	da21      	bge.n	800549e <__ieee754_atan2+0x10e>
 800545a:	f1b9 0f00 	cmp.w	r9, #0
 800545e:	da01      	bge.n	8005464 <__ieee754_atan2+0xd4>
 8005460:	323c      	adds	r2, #60	; 0x3c
 8005462:	db20      	blt.n	80054a6 <__ieee754_atan2+0x116>
 8005464:	4652      	mov	r2, sl
 8005466:	464b      	mov	r3, r9
 8005468:	4620      	mov	r0, r4
 800546a:	4629      	mov	r1, r5
 800546c:	f7fb f95e 	bl	800072c <__aeabi_ddiv>
 8005470:	f000 f9e8 	bl	8005844 <fabs>
 8005474:	f000 f85c 	bl	8005530 <atan>
 8005478:	4604      	mov	r4, r0
 800547a:	460d      	mov	r5, r1
 800547c:	2e01      	cmp	r6, #1
 800547e:	d015      	beq.n	80054ac <__ieee754_atan2+0x11c>
 8005480:	2e02      	cmp	r6, #2
 8005482:	d017      	beq.n	80054b4 <__ieee754_atan2+0x124>
 8005484:	2e00      	cmp	r6, #0
 8005486:	d0c1      	beq.n	800540c <__ieee754_atan2+0x7c>
 8005488:	a31d      	add	r3, pc, #116	; (adr r3, 8005500 <__ieee754_atan2+0x170>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	4620      	mov	r0, r4
 8005490:	4629      	mov	r1, r5
 8005492:	f7fa fe69 	bl	8000168 <__aeabi_dsub>
 8005496:	a31c      	add	r3, pc, #112	; (adr r3, 8005508 <__ieee754_atan2+0x178>)
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	e016      	b.n	80054cc <__ieee754_atan2+0x13c>
 800549e:	a51c      	add	r5, pc, #112	; (adr r5, 8005510 <__ieee754_atan2+0x180>)
 80054a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80054a4:	e7ea      	b.n	800547c <__ieee754_atan2+0xec>
 80054a6:	2400      	movs	r4, #0
 80054a8:	2500      	movs	r5, #0
 80054aa:	e7e7      	b.n	800547c <__ieee754_atan2+0xec>
 80054ac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80054b0:	461d      	mov	r5, r3
 80054b2:	e7ab      	b.n	800540c <__ieee754_atan2+0x7c>
 80054b4:	a312      	add	r3, pc, #72	; (adr r3, 8005500 <__ieee754_atan2+0x170>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f7fa fe53 	bl	8000168 <__aeabi_dsub>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	a110      	add	r1, pc, #64	; (adr r1, 8005508 <__ieee754_atan2+0x178>)
 80054c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054cc:	f7fa fe4c 	bl	8000168 <__aeabi_dsub>
 80054d0:	e77f      	b.n	80053d2 <__ieee754_atan2+0x42>
 80054d2:	a50d      	add	r5, pc, #52	; (adr r5, 8005508 <__ieee754_atan2+0x178>)
 80054d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80054d8:	e798      	b.n	800540c <__ieee754_atan2+0x7c>
 80054da:	a50f      	add	r5, pc, #60	; (adr r5, 8005518 <__ieee754_atan2+0x188>)
 80054dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80054e0:	e794      	b.n	800540c <__ieee754_atan2+0x7c>
 80054e2:	2400      	movs	r4, #0
 80054e4:	2500      	movs	r5, #0
 80054e6:	e791      	b.n	800540c <__ieee754_atan2+0x7c>
 80054e8:	a509      	add	r5, pc, #36	; (adr r5, 8005510 <__ieee754_atan2+0x180>)
 80054ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80054ee:	e78d      	b.n	800540c <__ieee754_atan2+0x7c>
 80054f0:	54442d18 	.word	0x54442d18
 80054f4:	c00921fb 	.word	0xc00921fb
 80054f8:	54442d18 	.word	0x54442d18
 80054fc:	bff921fb 	.word	0xbff921fb
 8005500:	33145c07 	.word	0x33145c07
 8005504:	3ca1a626 	.word	0x3ca1a626
 8005508:	54442d18 	.word	0x54442d18
 800550c:	400921fb 	.word	0x400921fb
 8005510:	54442d18 	.word	0x54442d18
 8005514:	3ff921fb 	.word	0x3ff921fb
 8005518:	54442d18 	.word	0x54442d18
 800551c:	3fe921fb 	.word	0x3fe921fb
 8005520:	7ff00000 	.word	0x7ff00000
 8005524:	080058f8 	.word	0x080058f8
 8005528:	08005910 	.word	0x08005910
 800552c:	00000000 	.word	0x00000000

08005530 <atan>:
 8005530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	4bb6      	ldr	r3, [pc, #728]	; (8005810 <atan+0x2e0>)
 8005536:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800553a:	429e      	cmp	r6, r3
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	468b      	mov	fp, r1
 8005542:	dd17      	ble.n	8005574 <atan+0x44>
 8005544:	4bb3      	ldr	r3, [pc, #716]	; (8005814 <atan+0x2e4>)
 8005546:	429e      	cmp	r6, r3
 8005548:	dc01      	bgt.n	800554e <atan+0x1e>
 800554a:	d109      	bne.n	8005560 <atan+0x30>
 800554c:	b140      	cbz	r0, 8005560 <atan+0x30>
 800554e:	4622      	mov	r2, r4
 8005550:	462b      	mov	r3, r5
 8005552:	4620      	mov	r0, r4
 8005554:	4629      	mov	r1, r5
 8005556:	f7fa fe09 	bl	800016c <__adddf3>
 800555a:	4604      	mov	r4, r0
 800555c:	460d      	mov	r5, r1
 800555e:	e005      	b.n	800556c <atan+0x3c>
 8005560:	f1bb 0f00 	cmp.w	fp, #0
 8005564:	4cac      	ldr	r4, [pc, #688]	; (8005818 <atan+0x2e8>)
 8005566:	f300 8121 	bgt.w	80057ac <atan+0x27c>
 800556a:	4dac      	ldr	r5, [pc, #688]	; (800581c <atan+0x2ec>)
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005574:	4baa      	ldr	r3, [pc, #680]	; (8005820 <atan+0x2f0>)
 8005576:	429e      	cmp	r6, r3
 8005578:	dc11      	bgt.n	800559e <atan+0x6e>
 800557a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800557e:	429e      	cmp	r6, r3
 8005580:	dc0a      	bgt.n	8005598 <atan+0x68>
 8005582:	a38b      	add	r3, pc, #556	; (adr r3, 80057b0 <atan+0x280>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f7fa fdf0 	bl	800016c <__adddf3>
 800558c:	2200      	movs	r2, #0
 800558e:	4ba5      	ldr	r3, [pc, #660]	; (8005824 <atan+0x2f4>)
 8005590:	f7fb fa32 	bl	80009f8 <__aeabi_dcmpgt>
 8005594:	2800      	cmp	r0, #0
 8005596:	d1e9      	bne.n	800556c <atan+0x3c>
 8005598:	f04f 3aff 	mov.w	sl, #4294967295
 800559c:	e027      	b.n	80055ee <atan+0xbe>
 800559e:	f000 f951 	bl	8005844 <fabs>
 80055a2:	4ba1      	ldr	r3, [pc, #644]	; (8005828 <atan+0x2f8>)
 80055a4:	4604      	mov	r4, r0
 80055a6:	429e      	cmp	r6, r3
 80055a8:	460d      	mov	r5, r1
 80055aa:	f300 80b8 	bgt.w	800571e <atan+0x1ee>
 80055ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80055b2:	429e      	cmp	r6, r3
 80055b4:	f300 809c 	bgt.w	80056f0 <atan+0x1c0>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	f7fa fdd6 	bl	800016c <__adddf3>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4b98      	ldr	r3, [pc, #608]	; (8005824 <atan+0x2f4>)
 80055c4:	f7fa fdd0 	bl	8000168 <__aeabi_dsub>
 80055c8:	2200      	movs	r2, #0
 80055ca:	4606      	mov	r6, r0
 80055cc:	460f      	mov	r7, r1
 80055ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055d2:	4620      	mov	r0, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	f7fa fdc9 	bl	800016c <__adddf3>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	f7fb f8a3 	bl	800072c <__aeabi_ddiv>
 80055e6:	f04f 0a00 	mov.w	sl, #0
 80055ea:	4604      	mov	r4, r0
 80055ec:	460d      	mov	r5, r1
 80055ee:	4622      	mov	r2, r4
 80055f0:	462b      	mov	r3, r5
 80055f2:	4620      	mov	r0, r4
 80055f4:	4629      	mov	r1, r5
 80055f6:	f7fa ff6f 	bl	80004d8 <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4680      	mov	r8, r0
 8005600:	4689      	mov	r9, r1
 8005602:	f7fa ff69 	bl	80004d8 <__aeabi_dmul>
 8005606:	a36c      	add	r3, pc, #432	; (adr r3, 80057b8 <atan+0x288>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	f7fa ff62 	bl	80004d8 <__aeabi_dmul>
 8005614:	a36a      	add	r3, pc, #424	; (adr r3, 80057c0 <atan+0x290>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa fda7 	bl	800016c <__adddf3>
 800561e:	4632      	mov	r2, r6
 8005620:	463b      	mov	r3, r7
 8005622:	f7fa ff59 	bl	80004d8 <__aeabi_dmul>
 8005626:	a368      	add	r3, pc, #416	; (adr r3, 80057c8 <atan+0x298>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f7fa fd9e 	bl	800016c <__adddf3>
 8005630:	4632      	mov	r2, r6
 8005632:	463b      	mov	r3, r7
 8005634:	f7fa ff50 	bl	80004d8 <__aeabi_dmul>
 8005638:	a365      	add	r3, pc, #404	; (adr r3, 80057d0 <atan+0x2a0>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa fd95 	bl	800016c <__adddf3>
 8005642:	4632      	mov	r2, r6
 8005644:	463b      	mov	r3, r7
 8005646:	f7fa ff47 	bl	80004d8 <__aeabi_dmul>
 800564a:	a363      	add	r3, pc, #396	; (adr r3, 80057d8 <atan+0x2a8>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f7fa fd8c 	bl	800016c <__adddf3>
 8005654:	4632      	mov	r2, r6
 8005656:	463b      	mov	r3, r7
 8005658:	f7fa ff3e 	bl	80004d8 <__aeabi_dmul>
 800565c:	a360      	add	r3, pc, #384	; (adr r3, 80057e0 <atan+0x2b0>)
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f7fa fd83 	bl	800016c <__adddf3>
 8005666:	4642      	mov	r2, r8
 8005668:	464b      	mov	r3, r9
 800566a:	f7fa ff35 	bl	80004d8 <__aeabi_dmul>
 800566e:	a35e      	add	r3, pc, #376	; (adr r3, 80057e8 <atan+0x2b8>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	4680      	mov	r8, r0
 8005676:	4689      	mov	r9, r1
 8005678:	4630      	mov	r0, r6
 800567a:	4639      	mov	r1, r7
 800567c:	f7fa ff2c 	bl	80004d8 <__aeabi_dmul>
 8005680:	a35b      	add	r3, pc, #364	; (adr r3, 80057f0 <atan+0x2c0>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa fd6f 	bl	8000168 <__aeabi_dsub>
 800568a:	4632      	mov	r2, r6
 800568c:	463b      	mov	r3, r7
 800568e:	f7fa ff23 	bl	80004d8 <__aeabi_dmul>
 8005692:	a359      	add	r3, pc, #356	; (adr r3, 80057f8 <atan+0x2c8>)
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f7fa fd66 	bl	8000168 <__aeabi_dsub>
 800569c:	4632      	mov	r2, r6
 800569e:	463b      	mov	r3, r7
 80056a0:	f7fa ff1a 	bl	80004d8 <__aeabi_dmul>
 80056a4:	a356      	add	r3, pc, #344	; (adr r3, 8005800 <atan+0x2d0>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fa fd5d 	bl	8000168 <__aeabi_dsub>
 80056ae:	4632      	mov	r2, r6
 80056b0:	463b      	mov	r3, r7
 80056b2:	f7fa ff11 	bl	80004d8 <__aeabi_dmul>
 80056b6:	a354      	add	r3, pc, #336	; (adr r3, 8005808 <atan+0x2d8>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f7fa fd54 	bl	8000168 <__aeabi_dsub>
 80056c0:	4632      	mov	r2, r6
 80056c2:	463b      	mov	r3, r7
 80056c4:	f7fa ff08 	bl	80004d8 <__aeabi_dmul>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4640      	mov	r0, r8
 80056ce:	4649      	mov	r1, r9
 80056d0:	f7fa fd4c 	bl	800016c <__adddf3>
 80056d4:	4622      	mov	r2, r4
 80056d6:	462b      	mov	r3, r5
 80056d8:	f7fa fefe 	bl	80004d8 <__aeabi_dmul>
 80056dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	d144      	bne.n	8005770 <atan+0x240>
 80056e6:	4620      	mov	r0, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	f7fa fd3d 	bl	8000168 <__aeabi_dsub>
 80056ee:	e734      	b.n	800555a <atan+0x2a>
 80056f0:	2200      	movs	r2, #0
 80056f2:	4b4c      	ldr	r3, [pc, #304]	; (8005824 <atan+0x2f4>)
 80056f4:	f7fa fd38 	bl	8000168 <__aeabi_dsub>
 80056f8:	2200      	movs	r2, #0
 80056fa:	4606      	mov	r6, r0
 80056fc:	460f      	mov	r7, r1
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	4b48      	ldr	r3, [pc, #288]	; (8005824 <atan+0x2f4>)
 8005704:	f7fa fd32 	bl	800016c <__adddf3>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4630      	mov	r0, r6
 800570e:	4639      	mov	r1, r7
 8005710:	f7fb f80c 	bl	800072c <__aeabi_ddiv>
 8005714:	f04f 0a01 	mov.w	sl, #1
 8005718:	4604      	mov	r4, r0
 800571a:	460d      	mov	r5, r1
 800571c:	e767      	b.n	80055ee <atan+0xbe>
 800571e:	4b43      	ldr	r3, [pc, #268]	; (800582c <atan+0x2fc>)
 8005720:	429e      	cmp	r6, r3
 8005722:	da1a      	bge.n	800575a <atan+0x22a>
 8005724:	2200      	movs	r2, #0
 8005726:	4b42      	ldr	r3, [pc, #264]	; (8005830 <atan+0x300>)
 8005728:	f7fa fd1e 	bl	8000168 <__aeabi_dsub>
 800572c:	2200      	movs	r2, #0
 800572e:	4606      	mov	r6, r0
 8005730:	460f      	mov	r7, r1
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	4b3e      	ldr	r3, [pc, #248]	; (8005830 <atan+0x300>)
 8005738:	f7fa fece 	bl	80004d8 <__aeabi_dmul>
 800573c:	2200      	movs	r2, #0
 800573e:	4b39      	ldr	r3, [pc, #228]	; (8005824 <atan+0x2f4>)
 8005740:	f7fa fd14 	bl	800016c <__adddf3>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4630      	mov	r0, r6
 800574a:	4639      	mov	r1, r7
 800574c:	f7fa ffee 	bl	800072c <__aeabi_ddiv>
 8005750:	f04f 0a02 	mov.w	sl, #2
 8005754:	4604      	mov	r4, r0
 8005756:	460d      	mov	r5, r1
 8005758:	e749      	b.n	80055ee <atan+0xbe>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	2000      	movs	r0, #0
 8005760:	4934      	ldr	r1, [pc, #208]	; (8005834 <atan+0x304>)
 8005762:	f7fa ffe3 	bl	800072c <__aeabi_ddiv>
 8005766:	f04f 0a03 	mov.w	sl, #3
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	e73e      	b.n	80055ee <atan+0xbe>
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <atan+0x308>)
 8005772:	4e32      	ldr	r6, [pc, #200]	; (800583c <atan+0x30c>)
 8005774:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f7fa fcf4 	bl	8000168 <__aeabi_dsub>
 8005780:	4622      	mov	r2, r4
 8005782:	462b      	mov	r3, r5
 8005784:	f7fa fcf0 	bl	8000168 <__aeabi_dsub>
 8005788:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005794:	f7fa fce8 	bl	8000168 <__aeabi_dsub>
 8005798:	f1bb 0f00 	cmp.w	fp, #0
 800579c:	4604      	mov	r4, r0
 800579e:	460d      	mov	r5, r1
 80057a0:	f6bf aee4 	bge.w	800556c <atan+0x3c>
 80057a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057a8:	461d      	mov	r5, r3
 80057aa:	e6df      	b.n	800556c <atan+0x3c>
 80057ac:	4d24      	ldr	r5, [pc, #144]	; (8005840 <atan+0x310>)
 80057ae:	e6dd      	b.n	800556c <atan+0x3c>
 80057b0:	8800759c 	.word	0x8800759c
 80057b4:	7e37e43c 	.word	0x7e37e43c
 80057b8:	e322da11 	.word	0xe322da11
 80057bc:	3f90ad3a 	.word	0x3f90ad3a
 80057c0:	24760deb 	.word	0x24760deb
 80057c4:	3fa97b4b 	.word	0x3fa97b4b
 80057c8:	a0d03d51 	.word	0xa0d03d51
 80057cc:	3fb10d66 	.word	0x3fb10d66
 80057d0:	c54c206e 	.word	0xc54c206e
 80057d4:	3fb745cd 	.word	0x3fb745cd
 80057d8:	920083ff 	.word	0x920083ff
 80057dc:	3fc24924 	.word	0x3fc24924
 80057e0:	5555550d 	.word	0x5555550d
 80057e4:	3fd55555 	.word	0x3fd55555
 80057e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80057ec:	bfa2b444 	.word	0xbfa2b444
 80057f0:	52defd9a 	.word	0x52defd9a
 80057f4:	3fadde2d 	.word	0x3fadde2d
 80057f8:	af749a6d 	.word	0xaf749a6d
 80057fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8005800:	fe231671 	.word	0xfe231671
 8005804:	3fbc71c6 	.word	0x3fbc71c6
 8005808:	9998ebc4 	.word	0x9998ebc4
 800580c:	3fc99999 	.word	0x3fc99999
 8005810:	440fffff 	.word	0x440fffff
 8005814:	7ff00000 	.word	0x7ff00000
 8005818:	54442d18 	.word	0x54442d18
 800581c:	bff921fb 	.word	0xbff921fb
 8005820:	3fdbffff 	.word	0x3fdbffff
 8005824:	3ff00000 	.word	0x3ff00000
 8005828:	3ff2ffff 	.word	0x3ff2ffff
 800582c:	40038000 	.word	0x40038000
 8005830:	3ff80000 	.word	0x3ff80000
 8005834:	bff00000 	.word	0xbff00000
 8005838:	08005948 	.word	0x08005948
 800583c:	08005928 	.word	0x08005928
 8005840:	3ff921fb 	.word	0x3ff921fb

08005844 <fabs>:
 8005844:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005848:	4619      	mov	r1, r3
 800584a:	4770      	bx	lr

0800584c <_init>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr

08005858 <_fini>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr

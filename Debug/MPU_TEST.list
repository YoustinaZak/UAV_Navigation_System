
MPU_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000566c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005780  08005780  00015780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005878  08005878  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08005878  08005878  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005878  08005878  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005880  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200000f0  08005970  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005970  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY
 13 .debug_info   000075ee  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018db  00000000  00000000  0002774a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  00029028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000600  00000000  00000000  00029820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a3b  00000000  00000000  00029e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b475  00000000  00000000  0004185b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082c89  00000000  00000000  0004ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000289c  00000000  00000000  000cf95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000d21f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005764 	.word	0x08005764

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	08005764 	.word	0x08005764

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <I2C_MPU_READ>:
 * @param Data: pointer to an array of data
 * @param Len: length of the array
 *
 * @return uint8_t: 1 if acknowledge received, 0 if acknowledge not received
 */
uint8_t I2C_MPU_READ(uint8_t SL_address, uint8_t *Data, uint8_t Len){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ACK = HAL_I2C_Master_Receive(&hi2c1, SL_address<<1 ,
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b299      	uxth	r1, r3
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	2264      	movs	r2, #100	; 0x64
 80010ea:	9200      	str	r2, [sp, #0]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <I2C_MPU_READ+0x40>)
 80010f0:	f001 fc50 	bl	8002994 <HAL_I2C_Master_Receive>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
						Data, Len, 100); //sends read bit automatically
				return (ACK == HAL_OK) ? 1 : 0;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	bf0c      	ite	eq
 80010fe:	2301      	moveq	r3, #1
 8001100:	2300      	movne	r3, #0
 8001102:	b2db      	uxtb	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000010c 	.word	0x2000010c

08001110 <I2C_MPU_WRITE>:
 * @param Data: pointer to an array of data
 * @param Len: length of the array
 *
 * @return uint8_t: 1 if acknowledge received, 0 if acknowledge not received
 */
uint8_t I2C_MPU_WRITE(uint8_t SL_address, uint8_t *Data, uint8_t Len){
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ACK = HAL_I2C_Master_Transmit(&hi2c1, SL_address << 1,
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29b      	uxth	r3, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b299      	uxth	r1, r3
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	b29b      	uxth	r3, r3
 800112c:	2264      	movs	r2, #100	; 0x64
 800112e:	9200      	str	r2, [sp, #0]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <I2C_MPU_WRITE+0x40>)
 8001134:	f001 fb30 	bl	8002798 <HAL_I2C_Master_Transmit>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
							Data, Len, 100); //sends write bit automatically
					return (ACK == HAL_OK) ? 1 : 0;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000010c 	.word	0x2000010c

08001154 <I2C_MPU_CHECK>:
 *
 * @param SL_address
 * @param Data
 * @param Len
 */
uint8_t I2C_MPU_CHECK(uint8_t SL_address){
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af04      	add	r7, sp, #16
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t check;
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, SL_address << 1, 0x75, 1, &check, 1, 100);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	b29b      	uxth	r3, r3
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	b299      	uxth	r1, r3
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	f107 030e 	add.w	r3, r7, #14
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2275      	movs	r2, #117	; 0x75
 8001178:	4810      	ldr	r0, [pc, #64]	; (80011bc <I2C_MPU_CHECK+0x68>)
 800117a:	f001 ff71 	bl	8003060 <HAL_I2C_Mem_Read>

	    if (check == 0x68) {  // 0x68 is the default WHO_AM_I register value
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	2b68      	cmp	r3, #104	; 0x68
 8001182:	d117      	bne.n	80011b4 <I2C_MPU_CHECK+0x60>
	        data = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	737b      	strb	r3, [r7, #13]
	        // Wake up the MPU6050 by writing 0 to the Power Management register (0x6B)
	        HAL_StatusTypeDef ACK =HAL_I2C_Mem_Write(&hi2c1, MPU_slave_address << 1, 0x6B, 1, &data, 1, 100);
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	f107 030d 	add.w	r3, r7, #13
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	226b      	movs	r2, #107	; 0x6b
 800119a:	21d0      	movs	r1, #208	; 0xd0
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <I2C_MPU_CHECK+0x68>)
 800119e:	f001 fe65 	bl	8002e6c <HAL_I2C_Mem_Write>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]
	        if(ACK==HAL_OK){
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <I2C_MPU_CHECK+0x5c>
	        	return 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <I2C_MPU_CHECK+0x60>
	        }
	        return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e7ff      	b.n	80011b4 <I2C_MPU_CHECK+0x60>
	    }

}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000010c 	.word	0x2000010c

080011c0 <GET_TICK>:
 * @brief
 *
 * @return
 */

uint32_t GET_TICK(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80011c4:	f000 fef6 	bl	8001fb4 <HAL_GetTick>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0ac      	sub	sp, #176	; 0xb0
 80011d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fe95 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f883 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f000 f8eb 	bl	80013b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011e2:	f000 f8bb 	bl	800135c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Alcd_Init(& lcd1, 1, 0);                     //removeable
 80011e6:	2200      	movs	r2, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	4837      	ldr	r0, [pc, #220]	; (80012c8 <main+0xf8>)
 80011ec:	f000 fb2c 	bl	8001848 <Alcd_Init>
  Alcd_PutAt_n(&lcd1, 1, 0, "UnderTest", 9);    //removeable
 80011f0:	2309      	movs	r3, #9
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <main+0xfc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	2101      	movs	r1, #1
 80011fa:	4833      	ldr	r0, [pc, #204]	; (80012c8 <main+0xf8>)
 80011fc:	f000 fbdf 	bl	80019be <Alcd_PutAt_n>
  HAL_Delay(3000);                             //removeable
 8001200:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001204:	f000 fee0 	bl	8001fc8 <HAL_Delay>


  MPU_Check(&mpu_6050);  //test success
 8001208:	4831      	ldr	r0, [pc, #196]	; (80012d0 <main+0x100>)
 800120a:	f000 fc45 	bl	8001a98 <MPU_Check>
  MPU_Init(&mpu_6050);   //test success
 800120e:	4830      	ldr	r0, [pc, #192]	; (80012d0 <main+0x100>)
 8001210:	f000 fc4e 	bl	8001ab0 <MPU_Init>
  uint8_t Data[40];
  uint8_t zata[40];
  uint8_t test_var=63;
 8001214:	233f      	movs	r3, #63	; 0x3f
 8001216:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t Data[40];
	  uint8_t zata[40];
      MPU_GET_PITCH_ROLL_YAW(&mpu_6050);
 800121a:	482d      	ldr	r0, [pc, #180]	; (80012d0 <main+0x100>)
 800121c:	f000 fd7c 	bl	8001d18 <MPU_GET_PITCH_ROLL_YAW>
     /* HAL_I2C_Master_Transmit(&hi2c1, 0x68 << 1, &test_var, 1,100);
      HAL_I2C_Master_Receive(&hi2c1, 0x68 << 1, Data, 2, 100);*/
	  sprintf(test,"p:%d",(int)mpu_6050.pitch);
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <main+0x100>)
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff2b 	bl	8001080 <__aeabi_f2iz>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4929      	ldr	r1, [pc, #164]	; (80012d4 <main+0x104>)
 8001230:	4829      	ldr	r0, [pc, #164]	; (80012d8 <main+0x108>)
 8001232:	f003 fa89 	bl	8004748 <siprintf>
	  sprintf(Data,"r:%d",(int)mpu_6050.roll);
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <main+0x100>)
 8001238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff20 	bl	8001080 <__aeabi_f2iz>
 8001240:	4602      	mov	r2, r0
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4925      	ldr	r1, [pc, #148]	; (80012dc <main+0x10c>)
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fa7e 	bl	8004748 <siprintf>
	  sprintf(zata,"y:%d",(int)mpu_6050.yaw);
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <main+0x100>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff15 	bl	8001080 <__aeabi_f2iz>
 8001256:	4602      	mov	r2, r0
 8001258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125c:	4920      	ldr	r1, [pc, #128]	; (80012e0 <main+0x110>)
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fa72 	bl	8004748 <siprintf>
	  //sprintf(zata,"z:%d",(int16_t) ((mpu_6050.buff[0] << 8)| mpu_6050.buff[1]));
	  Alcd_PutAt_n(&lcd1, 0, 0, test, strlen(test));
 8001264:	481c      	ldr	r0, [pc, #112]	; (80012d8 <main+0x108>)
 8001266:	f7fe ff73 	bl	8000150 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <main+0x108>)
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	4814      	ldr	r0, [pc, #80]	; (80012c8 <main+0xf8>)
 8001278:	f000 fba1 	bl	80019be <Alcd_PutAt_n>
	  Alcd_PutAt_n(&lcd1, 1, 0, Data, strlen(Data));
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ff66 	bl	8000150 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	1d3a      	adds	r2, r7, #4
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	480d      	ldr	r0, [pc, #52]	; (80012c8 <main+0xf8>)
 8001294:	f000 fb93 	bl	80019be <Alcd_PutAt_n>
	  Alcd_PutAt_n(&lcd1, 1, 7, zata, strlen(zata));
 8001298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ff57 	bl	8000150 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	2207      	movs	r2, #7
 80012b0:	2101      	movs	r1, #1
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <main+0xf8>)
 80012b4:	f000 fb83 	bl	80019be <Alcd_PutAt_n>
	  HAL_Delay(500);
 80012b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012bc:	f000 fe84 	bl	8001fc8 <HAL_Delay>
	  Alcd_Clear(&lcd1);
 80012c0:	4801      	ldr	r0, [pc, #4]	; (80012c8 <main+0xf8>)
 80012c2:	f000 fb95 	bl	80019f0 <Alcd_Clear>
  {
 80012c6:	e7a8      	b.n	800121a <main+0x4a>
 80012c8:	20000000 	.word	0x20000000
 80012cc:	08005780 	.word	0x08005780
 80012d0:	20000020 	.word	0x20000020
 80012d4:	0800578c 	.word	0x0800578c
 80012d8:	20000160 	.word	0x20000160
 80012dc:	08005794 	.word	0x08005794
 80012e0:	0800579c 	.word	0x0800579c

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	; 0x40
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fa48 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2301      	movs	r3, #1
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	2310      	movs	r3, #16
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fe18 	bl	8003f50 <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001326:	f000 f875 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f003 f886 	bl	8004454 <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800134e:	f000 f861 	bl	8001414 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3740      	adds	r7, #64	; 0x40
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C1_Init+0x50>)
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <MX_I2C1_Init+0x54>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_I2C1_Init+0x50>)
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_I2C1_Init+0x58>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_I2C1_Init+0x50>)
 800137a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_I2C1_Init+0x50>)
 800139a:	f001 f8b9 	bl	8002510 <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 f836 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000010c 	.word	0x2000010c
 80013b0:	40005400 	.word	0x40005400
 80013b4:	000186a0 	.word	0x000186a0

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_GPIO_Init+0x58>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <MX_GPIO_Init+0x58>)
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_GPIO_Init+0x58>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_GPIO_Init+0x58>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <MX_GPIO_Init+0x58>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_GPIO_Init+0x58>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_GPIO_Init+0x58>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a07      	ldr	r2, [pc, #28]	; (8001410 <MX_GPIO_Init+0x58>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	6193      	str	r3, [r2, #24]
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <MX_GPIO_Init+0x58>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_MspInit+0x5c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_MspInit+0x5c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_MspInit+0x5c>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x5c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_MspInit+0x5c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_MspInit+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_MspInit+0x60>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_MspInit+0x60>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000

08001484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <HAL_I2C_MspInit+0x70>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d123      	bne.n	80014ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_I2C_MspInit+0x74>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <HAL_I2C_MspInit+0x74>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_I2C_MspInit+0x74>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014bc:	23c0      	movs	r3, #192	; 0xc0
 80014be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c0:	2312      	movs	r3, #18
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4619      	mov	r1, r3
 80014ce:	480b      	ldr	r0, [pc, #44]	; (80014fc <HAL_I2C_MspInit+0x78>)
 80014d0:	f000 fe82 	bl	80021d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_I2C_MspInit+0x74>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_I2C_MspInit+0x74>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014de:	61d3      	str	r3, [r2, #28]
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_I2C_MspInit+0x74>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40005400 	.word	0x40005400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010c00 	.word	0x40010c00

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001546:	f000 fd23 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f003 f90a 	bl	8004798 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20005000 	.word	0x20005000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	20000188 	.word	0x20000188
 80015b8:	200002e0 	.word	0x200002e0

080015bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c8:	f7ff fff8 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ce:	490c      	ldr	r1, [pc, #48]	; (8001600 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015e4:	4c09      	ldr	r4, [pc, #36]	; (800160c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f003 f8d7 	bl	80047a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f6:	f7ff fdeb 	bl	80011d0 <main>
  bx lr
 80015fa:	4770      	bx	lr
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001604:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 8001608:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 800160c:	200002e0 	.word	0x200002e0

08001610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_2_IRQHandler>
	...

08001614 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <DWT_Delay_Init+0x58>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a13      	ldr	r2, [pc, #76]	; (800166c <DWT_Delay_Init+0x58>)
 800161e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001622:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <DWT_Delay_Init+0x58>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4a10      	ldr	r2, [pc, #64]	; (800166c <DWT_Delay_Init+0x58>)
 800162a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800162e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <DWT_Delay_Init+0x5c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <DWT_Delay_Init+0x5c>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <DWT_Delay_Init+0x5c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <DWT_Delay_Init+0x5c>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <DWT_Delay_Init+0x5c>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800164e:	bf00      	nop
     __ASM volatile ("NOP");
 8001650:	bf00      	nop
  __ASM volatile ("NOP");
 8001652:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <DWT_Delay_Init+0x5c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800165c:	2300      	movs	r3, #0
 800165e:	e000      	b.n	8001662 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001660:	2301      	movs	r3, #1
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000edf0 	.word	0xe000edf0
 8001670:	e0001000 	.word	0xe0001000

08001674 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <DWT_Delay_us+0x40>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001682:	f003 f825 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 8001686:	4603      	mov	r3, r0
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <DWT_Delay_us+0x44>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0c9b      	lsrs	r3, r3, #18
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8001698:	bf00      	nop
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <DWT_Delay_us+0x40>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad2      	subs	r2, r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3f8      	bcc.n	800169a <DWT_Delay_us+0x26>
		;
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e0001000 	.word	0xe0001000
 80016b8:	431bde83 	.word	0x431bde83

080016bc <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ffd3 	bl	8001674 <DWT_Delay_us>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7a1b      	ldrb	r3, [r3, #8]
 80016ec:	4619      	mov	r1, r3
 80016ee:	230f      	movs	r3, #15
 80016f0:	408b      	lsls	r3, r1
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	400a      	ands	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	7a09      	ldrb	r1, [r1, #8]
 800170a:	408b      	lsls	r3, r1
 800170c:	4619      	mov	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	430a      	orrs	r2, r1
 8001714:	60da      	str	r2, [r3, #12]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6958      	ldr	r0, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	8b1b      	ldrh	r3, [r3, #24]
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	4619      	mov	r1, r3
 8001738:	f000 fed2 	bl	80024e0 <HAL_GPIO_WritePin>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68d8      	ldr	r0, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	8a1b      	ldrh	r3, [r3, #16]
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	4619      	mov	r1, r3
 800175c:	f000 fec0 	bl	80024e0 <HAL_GPIO_WritePin>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	2301      	movs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	2302      	movs	r3, #2
 800178a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f107 0208 	add.w	r2, r7, #8
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fd1e 	bl	80021d8 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	8a1b      	ldrh	r3, [r3, #16]
 80017a0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f107 0208 	add.w	r2, r7, #8
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fd13 	bl	80021d8 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7a1b      	ldrb	r3, [r3, #8]
 80017b6:	461a      	mov	r2, r3
 80017b8:	230f      	movs	r3, #15
 80017ba:	4093      	lsls	r3, r2
 80017bc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f107 0208 	add.w	r2, r7, #8
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fd05 	bl	80021d8 <HAL_GPIO_Init>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	70fb      	strb	r3, [r7, #3]
 80017e2:	4613      	mov	r3, r2
 80017e4:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff98 	bl	8001720 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff6c 	bl	80016d6 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 80017fe:	2101      	movs	r1, #1
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff9f 	bl	8001744 <EN_SET>
 8001806:	200a      	movs	r0, #10
 8001808:	f7ff ff58 	bl	80016bc <usDelay>
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ff98 	bl	8001744 <EN_SET>
 8001814:	2064      	movs	r0, #100	; 0x64
 8001816:	f7ff ff51 	bl	80016bc <usDelay>
	;
	Write_HalfByte(lcd, value);
 800181a:	78bb      	ldrb	r3, [r7, #2]
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ff59 	bl	80016d6 <Write_HalfByte>
	PulseEn
 8001824:	2101      	movs	r1, #1
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff8c 	bl	8001744 <EN_SET>
 800182c:	200a      	movs	r0, #10
 800182e:	f7ff ff45 	bl	80016bc <usDelay>
 8001832:	2100      	movs	r1, #0
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff85 	bl	8001744 <EN_SET>
 800183a:	2064      	movs	r0, #100	; 0x64
 800183c:	f7ff ff3e 	bl	80016bc <usDelay>
	;
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
 8001854:	4613      	mov	r3, r2
 8001856:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8001858:	f7ff fedc 	bl	8001614 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff83 	bl	8001768 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	78ba      	ldrb	r2, [r7, #2]
 8001872:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8001874:	78bb      	ldrb	r3, [r7, #2]
 8001876:	3340      	adds	r3, #64	; 0x40
 8001878:	b2da      	uxtb	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 800187e:	2100      	movs	r1, #0
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff4d 	bl	8001720 <RS_SET>
	EN_SET(lcd, 0);
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff5b 	bl	8001744 <EN_SET>
	usDelay(50000);
 800188e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001892:	f7ff ff13 	bl	80016bc <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e018      	b.n	80018ce <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 800189c:	2103      	movs	r1, #3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff19 	bl	80016d6 <Write_HalfByte>
		PulseEn
 80018a4:	2101      	movs	r1, #1
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff4c 	bl	8001744 <EN_SET>
 80018ac:	200a      	movs	r0, #10
 80018ae:	f7ff ff05 	bl	80016bc <usDelay>
 80018b2:	2100      	movs	r1, #0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff45 	bl	8001744 <EN_SET>
 80018ba:	2064      	movs	r0, #100	; 0x64
 80018bc:	f7ff fefe 	bl	80016bc <usDelay>
		;
		usDelay(4500);
 80018c0:	f241 1094 	movw	r0, #4500	; 0x1194
 80018c4:	f7ff fefa 	bl	80016bc <usDelay>
	for (x = 0; x < 2; x++)
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	3301      	adds	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d9e3      	bls.n	800189c <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 80018d4:	2103      	movs	r1, #3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fefd 	bl	80016d6 <Write_HalfByte>
	PulseEn
 80018dc:	2101      	movs	r1, #1
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ff30 	bl	8001744 <EN_SET>
 80018e4:	200a      	movs	r0, #10
 80018e6:	f7ff fee9 	bl	80016bc <usDelay>
 80018ea:	2100      	movs	r1, #0
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <EN_SET>
 80018f2:	2064      	movs	r0, #100	; 0x64
 80018f4:	f7ff fee2 	bl	80016bc <usDelay>
	;
	usDelay(150);
 80018f8:	2096      	movs	r0, #150	; 0x96
 80018fa:	f7ff fedf 	bl	80016bc <usDelay>
	Write_HalfByte(lcd, 0x02);
 80018fe:	2102      	movs	r1, #2
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fee8 	bl	80016d6 <Write_HalfByte>
	PulseEn
 8001906:	2101      	movs	r1, #1
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff1b 	bl	8001744 <EN_SET>
 800190e:	200a      	movs	r0, #10
 8001910:	f7ff fed4 	bl	80016bc <usDelay>
 8001914:	2100      	movs	r1, #0
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff14 	bl	8001744 <EN_SET>
 800191c:	2064      	movs	r0, #100	; 0x64
 800191e:	f7ff fecd 	bl	80016bc <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8001922:	2228      	movs	r2, #40	; 0x28
 8001924:	2100      	movs	r1, #0
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff55 	bl	80017d6 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	2101      	movs	r1, #1
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f86d 	bl	8001a12 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f859 	bl	80019f0 <Alcd_Clear>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
 8001952:	4613      	mov	r3, r2
 8001954:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	7e9a      	ldrb	r2, [r3, #26]
 800195e:	78bb      	ldrb	r3, [r7, #2]
 8001960:	4413      	add	r3, r2
 8001962:	b2db      	uxtb	r3, r3
 8001964:	b25b      	sxtb	r3, r3
 8001966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800196a:	b25b      	sxtb	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ff2f 	bl	80017d6 <Alcd_SendByte>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	4613      	mov	r3, r2
 800198c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
 8001992:	e00b      	b.n	80019ac <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	60ba      	str	r2, [r7, #8]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	2101      	movs	r1, #1
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff ff18 	bl	80017d6 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	3301      	adds	r3, #1
 80019aa:	75fb      	strb	r3, [r7, #23]
 80019ac:	7dfa      	ldrb	r2, [r7, #23]
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3ef      	bcc.n	8001994 <Alcd_Put_n+0x14>
	}
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	72fb      	strb	r3, [r7, #11]
 80019cc:	4613      	mov	r3, r2
 80019ce:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 80019d0:	7aba      	ldrb	r2, [r7, #10]
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff ffb5 	bl	8001946 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 80019dc:	7e3b      	ldrb	r3, [r7, #24]
 80019de:	461a      	mov	r2, r3
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff ffcc 	bl	8001980 <Alcd_Put_n>
}
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2100      	movs	r1, #0
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff feea 	bl	80017d6 <Alcd_SendByte>
	usDelay(2000);
 8001a02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a06:	f7ff fe59 	bl	80016bc <usDelay>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	4608      	mov	r0, r1
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	70fb      	strb	r3, [r7, #3]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70bb      	strb	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7f9b      	ldrb	r3, [r3, #30]
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 8001a46:	78bb      	ldrb	r3, [r7, #2]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7f9b      	ldrb	r3, [r3, #30]
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8001a5a:	787b      	ldrb	r3, [r7, #1]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f9b      	ldrb	r3, [r3, #30]
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7f9b      	ldrb	r3, [r3, #30]
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7f9b      	ldrb	r3, [r3, #30]
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fea3 	bl	80017d6 <Alcd_SendByte>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <MPU_Check>:
 * @fn void MPU_Check(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_Check(MPU_t *sensor){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	sensor->HW_Interface.Check_UI(MPU_slave_address);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	2068      	movs	r0, #104	; 0x68
 8001aa6:	4798      	blx	r3
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <MPU_Init>:
 * @fn void MPU_Init(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_Init(MPU_t *sensor){            //test success
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	sensor->gyro_scale_buffer[0]=0x1B;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	221b      	movs	r2, #27
 8001abc:	701a      	strb	r2, [r3, #0]
	sensor->gyro_scale_buffer[1]= (sensor->gyro_scale_range)<<3;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	789b      	ldrb	r3, [r3, #2]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	705a      	strb	r2, [r3, #1]
	sensor->acc_scale_buffer[0]=0x1C;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	221c      	movs	r2, #28
 8001ace:	70da      	strb	r2, [r3, #3]
	sensor->acc_scale_buffer[1]= (sensor->acc_scale_range)<<3;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	795b      	ldrb	r3, [r3, #5]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	711a      	strb	r2, [r3, #4]
	sensor->HW_Interface.Write_UI(MPU_slave_address, sensor->gyro_scale_buffer, 2 );
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	2068      	movs	r0, #104	; 0x68
 8001ae6:	4798      	blx	r3
	sensor->HW_Interface.Write_UI(MPU_slave_address, sensor->acc_scale_buffer, 2 );
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	1cd1      	adds	r1, r2, #3
 8001af0:	2202      	movs	r2, #2
 8001af2:	2068      	movs	r0, #104	; 0x68
 8001af4:	4798      	blx	r3
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <MPU_GET_ACC_RAW>:
 * @fn void MPU_GET_ACC_RAW(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_GET_ACC_RAW(MPU_t *sensor){ //leh pointer
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]

	uint8_t reg_address=59;                               //recheck
 8001b06:	233b      	movs	r3, #59	; 0x3b
 8001b08:	73fb      	strb	r3, [r7, #15]
	sensor->HW_Interface.Write_UI(MPU_slave_address, &reg_address, 1 );
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	f107 010f 	add.w	r1, r7, #15
 8001b12:	2201      	movs	r2, #1
 8001b14:	2068      	movs	r0, #104	; 0x68
 8001b16:	4798      	blx	r3
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->acc_buffer, 6 );
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	1d91      	adds	r1, r2, #6
 8001b20:	2206      	movs	r2, #6
 8001b22:	2068      	movs	r0, #104	; 0x68
 8001b24:	4798      	blx	r3
	sensor->acc_x =(int16_t) ((sensor->acc_buffer[0] << 8) | sensor->acc_buffer[1]);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	799b      	ldrb	r3, [r3, #6]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	79db      	ldrb	r3, [r3, #7]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	819a      	strh	r2, [r3, #12]
	sensor->acc_y =(int16_t) ((sensor->acc_buffer[2] << 8) | sensor->acc_buffer[3]);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7a1b      	ldrb	r3, [r3, #8]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7a5b      	ldrb	r3, [r3, #9]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	829a      	strh	r2, [r3, #20]
	sensor->acc_z =(int16_t) ((sensor->acc_buffer[4] << 8) | sensor->acc_buffer[5]);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7a9b      	ldrb	r3, [r3, #10]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7adb      	ldrb	r3, [r3, #11]
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	839a      	strh	r2, [r3, #28]
	/*reg_address =63;
	sensor->HW_Interface.Write_UI(MPU_slave_address, &reg_address, 1 );
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->buff, 2 );*/
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <MPU_GET_GYRO_RAW>:
 * @fn void MPU_GET_GYRO_RAW(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_GET_GYRO_RAW(MPU_t *sensor){ //leh pointer
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

	uint8_t reg_address =67;
 8001b78:	2343      	movs	r3, #67	; 0x43
 8001b7a:	73fb      	strb	r3, [r7, #15]
	sensor->HW_Interface.Write_UI(MPU_slave_address, &reg_address, 1 );
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b80:	f107 010f 	add.w	r1, r7, #15
 8001b84:	2201      	movs	r2, #1
 8001b86:	2068      	movs	r0, #104	; 0x68
 8001b88:	4798      	blx	r3
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->gyro_buffer, 6 );
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8001b94:	2206      	movs	r2, #6
 8001b96:	2068      	movs	r0, #104	; 0x68
 8001b98:	4798      	blx	r3
	sensor->gyro_x = ((sensor->gyro_buffer[0] << 8) | sensor->gyro_buffer[1]);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->gyro_y = ((sensor->gyro_buffer[2] << 8) | sensor->gyro_buffer[3]);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor->gyro_z = ((sensor->gyro_buffer[4] << 8) | sensor->gyro_buffer[5]);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MPU_CALC_ACC_NORM>:
 * @fn void MPU_CALC_ACC_NORM(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_CALC_ACC_NORM(MPU_t *sensor){
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	sensor->norm_acc_x = (float)sensor->acc_x / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f824 	bl	8000c4c <__aeabi_i2f>
 8001c04:	4604      	mov	r4, r0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	795b      	ldrb	r3, [r3, #5]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c10:	fa42 f303 	asr.w	r3, r2, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f819 	bl	8000c4c <__aeabi_i2f>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f7ff f91c 	bl	8000e5c <__aeabi_fdiv>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
	sensor->norm_acc_y = (float)sensor->acc_y / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f80a 	bl	8000c4c <__aeabi_i2f>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	795b      	ldrb	r3, [r3, #5]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c44:	fa42 f303 	asr.w	r3, r2, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe ffff 	bl	8000c4c <__aeabi_i2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4619      	mov	r1, r3
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff f902 	bl	8000e5c <__aeabi_fdiv>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
	sensor->norm_acc_z = (float)sensor->acc_z / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fff0 	bl	8000c4c <__aeabi_i2f>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	795b      	ldrb	r3, [r3, #5]
 8001c72:	3301      	adds	r3, #1
 8001c74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c78:	fa42 f303 	asr.w	r3, r2, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe ffe5 	bl	8000c4c <__aeabi_i2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4619      	mov	r1, r3
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff f8e8 	bl	8000e5c <__aeabi_fdiv>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	621a      	str	r2, [r3, #32]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}

08001c9c <MPU_CALC_GYRO_NORM>:
 * @fn void MPU_CALC_GYRO_NORM(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_CALC_GYRO_NORM(MPU_t *sensor){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	sensor->norm_gyro_x = sensor->gyro_x / (131 / (1<<sensor->gyro_scale_range));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	789b      	ldrb	r3, [r3, #2]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	2383      	movs	r3, #131	; 0x83
 8001cb4:	410b      	asrs	r3, r1
 8001cb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe ffc6 	bl	8000c4c <__aeabi_i2f>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
	sensor->norm_gyro_y = sensor->gyro_y / (131 / (1<<sensor->gyro_scale_range));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	789b      	ldrb	r3, [r3, #2]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	2383      	movs	r3, #131	; 0x83
 8001cd6:	410b      	asrs	r3, r1
 8001cd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe ffb5 	bl	8000c4c <__aeabi_i2f>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34
	sensor->norm_gyro_z = sensor->gyro_z / (131 / (1<<sensor->gyro_scale_range));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	789b      	ldrb	r3, [r3, #2]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2383      	movs	r3, #131	; 0x83
 8001cf8:	410b      	asrs	r3, r1
 8001cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe ffa4 	bl	8000c4c <__aeabi_i2f>
 8001d04:	4602      	mov	r2, r0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	0000      	movs	r0, r0
 8001d14:	0000      	movs	r0, r0
	...

08001d18 <MPU_GET_PITCH_ROLL_YAW>:

void MPU_GET_PITCH_ROLL_YAW(MPU_t *sensor){
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

	static float previousYaw =0;
	static uint32_t previousTime = 0;
	uint32_t currentTime = sensor->HW_Interface.Tick();
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	4798      	blx	r3
 8001d26:	60f8      	str	r0, [r7, #12]
	float deltaTime = (float)(currentTime - previousTime) / 1000;
 8001d28:	4b71      	ldr	r3, [pc, #452]	; (8001ef0 <MPU_GET_PITCH_ROLL_YAW+0x1d8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ff87 	bl	8000c44 <__aeabi_ui2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	496e      	ldr	r1, [pc, #440]	; (8001ef4 <MPU_GET_PITCH_ROLL_YAW+0x1dc>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f88e 	bl	8000e5c <__aeabi_fdiv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	60bb      	str	r3, [r7, #8]

	MPU_GET_ACC_RAW(sensor);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff feda 	bl	8001afe <MPU_GET_ACC_RAW>
	MPU_GET_GYRO_RAW(sensor);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff10 	bl	8001b70 <MPU_GET_GYRO_RAW>
	MPU_CALC_ACC_NORM(sensor);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff4d 	bl	8001bf0 <MPU_CALC_ACC_NORM>
	MPU_CALC_GYRO_NORM(sensor);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa0 	bl	8001c9c <MPU_CALC_GYRO_NORM>

	sensor->pitch = (float)atan2(sensor->acc_y, sqrt(sensor->acc_x * sensor->acc_x + sensor->acc_z * sensor->acc_z)) * RAD_TO_DEG;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fb4e 	bl	8000404 <__aeabi_i2d>
 8001d68:	4604      	mov	r4, r0
 8001d6a:	460d      	mov	r5, r1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001d84:	4619      	mov	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb36 	bl	8000404 <__aeabi_i2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f003 f985 	bl	80050ae <sqrt>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f003 f97d 	bl	80050aa <atan2>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fe3e 	bl	8000a38 <__aeabi_d2f>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fb32 	bl	8000428 <__aeabi_f2d>
 8001dc4:	a348      	add	r3, pc, #288	; (adr r3, 8001ee8 <MPU_GET_PITCH_ROLL_YAW+0x1d0>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fb85 	bl	80004d8 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe fe2f 	bl	8000a38 <__aeabi_d2f>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
	sensor->roll = (float)atan2(sensor->acc_x, sqrt(sensor->acc_y * sensor->acc_y + sensor->acc_z * sensor->acc_z)) * RAD_TO_DEG;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fb0c 	bl	8000404 <__aeabi_i2d>
 8001dec:	4604      	mov	r4, r0
 8001dee:	460d      	mov	r5, r1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001df6:	461a      	mov	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001dfe:	fb03 f202 	mul.w	r2, r3, r2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe faf4 	bl	8000404 <__aeabi_i2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f003 f943 	bl	80050ae <sqrt>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f003 f93b 	bl	80050aa <atan2>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fdfc 	bl	8000a38 <__aeabi_d2f>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe faf0 	bl	8000428 <__aeabi_f2d>
 8001e48:	a327      	add	r3, pc, #156	; (adr r3, 8001ee8 <MPU_GET_PITCH_ROLL_YAW+0x1d0>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fb43 	bl	80004d8 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fded 	bl	8000a38 <__aeabi_d2f>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	649a      	str	r2, [r3, #72]	; 0x48
    sensor->yaw = (float)previousYaw + sensor->norm_gyro_z * deltaTime;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ff42 	bl	8000cf4 <__aeabi_fmul>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <MPU_GET_PITCH_ROLL_YAW+0x1e0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f7fe fe32 	bl	8000ae4 <__addsf3>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	64da      	str	r2, [r3, #76]	; 0x4c

    if(sensor->yaw >=360){   //issue**************
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	491b      	ldr	r1, [pc, #108]	; (8001efc <MPU_GET_PITCH_ROLL_YAW+0x1e4>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f8e2 	bl	8001058 <__aeabi_fcmpge>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <MPU_GET_PITCH_ROLL_YAW+0x198>
    	sensor->yaw= sensor->yaw - 360 ;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4917      	ldr	r1, [pc, #92]	; (8001efc <MPU_GET_PITCH_ROLL_YAW+0x1e4>)
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fe1d 	bl	8000ae0 <__aeabi_fsub>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eae:	e00e      	b.n	8001ece <MPU_GET_PITCH_ROLL_YAW+0x1b6>
    } else if (sensor->yaw <= -360){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	4912      	ldr	r1, [pc, #72]	; (8001f00 <MPU_GET_PITCH_ROLL_YAW+0x1e8>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f8c4 	bl	8001044 <__aeabi_fcmple>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <MPU_GET_PITCH_ROLL_YAW+0x1b6>
    	sensor->yaw <= 360 + sensor->yaw ;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	490d      	ldr	r1, [pc, #52]	; (8001efc <MPU_GET_PITCH_ROLL_YAW+0x1e4>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fe0b 	bl	8000ae4 <__addsf3>
    }

    previousTime = currentTime;
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <MPU_GET_PITCH_ROLL_YAW+0x1d8>)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6013      	str	r3, [r2, #0]
    previousYaw = sensor->yaw;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <MPU_GET_PITCH_ROLL_YAW+0x1e0>)
 8001eda:	6013      	str	r3, [r2, #0]

}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	1a63cbb0 	.word	0x1a63cbb0
 8001eec:	404ca5dc 	.word	0x404ca5dc
 8001ef0:	2000018c 	.word	0x2000018c
 8001ef4:	447a0000 	.word	0x447a0000
 8001ef8:	20000190 	.word	0x20000190
 8001efc:	43b40000 	.word	0x43b40000
 8001f00:	c3b40000 	.word	0xc3b40000

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_Init+0x28>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_Init+0x28>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f92b 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fa7e 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f935 	bl	80021be <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f90b 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000080 	.word	0x20000080
 8001f88:	20000088 	.word	0x20000088
 8001f8c:	20000084 	.word	0x20000084

08001f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_IncTick+0x1c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <HAL_IncTick+0x20>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	20000088 	.word	0x20000088
 8001fb0:	20000194 	.word	0x20000194

08001fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <HAL_GetTick+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000194 	.word	0x20000194

08001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fee:	bf00      	nop
 8001ff0:	f7ff ffe0 	bl	8001fb4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000088 	.word	0x20000088

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	; (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff90 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff49 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff5e 	bl	8002058 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff90 	bl	80020c8 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5f 	bl	8002074 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffb0 	bl	800212c <SysTick_Config>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d8:	b480      	push	{r7}
 80021da:	b08b      	sub	sp, #44	; 0x2c
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	e169      	b.n	80024c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021ec:	2201      	movs	r2, #1
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 8158 	bne.w	80024ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a9a      	ldr	r2, [pc, #616]	; (8002478 <HAL_GPIO_Init+0x2a0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d05e      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 8002214:	4a98      	ldr	r2, [pc, #608]	; (8002478 <HAL_GPIO_Init+0x2a0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d875      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 800221a:	4a98      	ldr	r2, [pc, #608]	; (800247c <HAL_GPIO_Init+0x2a4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d058      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 8002220:	4a96      	ldr	r2, [pc, #600]	; (800247c <HAL_GPIO_Init+0x2a4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d86f      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 8002226:	4a96      	ldr	r2, [pc, #600]	; (8002480 <HAL_GPIO_Init+0x2a8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d052      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 800222c:	4a94      	ldr	r2, [pc, #592]	; (8002480 <HAL_GPIO_Init+0x2a8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d869      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 8002232:	4a94      	ldr	r2, [pc, #592]	; (8002484 <HAL_GPIO_Init+0x2ac>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d04c      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 8002238:	4a92      	ldr	r2, [pc, #584]	; (8002484 <HAL_GPIO_Init+0x2ac>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d863      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 800223e:	4a92      	ldr	r2, [pc, #584]	; (8002488 <HAL_GPIO_Init+0x2b0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d046      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 8002244:	4a90      	ldr	r2, [pc, #576]	; (8002488 <HAL_GPIO_Init+0x2b0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d85d      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 800224a:	2b12      	cmp	r3, #18
 800224c:	d82a      	bhi.n	80022a4 <HAL_GPIO_Init+0xcc>
 800224e:	2b12      	cmp	r3, #18
 8002250:	d859      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 8002252:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <HAL_GPIO_Init+0x80>)
 8002254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002258:	080022d3 	.word	0x080022d3
 800225c:	080022ad 	.word	0x080022ad
 8002260:	080022bf 	.word	0x080022bf
 8002264:	08002301 	.word	0x08002301
 8002268:	08002307 	.word	0x08002307
 800226c:	08002307 	.word	0x08002307
 8002270:	08002307 	.word	0x08002307
 8002274:	08002307 	.word	0x08002307
 8002278:	08002307 	.word	0x08002307
 800227c:	08002307 	.word	0x08002307
 8002280:	08002307 	.word	0x08002307
 8002284:	08002307 	.word	0x08002307
 8002288:	08002307 	.word	0x08002307
 800228c:	08002307 	.word	0x08002307
 8002290:	08002307 	.word	0x08002307
 8002294:	08002307 	.word	0x08002307
 8002298:	08002307 	.word	0x08002307
 800229c:	080022b5 	.word	0x080022b5
 80022a0:	080022c9 	.word	0x080022c9
 80022a4:	4a79      	ldr	r2, [pc, #484]	; (800248c <HAL_GPIO_Init+0x2b4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022aa:	e02c      	b.n	8002306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e029      	b.n	8002308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	3304      	adds	r3, #4
 80022ba:	623b      	str	r3, [r7, #32]
          break;
 80022bc:	e024      	b.n	8002308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	3308      	adds	r3, #8
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e01f      	b.n	8002308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	330c      	adds	r3, #12
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e01a      	b.n	8002308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022da:	2304      	movs	r3, #4
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e013      	b.n	8002308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e8:	2308      	movs	r3, #8
 80022ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	611a      	str	r2, [r3, #16]
          break;
 80022f2:	e009      	b.n	8002308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f4:	2308      	movs	r3, #8
 80022f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	615a      	str	r2, [r3, #20]
          break;
 80022fe:	e003      	b.n	8002308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
          break;
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x130>
          break;
 8002306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2bff      	cmp	r3, #255	; 0xff
 800230c:	d801      	bhi.n	8002312 <HAL_GPIO_Init+0x13a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	e001      	b.n	8002316 <HAL_GPIO_Init+0x13e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2bff      	cmp	r3, #255	; 0xff
 800231c:	d802      	bhi.n	8002324 <HAL_GPIO_Init+0x14c>
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	e002      	b.n	800232a <HAL_GPIO_Init+0x152>
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	3b08      	subs	r3, #8
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	210f      	movs	r1, #15
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	401a      	ands	r2, r3
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	431a      	orrs	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80b1 	beq.w	80024ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002358:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <HAL_GPIO_Init+0x2b8>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_GPIO_Init+0x2b8>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_GPIO_Init+0x2b8>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002370:	4a48      	ldr	r2, [pc, #288]	; (8002494 <HAL_GPIO_Init+0x2bc>)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <HAL_GPIO_Init+0x2c0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_GPIO_Init+0x1ec>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a3f      	ldr	r2, [pc, #252]	; (800249c <HAL_GPIO_Init+0x2c4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00d      	beq.n	80023c0 <HAL_GPIO_Init+0x1e8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3e      	ldr	r2, [pc, #248]	; (80024a0 <HAL_GPIO_Init+0x2c8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <HAL_GPIO_Init+0x1e4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3d      	ldr	r2, [pc, #244]	; (80024a4 <HAL_GPIO_Init+0x2cc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_GPIO_Init+0x1e0>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e006      	b.n	80023c6 <HAL_GPIO_Init+0x1ee>
 80023b8:	2304      	movs	r3, #4
 80023ba:	e004      	b.n	80023c6 <HAL_GPIO_Init+0x1ee>
 80023bc:	2302      	movs	r3, #2
 80023be:	e002      	b.n	80023c6 <HAL_GPIO_Init+0x1ee>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_GPIO_Init+0x1ee>
 80023c4:	2300      	movs	r3, #0
 80023c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c8:	f002 0203 	and.w	r2, r2, #3
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4093      	lsls	r3, r2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023d6:	492f      	ldr	r1, [pc, #188]	; (8002494 <HAL_GPIO_Init+0x2bc>)
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	492c      	ldr	r1, [pc, #176]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023fe:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	43db      	mvns	r3, r3
 8002406:	4928      	ldr	r1, [pc, #160]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002408:	4013      	ands	r3, r2
 800240a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4922      	ldr	r1, [pc, #136]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	43db      	mvns	r3, r3
 800242e:	491e      	ldr	r1, [pc, #120]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002430:	4013      	ands	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4918      	ldr	r1, [pc, #96]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	43db      	mvns	r3, r3
 8002456:	4914      	ldr	r1, [pc, #80]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002458:	4013      	ands	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d021      	beq.n	80024ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e021      	b.n	80024ba <HAL_GPIO_Init+0x2e2>
 8002476:	bf00      	nop
 8002478:	10320000 	.word	0x10320000
 800247c:	10310000 	.word	0x10310000
 8002480:	10220000 	.word	0x10220000
 8002484:	10210000 	.word	0x10210000
 8002488:	10120000 	.word	0x10120000
 800248c:	10110000 	.word	0x10110000
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000
 8002498:	40010800 	.word	0x40010800
 800249c:	40010c00 	.word	0x40010c00
 80024a0:	40011000 	.word	0x40011000
 80024a4:	40011400 	.word	0x40011400
 80024a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_GPIO_Init+0x304>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	4909      	ldr	r1, [pc, #36]	; (80024dc <HAL_GPIO_Init+0x304>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	3301      	adds	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f ae8e 	bne.w	80021ec <HAL_GPIO_Init+0x14>
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	372c      	adds	r7, #44	; 0x2c
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40010400 	.word	0x40010400

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024fc:	e003      	b.n	8002506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e12b      	b.n	800277a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe ffa4 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	; 0x24
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002574:	f002 f8b6 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 8002578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a81      	ldr	r2, [pc, #516]	; (8002784 <HAL_I2C_Init+0x274>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d807      	bhi.n	8002594 <HAL_I2C_Init+0x84>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a80      	ldr	r2, [pc, #512]	; (8002788 <HAL_I2C_Init+0x278>)
 8002588:	4293      	cmp	r3, r2
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e006      	b.n	80025a2 <HAL_I2C_Init+0x92>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a7d      	ldr	r2, [pc, #500]	; (800278c <HAL_I2C_Init+0x27c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0e7      	b.n	800277a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a78      	ldr	r2, [pc, #480]	; (8002790 <HAL_I2C_Init+0x280>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0c9b      	lsrs	r3, r3, #18
 80025b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_I2C_Init+0x274>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d802      	bhi.n	80025e4 <HAL_I2C_Init+0xd4>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3301      	adds	r3, #1
 80025e2:	e009      	b.n	80025f8 <HAL_I2C_Init+0xe8>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	4a69      	ldr	r2, [pc, #420]	; (8002794 <HAL_I2C_Init+0x284>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	3301      	adds	r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800260a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	495c      	ldr	r1, [pc, #368]	; (8002784 <HAL_I2C_Init+0x274>)
 8002614:	428b      	cmp	r3, r1
 8002616:	d819      	bhi.n	800264c <HAL_I2C_Init+0x13c>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e59      	subs	r1, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fbb1 f3f3 	udiv	r3, r1, r3
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800262c:	400b      	ands	r3, r1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_I2C_Init+0x138>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1e59      	subs	r1, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002646:	e051      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 8002648:	2304      	movs	r3, #4
 800264a:	e04f      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d111      	bne.n	8002678 <HAL_I2C_Init+0x168>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e012      	b.n	800269e <HAL_I2C_Init+0x18e>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e58      	subs	r0, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	0099      	lsls	r1, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Init+0x196>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e022      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <HAL_I2C_Init+0x1bc>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1e58      	subs	r0, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	440b      	add	r3, r1
 80026bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ca:	e00f      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	0099      	lsls	r1, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	6809      	ldr	r1, [r1, #0]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800271a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6911      	ldr	r1, [r2, #16]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	000186a0 	.word	0x000186a0
 8002788:	001e847f 	.word	0x001e847f
 800278c:	003d08ff 	.word	0x003d08ff
 8002790:	431bde83 	.word	0x431bde83
 8002794:	10624dd3 	.word	0x10624dd3

08002798 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	461a      	mov	r2, r3
 80027a4:	460b      	mov	r3, r1
 80027a6:	817b      	strh	r3, [r7, #10]
 80027a8:	4613      	mov	r3, r2
 80027aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff fc02 	bl	8001fb4 <HAL_GetTick>
 80027b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	f040 80e0 	bne.w	8002980 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2319      	movs	r3, #25
 80027c6:	2201      	movs	r2, #1
 80027c8:	4970      	ldr	r1, [pc, #448]	; (800298c <HAL_I2C_Master_Transmit+0x1f4>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f001 f98a 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	e0d3      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_I2C_Master_Transmit+0x50>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0cc      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d007      	beq.n	800280e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2221      	movs	r2, #33	; 0x21
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2210      	movs	r2, #16
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	893a      	ldrh	r2, [r7, #8]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_I2C_Master_Transmit+0x1f8>)
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002850:	8979      	ldrh	r1, [r7, #10]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fe76 	bl	8003548 <I2C_MasterRequestWrite>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e08d      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800287c:	e066      	b.n	800294c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f001 fa48 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b04      	cmp	r3, #4
 8002894:	d107      	bne.n	80028a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06b      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d11b      	bne.n	8002920 <HAL_I2C_Master_Transmit+0x188>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	6a39      	ldr	r1, [r7, #32]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f001 fa3f 	bl	8003da8 <I2C_WaitOnBTFFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e01a      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d194      	bne.n	800287e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	00100002 	.word	0x00100002
 8002990:	ffff0000 	.word	0xffff0000

08002994 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	461a      	mov	r2, r3
 80029a0:	460b      	mov	r3, r1
 80029a2:	817b      	strh	r3, [r7, #10]
 80029a4:	4613      	mov	r3, r2
 80029a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff fb02 	bl	8001fb4 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	f040 824b 	bne.w	8002e56 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2319      	movs	r3, #25
 80029c6:	2201      	movs	r2, #1
 80029c8:	497f      	ldr	r1, [pc, #508]	; (8002bc8 <HAL_I2C_Master_Receive+0x234>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f001 f88a 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
 80029d8:	e23e      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2C_Master_Receive+0x54>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e237      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d007      	beq.n	8002a0e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2222      	movs	r2, #34	; 0x22
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	893a      	ldrh	r2, [r7, #8]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a5f      	ldr	r2, [pc, #380]	; (8002bcc <HAL_I2C_Master_Receive+0x238>)
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fdf8 	bl	800364c <I2C_MasterRequestRead>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1f8      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d113      	bne.n	8002a96 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e1cc      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d11e      	bne.n	8002adc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aae:	b672      	cpsid	i
}
 8002ab0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad8:	b662      	cpsie	i
}
 8002ada:	e035      	b.n	8002b48 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d11e      	bne.n	8002b22 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af4:	b672      	cpsid	i
}
 8002af6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b1e:	b662      	cpsie	i
}
 8002b20:	e012      	b.n	8002b48 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b48:	e172      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	f200 811f 	bhi.w	8002d92 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d123      	bne.n	8002ba4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f001 f969 	bl	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e173      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba2:	e145      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d152      	bne.n	8002c52 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4906      	ldr	r1, [pc, #24]	; (8002bd0 <HAL_I2C_Master_Receive+0x23c>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 ff94 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e148      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
 8002bc6:	bf00      	nop
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000
 8002bd0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
}
 8002bd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c1a:	b662      	cpsie	i
}
 8002c1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c50:	e0ee      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4981      	ldr	r1, [pc, #516]	; (8002e60 <HAL_I2C_Master_Receive+0x4cc>)
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 ff41 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0f5      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c7c:	b672      	cpsid	i
}
 8002c7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_I2C_Master_Receive+0x4d0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	08db      	lsrs	r3, r3, #3
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	; (8002e68 <HAL_I2C_Master_Receive+0x4d4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0a1a      	lsrs	r2, r3, #8
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00da      	lsls	r2, r3, #3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d118      	bne.n	8002d0a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cfa:	b662      	cpsie	i
}
 8002cfc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0a6      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d1d9      	bne.n	8002ccc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d5a:	b662      	cpsie	i
}
 8002d5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d90:	e04e      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f001 f84e 	bl	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e058      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d124      	bne.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f47f ae88 	bne.w	8002b4a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	; 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	00010004 	.word	0x00010004
 8002e64:	20000080 	.word	0x20000080
 8002e68:	14f8b589 	.word	0x14f8b589

08002e6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	817b      	strh	r3, [r7, #10]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	813b      	strh	r3, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e86:	f7ff f895 	bl	8001fb4 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	f040 80d9 	bne.w	800304c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2319      	movs	r3, #25
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	496d      	ldr	r1, [pc, #436]	; (8003058 <HAL_I2C_Mem_Write+0x1ec>)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fe1d 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0cc      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Mem_Write+0x56>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0c5      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d007      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2221      	movs	r2, #33	; 0x21
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a4d      	ldr	r2, [pc, #308]	; (800305c <HAL_I2C_Mem_Write+0x1f0>)
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f2a:	88f8      	ldrh	r0, [r7, #6]
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4603      	mov	r3, r0
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fc54 	bl	80037e8 <I2C_RequestMemoryWrite>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d052      	beq.n	8002fec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e081      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fee2 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d107      	bne.n	8002f72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d11b      	bne.n	8002fec <HAL_I2C_Mem_Write+0x180>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d017      	beq.n	8002fec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1aa      	bne.n	8002f4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fed5 	bl	8003da8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b04      	cmp	r3, #4
 800300a:	d107      	bne.n	800301c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e016      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	00100002 	.word	0x00100002
 800305c:	ffff0000 	.word	0xffff0000

08003060 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08c      	sub	sp, #48	; 0x30
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	817b      	strh	r3, [r7, #10]
 8003072:	460b      	mov	r3, r1
 8003074:	813b      	strh	r3, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800307e:	f7fe ff99 	bl	8001fb4 <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	f040 8250 	bne.w	8003532 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2319      	movs	r3, #25
 8003098:	2201      	movs	r2, #1
 800309a:	4982      	ldr	r1, [pc, #520]	; (80032a4 <HAL_I2C_Mem_Read+0x244>)
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fd21 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
 80030aa:	e243      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Mem_Read+0x5a>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e23c      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d007      	beq.n	80030e0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2222      	movs	r2, #34	; 0x22
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a62      	ldr	r2, [pc, #392]	; (80032a8 <HAL_I2C_Mem_Read+0x248>)
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003122:	88f8      	ldrh	r0, [r7, #6]
 8003124:	893a      	ldrh	r2, [r7, #8]
 8003126:	8979      	ldrh	r1, [r7, #10]
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4603      	mov	r3, r0
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fbee 	bl	8003914 <I2C_RequestMemoryRead>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1f8      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d113      	bne.n	8003172 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e1cc      	b.n	800350c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	2b01      	cmp	r3, #1
 8003178:	d11e      	bne.n	80031b8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003188:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800318a:	b672      	cpsid	i
}
 800318c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031b4:	b662      	cpsie	i
}
 80031b6:	e035      	b.n	8003224 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d11e      	bne.n	80031fe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031d0:	b672      	cpsid	i
}
 80031d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031fa:	b662      	cpsie	i
}
 80031fc:	e012      	b.n	8003224 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003224:	e172      	b.n	800350c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	2b03      	cmp	r3, #3
 800322c:	f200 811f 	bhi.w	800346e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	2b01      	cmp	r3, #1
 8003236:	d123      	bne.n	8003280 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fdfb 	bl	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e173      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800327e:	e145      	b.n	800350c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	2b02      	cmp	r3, #2
 8003286:	d152      	bne.n	800332e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	2200      	movs	r2, #0
 8003290:	4906      	ldr	r1, [pc, #24]	; (80032ac <HAL_I2C_Mem_Read+0x24c>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fc26 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e148      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
 80032a2:	bf00      	nop
 80032a4:	00100002 	.word	0x00100002
 80032a8:	ffff0000 	.word	0xffff0000
 80032ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032b0:	b672      	cpsid	i
}
 80032b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032f6:	b662      	cpsie	i
}
 80032f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800332c:	e0ee      	b.n	800350c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	2200      	movs	r2, #0
 8003336:	4981      	ldr	r1, [pc, #516]	; (800353c <HAL_I2C_Mem_Read+0x4dc>)
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fbd3 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0f5      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003356:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003358:	b672      	cpsid	i
}
 800335a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800338e:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_I2C_Mem_Read+0x4e0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	08db      	lsrs	r3, r3, #3
 8003394:	4a6b      	ldr	r2, [pc, #428]	; (8003544 <HAL_I2C_Mem_Read+0x4e4>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0a1a      	lsrs	r2, r3, #8
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00da      	lsls	r2, r3, #3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d118      	bne.n	80033e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0220 	orr.w	r2, r3, #32
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80033d6:	b662      	cpsie	i
}
 80033d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0a6      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d1d9      	bne.n	80033a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003436:	b662      	cpsie	i
}
 8003438:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800346c:	e04e      	b.n	800350c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fce0 	bl	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e058      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d124      	bne.n	800350c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d107      	bne.n	80034da <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f ae88 	bne.w	8003226 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
  }
}
 8003534:	4618      	mov	r0, r3
 8003536:	3728      	adds	r7, #40	; 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	00010004 	.word	0x00010004
 8003540:	20000080 	.word	0x20000080
 8003544:	14f8b589 	.word	0x14f8b589

08003548 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	460b      	mov	r3, r1
 8003556:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d006      	beq.n	8003572 <I2C_MasterRequestWrite+0x2a>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d003      	beq.n	8003572 <I2C_MasterRequestWrite+0x2a>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003570:	d108      	bne.n	8003584 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e00b      	b.n	800359c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	2b12      	cmp	r3, #18
 800358a:	d107      	bne.n	800359c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fa9b 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c2:	d103      	bne.n	80035cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e035      	b.n	800363c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d8:	d108      	bne.n	80035ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035e8:	611a      	str	r2, [r3, #16]
 80035ea:	e01b      	b.n	8003624 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035ec:	897b      	ldrh	r3, [r7, #10]
 80035ee:	11db      	asrs	r3, r3, #7
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 0306 	and.w	r3, r3, #6
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f063 030f 	orn	r3, r3, #15
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	490e      	ldr	r1, [pc, #56]	; (8003644 <I2C_MasterRequestWrite+0xfc>)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fae4 	bl	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e010      	b.n	800363c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4907      	ldr	r1, [pc, #28]	; (8003648 <I2C_MasterRequestWrite+0x100>)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fad4 	bl	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	00010008 	.word	0x00010008
 8003648:	00010002 	.word	0x00010002

0800364c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	460b      	mov	r3, r1
 800365a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d006      	beq.n	8003686 <I2C_MasterRequestRead+0x3a>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d003      	beq.n	8003686 <I2C_MasterRequestRead+0x3a>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003684:	d108      	bne.n	8003698 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e00b      	b.n	80036b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	2b11      	cmp	r3, #17
 800369e:	d107      	bne.n	80036b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa11 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d6:	d103      	bne.n	80036e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e079      	b.n	80037d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ec:	d108      	bne.n	8003700 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	611a      	str	r2, [r3, #16]
 80036fe:	e05f      	b.n	80037c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003700:	897b      	ldrh	r3, [r7, #10]
 8003702:	11db      	asrs	r3, r3, #7
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0306 	and.w	r3, r3, #6
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f063 030f 	orn	r3, r3, #15
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4930      	ldr	r1, [pc, #192]	; (80037e0 <I2C_MasterRequestRead+0x194>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fa5a 	bl	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e054      	b.n	80037d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4929      	ldr	r1, [pc, #164]	; (80037e4 <I2C_MasterRequestRead+0x198>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fa4a 	bl	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e044      	b.n	80037d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003772:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f9af 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379a:	d103      	bne.n	80037a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e017      	b.n	80037d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	11db      	asrs	r3, r3, #7
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 0306 	and.w	r3, r3, #6
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f063 030e 	orn	r3, r3, #14
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4907      	ldr	r1, [pc, #28]	; (80037e4 <I2C_MasterRequestRead+0x198>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fa06 	bl	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	00010008 	.word	0x00010008
 80037e4:	00010002 	.word	0x00010002

080037e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	4608      	mov	r0, r1
 80037f2:	4611      	mov	r1, r2
 80037f4:	461a      	mov	r2, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	817b      	strh	r3, [r7, #10]
 80037fa:	460b      	mov	r3, r1
 80037fc:	813b      	strh	r3, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003810:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	2200      	movs	r2, #0
 800381a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f960 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003838:	d103      	bne.n	8003842 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e05f      	b.n	8003906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003846:	897b      	ldrh	r3, [r7, #10]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003854:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	492d      	ldr	r1, [pc, #180]	; (8003910 <I2C_RequestMemoryWrite+0x128>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f9bb 	bl	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e04c      	b.n	8003906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003884:	6a39      	ldr	r1, [r7, #32]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fa46 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b04      	cmp	r3, #4
 8003898:	d107      	bne.n	80038aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e02b      	b.n	8003906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b4:	893b      	ldrh	r3, [r7, #8]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]
 80038be:	e021      	b.n	8003904 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038c0:	893b      	ldrh	r3, [r7, #8]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	6a39      	ldr	r1, [r7, #32]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fa20 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d107      	bne.n	80038f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e005      	b.n	8003906 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038fa:	893b      	ldrh	r3, [r7, #8]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	00010002 	.word	0x00010002

08003914 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	461a      	mov	r2, r3
 8003922:	4603      	mov	r3, r0
 8003924:	817b      	strh	r3, [r7, #10]
 8003926:	460b      	mov	r3, r1
 8003928:	813b      	strh	r3, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800393c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	2200      	movs	r2, #0
 8003956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f8c2 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003974:	d103      	bne.n	800397e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0aa      	b.n	8003ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	4952      	ldr	r1, [pc, #328]	; (8003ae0 <I2C_RequestMemoryRead+0x1cc>)
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f91d 	bl	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e097      	b.n	8003ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	6a39      	ldr	r1, [r7, #32]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f9a8 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d107      	bne.n	80039e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e076      	b.n	8003ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f0:	893b      	ldrh	r3, [r7, #8]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]
 80039fa:	e021      	b.n	8003a40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039fc:	893b      	ldrh	r3, [r7, #8]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	6a39      	ldr	r1, [r7, #32]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f982 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d107      	bne.n	8003a32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e050      	b.n	8003ad8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a36:	893b      	ldrh	r3, [r7, #8]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	6a39      	ldr	r1, [r7, #32]
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f967 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d107      	bne.n	8003a68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e035      	b.n	8003ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f82b 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa2:	d103      	bne.n	8003aac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e013      	b.n	8003ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ab0:	897b      	ldrh	r3, [r7, #10]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	6a3a      	ldr	r2, [r7, #32]
 8003ac4:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <I2C_RequestMemoryRead+0x1cc>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f886 	bl	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	00010002 	.word	0x00010002

08003ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af4:	e048      	b.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d044      	beq.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fe fa59 	bl	8001fb4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d139      	bne.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	0c1b      	lsrs	r3, r3, #16
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d10d      	bne.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	43da      	mvns	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	e00c      	b.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d116      	bne.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e023      	b.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10d      	bne.n	8003bae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	e00c      	b.n	8003bc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d093      	beq.n	8003af6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be6:	e071      	b.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d123      	bne.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e067      	b.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d041      	beq.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fe f9b4 	bl	8001fb4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d136      	bne.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10c      	bne.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e00b      	b.n	8003c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e021      	b.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10c      	bne.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e00b      	b.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f af6d 	bne.w	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d24:	e034      	b.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f8e3 	bl	8003ef2 <I2C_IsAcknowledgeFailed>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e034      	b.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d028      	beq.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fe f939 	bl	8001fb4 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11d      	bne.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d016      	beq.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e007      	b.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d1c3      	bne.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db4:	e034      	b.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f89b 	bl	8003ef2 <I2C_IsAcknowledgeFailed>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e034      	b.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d028      	beq.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fe f8f1 	bl	8001fb4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11d      	bne.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d016      	beq.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d1c3      	bne.n	8003db6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e44:	e049      	b.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d119      	bne.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0210 	mvn.w	r2, #16
 8003e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e030      	b.n	8003eea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e88:	f7fe f894 	bl	8001fb4 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d11d      	bne.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d016      	beq.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e007      	b.n	8003eea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d1ae      	bne.n	8003e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f08:	d11b      	bne.n	8003f42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e272      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8087 	beq.w	800407e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f70:	4b92      	ldr	r3, [pc, #584]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d00c      	beq.n	8003f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f7c:	4b8f      	ldr	r3, [pc, #572]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d112      	bne.n	8003fae <HAL_RCC_OscConfig+0x5e>
 8003f88:	4b8c      	ldr	r3, [pc, #560]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d10b      	bne.n	8003fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f96:	4b89      	ldr	r3, [pc, #548]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d06c      	beq.n	800407c <HAL_RCC_OscConfig+0x12c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d168      	bne.n	800407c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e24c      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x76>
 8003fb8:	4b80      	ldr	r3, [pc, #512]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a7f      	ldr	r2, [pc, #508]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e02e      	b.n	8004024 <HAL_RCC_OscConfig+0xd4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x98>
 8003fce:	4b7b      	ldr	r3, [pc, #492]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a7a      	ldr	r2, [pc, #488]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b78      	ldr	r3, [pc, #480]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a77      	ldr	r2, [pc, #476]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e01d      	b.n	8004024 <HAL_RCC_OscConfig+0xd4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0xbc>
 8003ff2:	4b72      	ldr	r3, [pc, #456]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a71      	ldr	r2, [pc, #452]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6e      	ldr	r2, [pc, #440]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0xd4>
 800400c:	4b6b      	ldr	r3, [pc, #428]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6a      	ldr	r2, [pc, #424]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b68      	ldr	r3, [pc, #416]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a67      	ldr	r2, [pc, #412]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 800401e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fd ffc2 	bl	8001fb4 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7fd ffbe 	bl	8001fb4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e200      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	4b5d      	ldr	r3, [pc, #372]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0xe4>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fd ffae 	bl	8001fb4 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800405c:	f7fd ffaa 	bl	8001fb4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e1ec      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406e:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x10c>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d063      	beq.n	8004152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800408a:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004096:	4b49      	ldr	r3, [pc, #292]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d11c      	bne.n	80040dc <HAL_RCC_OscConfig+0x18c>
 80040a2:	4b46      	ldr	r3, [pc, #280]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d116      	bne.n	80040dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ae:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_RCC_OscConfig+0x176>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e1c0      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4939      	ldr	r1, [pc, #228]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	e03a      	b.n	8004152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e4:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <HAL_RCC_OscConfig+0x270>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fd ff63 	bl	8001fb4 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fd ff5f 	bl	8001fb4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e1a1      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004110:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4927      	ldr	r1, [pc, #156]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
 8004124:	e015      	b.n	8004152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <HAL_RCC_OscConfig+0x270>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fd ff42 	bl	8001fb4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004134:	f7fd ff3e 	bl	8001fb4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e180      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d03a      	beq.n	80041d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d019      	beq.n	800419a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004166:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004168:	2201      	movs	r2, #1
 800416a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416c:	f7fd ff22 	bl	8001fb4 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004174:	f7fd ff1e 	bl	8001fb4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e160      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_RCC_OscConfig+0x26c>)
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004192:	2001      	movs	r0, #1
 8004194:	f000 faba 	bl	800470c <RCC_Delay>
 8004198:	e01c      	b.n	80041d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419a:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a0:	f7fd ff08 	bl	8001fb4 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a6:	e00f      	b.n	80041c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a8:	f7fd ff04 	bl	8001fb4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d908      	bls.n	80041c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e146      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	42420000 	.word	0x42420000
 80041c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	4b92      	ldr	r3, [pc, #584]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e9      	bne.n	80041a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80a6 	beq.w	800432e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4a87      	ldr	r2, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	61d3      	str	r3, [r2, #28]
 80041fe:	4b85      	ldr	r3, [pc, #532]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420e:	4b82      	ldr	r3, [pc, #520]	; (8004418 <HAL_RCC_OscConfig+0x4c8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d118      	bne.n	800424c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421a:	4b7f      	ldr	r3, [pc, #508]	; (8004418 <HAL_RCC_OscConfig+0x4c8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7e      	ldr	r2, [pc, #504]	; (8004418 <HAL_RCC_OscConfig+0x4c8>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004226:	f7fd fec5 	bl	8001fb4 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fd fec1 	bl	8001fb4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	; 0x64
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e103      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	4b75      	ldr	r3, [pc, #468]	; (8004418 <HAL_RCC_OscConfig+0x4c8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x312>
 8004254:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4a6e      	ldr	r2, [pc, #440]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6213      	str	r3, [r2, #32]
 8004260:	e02d      	b.n	80042be <HAL_RCC_OscConfig+0x36e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x334>
 800426a:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a69      	ldr	r2, [pc, #420]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6213      	str	r3, [r2, #32]
 8004276:	4b67      	ldr	r3, [pc, #412]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4a66      	ldr	r2, [pc, #408]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6213      	str	r3, [r2, #32]
 8004282:	e01c      	b.n	80042be <HAL_RCC_OscConfig+0x36e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b05      	cmp	r3, #5
 800428a:	d10c      	bne.n	80042a6 <HAL_RCC_OscConfig+0x356>
 800428c:	4b61      	ldr	r3, [pc, #388]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	4a60      	ldr	r2, [pc, #384]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	6213      	str	r3, [r2, #32]
 8004298:	4b5e      	ldr	r3, [pc, #376]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	4a5d      	ldr	r2, [pc, #372]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6213      	str	r3, [r2, #32]
 80042a4:	e00b      	b.n	80042be <HAL_RCC_OscConfig+0x36e>
 80042a6:	4b5b      	ldr	r3, [pc, #364]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	4a5a      	ldr	r2, [pc, #360]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6213      	str	r3, [r2, #32]
 80042b2:	4b58      	ldr	r3, [pc, #352]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4a57      	ldr	r2, [pc, #348]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fd fe75 	bl	8001fb4 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fd fe71 	bl	8001fb4 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0b1      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCC_OscConfig+0x37e>
 80042f0:	e014      	b.n	800431c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fd fe5f 	bl	8001fb4 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fd fe5b 	bl	8001fb4 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e09b      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004310:	4b40      	ldr	r3, [pc, #256]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ee      	bne.n	80042fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004322:	4b3c      	ldr	r3, [pc, #240]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8087 	beq.w	8004446 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d061      	beq.n	8004408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d146      	bne.n	80043da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b33      	ldr	r3, [pc, #204]	; (800441c <HAL_RCC_OscConfig+0x4cc>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7fd fe2f 	bl	8001fb4 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435a:	f7fd fe2b 	bl	8001fb4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e06d      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436c:	4b29      	ldr	r3, [pc, #164]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d108      	bne.n	8004394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	4921      	ldr	r1, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004394:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a19      	ldr	r1, [r3, #32]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	430b      	orrs	r3, r1
 80043a6:	491b      	ldr	r1, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCC_OscConfig+0x4cc>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b2:	f7fd fdff 	bl	8001fb4 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ba:	f7fd fdfb 	bl	8001fb4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e03d      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x46a>
 80043d8:	e035      	b.n	8004446 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <HAL_RCC_OscConfig+0x4cc>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fd fde8 	bl	8001fb4 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fd fde4 	bl	8001fb4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e026      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x498>
 8004406:	e01e      	b.n	8004446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e019      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
 800441c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_OscConfig+0x500>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	429a      	cmp	r2, r3
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d001      	beq.n	8004446 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000

08004454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0d0      	b.n	800460a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004468:	4b6a      	ldr	r3, [pc, #424]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d910      	bls.n	8004498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b67      	ldr	r3, [pc, #412]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 0207 	bic.w	r2, r3, #7
 800447e:	4965      	ldr	r1, [pc, #404]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b63      	ldr	r3, [pc, #396]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0b8      	b.n	800460a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b0:	4b59      	ldr	r3, [pc, #356]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4a58      	ldr	r2, [pc, #352]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c8:	4b53      	ldr	r3, [pc, #332]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4a52      	ldr	r2, [pc, #328]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d4:	4b50      	ldr	r3, [pc, #320]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	494d      	ldr	r1, [pc, #308]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d040      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d115      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e07f      	b.n	800460a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b41      	ldr	r3, [pc, #260]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e073      	b.n	800460a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e06b      	b.n	800460a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b39      	ldr	r3, [pc, #228]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4936      	ldr	r1, [pc, #216]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7fd fd36 	bl	8001fb4 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fd fd32 	bl	8001fb4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e053      	b.n	800460a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d210      	bcs.n	80045a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 0207 	bic.w	r2, r3, #7
 800458a:	4922      	ldr	r1, [pc, #136]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e032      	b.n	800460a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4916      	ldr	r1, [pc, #88]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	490e      	ldr	r1, [pc, #56]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045e2:	f000 f821 	bl	8004628 <HAL_RCC_GetSysClockFreq>
 80045e6:	4602      	mov	r2, r0
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	490a      	ldr	r1, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f4:	5ccb      	ldrb	r3, [r1, r3]
 80045f6:	fa22 f303 	lsr.w	r3, r2, r3
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1cc>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1d0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fd fc94 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40022000 	.word	0x40022000
 8004618:	40021000 	.word	0x40021000
 800461c:	080057a4 	.word	0x080057a4
 8004620:	20000080 	.word	0x20000080
 8004624:	20000084 	.word	0x20000084

08004628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004642:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b04      	cmp	r3, #4
 8004650:	d002      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x30>
 8004652:	2b08      	cmp	r3, #8
 8004654:	d003      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x36>
 8004656:	e027      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800465a:	613b      	str	r3, [r7, #16]
      break;
 800465c:	e027      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	0c9b      	lsrs	r3, r3, #18
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004668:	5cd3      	ldrb	r3, [r2, r3]
 800466a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	0c5b      	lsrs	r3, r3, #17
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004682:	5cd3      	ldrb	r3, [r2, r3]
 8004684:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800468a:	fb03 f202 	mul.w	r2, r3, r2
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e004      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a0c      	ldr	r2, [pc, #48]	; (80046cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	613b      	str	r3, [r7, #16]
      break;
 80046a6:	e002      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80046aa:	613b      	str	r3, [r7, #16]
      break;
 80046ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ae:	693b      	ldr	r3, [r7, #16]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	007a1200 	.word	0x007a1200
 80046c4:	080057bc 	.word	0x080057bc
 80046c8:	080057cc 	.word	0x080057cc
 80046cc:	003d0900 	.word	0x003d0900

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	20000080 	.word	0x20000080

080046e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e8:	f7ff fff2 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	4903      	ldr	r1, [pc, #12]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	080057b4 	.word	0x080057b4

0800470c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <RCC_Delay+0x34>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <RCC_Delay+0x38>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0a5b      	lsrs	r3, r3, #9
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004728:	bf00      	nop
  }
  while (Delay --);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1e5a      	subs	r2, r3, #1
 800472e:	60fa      	str	r2, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f9      	bne.n	8004728 <RCC_Delay+0x1c>
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	20000080 	.word	0x20000080
 8004744:	10624dd3 	.word	0x10624dd3

08004748 <siprintf>:
 8004748:	b40e      	push	{r1, r2, r3}
 800474a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800474e:	b500      	push	{lr}
 8004750:	b09c      	sub	sp, #112	; 0x70
 8004752:	ab1d      	add	r3, sp, #116	; 0x74
 8004754:	9002      	str	r0, [sp, #8]
 8004756:	9006      	str	r0, [sp, #24]
 8004758:	9107      	str	r1, [sp, #28]
 800475a:	9104      	str	r1, [sp, #16]
 800475c:	4808      	ldr	r0, [pc, #32]	; (8004780 <siprintf+0x38>)
 800475e:	4909      	ldr	r1, [pc, #36]	; (8004784 <siprintf+0x3c>)
 8004760:	f853 2b04 	ldr.w	r2, [r3], #4
 8004764:	9105      	str	r1, [sp, #20]
 8004766:	6800      	ldr	r0, [r0, #0]
 8004768:	a902      	add	r1, sp, #8
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	f000 f98e 	bl	8004a8c <_svfiprintf_r>
 8004770:	2200      	movs	r2, #0
 8004772:	9b02      	ldr	r3, [sp, #8]
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	b01c      	add	sp, #112	; 0x70
 8004778:	f85d eb04 	ldr.w	lr, [sp], #4
 800477c:	b003      	add	sp, #12
 800477e:	4770      	bx	lr
 8004780:	200000d8 	.word	0x200000d8
 8004784:	ffff0208 	.word	0xffff0208

08004788 <memset>:
 8004788:	4603      	mov	r3, r0
 800478a:	4402      	add	r2, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	f803 1b01 	strb.w	r1, [r3], #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <__errno>:
 8004798:	4b01      	ldr	r3, [pc, #4]	; (80047a0 <__errno+0x8>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	200000d8 	.word	0x200000d8

080047a4 <__libc_init_array>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	2600      	movs	r6, #0
 80047a8:	4d0c      	ldr	r5, [pc, #48]	; (80047dc <__libc_init_array+0x38>)
 80047aa:	4c0d      	ldr	r4, [pc, #52]	; (80047e0 <__libc_init_array+0x3c>)
 80047ac:	1b64      	subs	r4, r4, r5
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	42a6      	cmp	r6, r4
 80047b2:	d109      	bne.n	80047c8 <__libc_init_array+0x24>
 80047b4:	f000 ffd6 	bl	8005764 <_init>
 80047b8:	2600      	movs	r6, #0
 80047ba:	4d0a      	ldr	r5, [pc, #40]	; (80047e4 <__libc_init_array+0x40>)
 80047bc:	4c0a      	ldr	r4, [pc, #40]	; (80047e8 <__libc_init_array+0x44>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	42a6      	cmp	r6, r4
 80047c4:	d105      	bne.n	80047d2 <__libc_init_array+0x2e>
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047cc:	4798      	blx	r3
 80047ce:	3601      	adds	r6, #1
 80047d0:	e7ee      	b.n	80047b0 <__libc_init_array+0xc>
 80047d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d6:	4798      	blx	r3
 80047d8:	3601      	adds	r6, #1
 80047da:	e7f2      	b.n	80047c2 <__libc_init_array+0x1e>
 80047dc:	08005878 	.word	0x08005878
 80047e0:	08005878 	.word	0x08005878
 80047e4:	08005878 	.word	0x08005878
 80047e8:	0800587c 	.word	0x0800587c

080047ec <__retarget_lock_acquire_recursive>:
 80047ec:	4770      	bx	lr

080047ee <__retarget_lock_release_recursive>:
 80047ee:	4770      	bx	lr

080047f0 <_free_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4605      	mov	r5, r0
 80047f4:	2900      	cmp	r1, #0
 80047f6:	d040      	beq.n	800487a <_free_r+0x8a>
 80047f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047fc:	1f0c      	subs	r4, r1, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	18e4      	addlt	r4, r4, r3
 8004804:	f000 f8dc 	bl	80049c0 <__malloc_lock>
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <_free_r+0x8c>)
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	b933      	cbnz	r3, 800481c <_free_r+0x2c>
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	6014      	str	r4, [r2, #0]
 8004812:	4628      	mov	r0, r5
 8004814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004818:	f000 b8d8 	b.w	80049cc <__malloc_unlock>
 800481c:	42a3      	cmp	r3, r4
 800481e:	d908      	bls.n	8004832 <_free_r+0x42>
 8004820:	6820      	ldr	r0, [r4, #0]
 8004822:	1821      	adds	r1, r4, r0
 8004824:	428b      	cmp	r3, r1
 8004826:	bf01      	itttt	eq
 8004828:	6819      	ldreq	r1, [r3, #0]
 800482a:	685b      	ldreq	r3, [r3, #4]
 800482c:	1809      	addeq	r1, r1, r0
 800482e:	6021      	streq	r1, [r4, #0]
 8004830:	e7ed      	b.n	800480e <_free_r+0x1e>
 8004832:	461a      	mov	r2, r3
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	b10b      	cbz	r3, 800483c <_free_r+0x4c>
 8004838:	42a3      	cmp	r3, r4
 800483a:	d9fa      	bls.n	8004832 <_free_r+0x42>
 800483c:	6811      	ldr	r1, [r2, #0]
 800483e:	1850      	adds	r0, r2, r1
 8004840:	42a0      	cmp	r0, r4
 8004842:	d10b      	bne.n	800485c <_free_r+0x6c>
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	4401      	add	r1, r0
 8004848:	1850      	adds	r0, r2, r1
 800484a:	4283      	cmp	r3, r0
 800484c:	6011      	str	r1, [r2, #0]
 800484e:	d1e0      	bne.n	8004812 <_free_r+0x22>
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4408      	add	r0, r1
 8004856:	6010      	str	r0, [r2, #0]
 8004858:	6053      	str	r3, [r2, #4]
 800485a:	e7da      	b.n	8004812 <_free_r+0x22>
 800485c:	d902      	bls.n	8004864 <_free_r+0x74>
 800485e:	230c      	movs	r3, #12
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	e7d6      	b.n	8004812 <_free_r+0x22>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	1821      	adds	r1, r4, r0
 8004868:	428b      	cmp	r3, r1
 800486a:	bf01      	itttt	eq
 800486c:	6819      	ldreq	r1, [r3, #0]
 800486e:	685b      	ldreq	r3, [r3, #4]
 8004870:	1809      	addeq	r1, r1, r0
 8004872:	6021      	streq	r1, [r4, #0]
 8004874:	6063      	str	r3, [r4, #4]
 8004876:	6054      	str	r4, [r2, #4]
 8004878:	e7cb      	b.n	8004812 <_free_r+0x22>
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	200002d8 	.word	0x200002d8

08004880 <sbrk_aligned>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	4e0e      	ldr	r6, [pc, #56]	; (80048bc <sbrk_aligned+0x3c>)
 8004884:	460c      	mov	r4, r1
 8004886:	6831      	ldr	r1, [r6, #0]
 8004888:	4605      	mov	r5, r0
 800488a:	b911      	cbnz	r1, 8004892 <sbrk_aligned+0x12>
 800488c:	f000 fbaa 	bl	8004fe4 <_sbrk_r>
 8004890:	6030      	str	r0, [r6, #0]
 8004892:	4621      	mov	r1, r4
 8004894:	4628      	mov	r0, r5
 8004896:	f000 fba5 	bl	8004fe4 <_sbrk_r>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	d00a      	beq.n	80048b4 <sbrk_aligned+0x34>
 800489e:	1cc4      	adds	r4, r0, #3
 80048a0:	f024 0403 	bic.w	r4, r4, #3
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d007      	beq.n	80048b8 <sbrk_aligned+0x38>
 80048a8:	1a21      	subs	r1, r4, r0
 80048aa:	4628      	mov	r0, r5
 80048ac:	f000 fb9a 	bl	8004fe4 <_sbrk_r>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d101      	bne.n	80048b8 <sbrk_aligned+0x38>
 80048b4:	f04f 34ff 	mov.w	r4, #4294967295
 80048b8:	4620      	mov	r0, r4
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	200002dc 	.word	0x200002dc

080048c0 <_malloc_r>:
 80048c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c4:	1ccd      	adds	r5, r1, #3
 80048c6:	f025 0503 	bic.w	r5, r5, #3
 80048ca:	3508      	adds	r5, #8
 80048cc:	2d0c      	cmp	r5, #12
 80048ce:	bf38      	it	cc
 80048d0:	250c      	movcc	r5, #12
 80048d2:	2d00      	cmp	r5, #0
 80048d4:	4607      	mov	r7, r0
 80048d6:	db01      	blt.n	80048dc <_malloc_r+0x1c>
 80048d8:	42a9      	cmp	r1, r5
 80048da:	d905      	bls.n	80048e8 <_malloc_r+0x28>
 80048dc:	230c      	movs	r3, #12
 80048de:	2600      	movs	r6, #0
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	4630      	mov	r0, r6
 80048e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049bc <_malloc_r+0xfc>
 80048ec:	f000 f868 	bl	80049c0 <__malloc_lock>
 80048f0:	f8d8 3000 	ldr.w	r3, [r8]
 80048f4:	461c      	mov	r4, r3
 80048f6:	bb5c      	cbnz	r4, 8004950 <_malloc_r+0x90>
 80048f8:	4629      	mov	r1, r5
 80048fa:	4638      	mov	r0, r7
 80048fc:	f7ff ffc0 	bl	8004880 <sbrk_aligned>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	4604      	mov	r4, r0
 8004904:	d155      	bne.n	80049b2 <_malloc_r+0xf2>
 8004906:	f8d8 4000 	ldr.w	r4, [r8]
 800490a:	4626      	mov	r6, r4
 800490c:	2e00      	cmp	r6, #0
 800490e:	d145      	bne.n	800499c <_malloc_r+0xdc>
 8004910:	2c00      	cmp	r4, #0
 8004912:	d048      	beq.n	80049a6 <_malloc_r+0xe6>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	4631      	mov	r1, r6
 8004918:	4638      	mov	r0, r7
 800491a:	eb04 0903 	add.w	r9, r4, r3
 800491e:	f000 fb61 	bl	8004fe4 <_sbrk_r>
 8004922:	4581      	cmp	r9, r0
 8004924:	d13f      	bne.n	80049a6 <_malloc_r+0xe6>
 8004926:	6821      	ldr	r1, [r4, #0]
 8004928:	4638      	mov	r0, r7
 800492a:	1a6d      	subs	r5, r5, r1
 800492c:	4629      	mov	r1, r5
 800492e:	f7ff ffa7 	bl	8004880 <sbrk_aligned>
 8004932:	3001      	adds	r0, #1
 8004934:	d037      	beq.n	80049a6 <_malloc_r+0xe6>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	442b      	add	r3, r5
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	f8d8 3000 	ldr.w	r3, [r8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d038      	beq.n	80049b6 <_malloc_r+0xf6>
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	42a2      	cmp	r2, r4
 8004948:	d12b      	bne.n	80049a2 <_malloc_r+0xe2>
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	e00f      	b.n	8004970 <_malloc_r+0xb0>
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	1b52      	subs	r2, r2, r5
 8004954:	d41f      	bmi.n	8004996 <_malloc_r+0xd6>
 8004956:	2a0b      	cmp	r2, #11
 8004958:	d917      	bls.n	800498a <_malloc_r+0xca>
 800495a:	1961      	adds	r1, r4, r5
 800495c:	42a3      	cmp	r3, r4
 800495e:	6025      	str	r5, [r4, #0]
 8004960:	bf18      	it	ne
 8004962:	6059      	strne	r1, [r3, #4]
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	bf08      	it	eq
 8004968:	f8c8 1000 	streq.w	r1, [r8]
 800496c:	5162      	str	r2, [r4, r5]
 800496e:	604b      	str	r3, [r1, #4]
 8004970:	4638      	mov	r0, r7
 8004972:	f104 060b 	add.w	r6, r4, #11
 8004976:	f000 f829 	bl	80049cc <__malloc_unlock>
 800497a:	f026 0607 	bic.w	r6, r6, #7
 800497e:	1d23      	adds	r3, r4, #4
 8004980:	1af2      	subs	r2, r6, r3
 8004982:	d0ae      	beq.n	80048e2 <_malloc_r+0x22>
 8004984:	1b9b      	subs	r3, r3, r6
 8004986:	50a3      	str	r3, [r4, r2]
 8004988:	e7ab      	b.n	80048e2 <_malloc_r+0x22>
 800498a:	42a3      	cmp	r3, r4
 800498c:	6862      	ldr	r2, [r4, #4]
 800498e:	d1dd      	bne.n	800494c <_malloc_r+0x8c>
 8004990:	f8c8 2000 	str.w	r2, [r8]
 8004994:	e7ec      	b.n	8004970 <_malloc_r+0xb0>
 8004996:	4623      	mov	r3, r4
 8004998:	6864      	ldr	r4, [r4, #4]
 800499a:	e7ac      	b.n	80048f6 <_malloc_r+0x36>
 800499c:	4634      	mov	r4, r6
 800499e:	6876      	ldr	r6, [r6, #4]
 80049a0:	e7b4      	b.n	800490c <_malloc_r+0x4c>
 80049a2:	4613      	mov	r3, r2
 80049a4:	e7cc      	b.n	8004940 <_malloc_r+0x80>
 80049a6:	230c      	movs	r3, #12
 80049a8:	4638      	mov	r0, r7
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	f000 f80e 	bl	80049cc <__malloc_unlock>
 80049b0:	e797      	b.n	80048e2 <_malloc_r+0x22>
 80049b2:	6025      	str	r5, [r4, #0]
 80049b4:	e7dc      	b.n	8004970 <_malloc_r+0xb0>
 80049b6:	605b      	str	r3, [r3, #4]
 80049b8:	deff      	udf	#255	; 0xff
 80049ba:	bf00      	nop
 80049bc:	200002d8 	.word	0x200002d8

080049c0 <__malloc_lock>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__malloc_lock+0x8>)
 80049c2:	f7ff bf13 	b.w	80047ec <__retarget_lock_acquire_recursive>
 80049c6:	bf00      	nop
 80049c8:	200002d4 	.word	0x200002d4

080049cc <__malloc_unlock>:
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <__malloc_unlock+0x8>)
 80049ce:	f7ff bf0e 	b.w	80047ee <__retarget_lock_release_recursive>
 80049d2:	bf00      	nop
 80049d4:	200002d4 	.word	0x200002d4

080049d8 <__ssputs_r>:
 80049d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	461f      	mov	r7, r3
 80049de:	688e      	ldr	r6, [r1, #8]
 80049e0:	4682      	mov	sl, r0
 80049e2:	42be      	cmp	r6, r7
 80049e4:	460c      	mov	r4, r1
 80049e6:	4690      	mov	r8, r2
 80049e8:	680b      	ldr	r3, [r1, #0]
 80049ea:	d82c      	bhi.n	8004a46 <__ssputs_r+0x6e>
 80049ec:	898a      	ldrh	r2, [r1, #12]
 80049ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049f2:	d026      	beq.n	8004a42 <__ssputs_r+0x6a>
 80049f4:	6965      	ldr	r5, [r4, #20]
 80049f6:	6909      	ldr	r1, [r1, #16]
 80049f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049fc:	eba3 0901 	sub.w	r9, r3, r1
 8004a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a04:	1c7b      	adds	r3, r7, #1
 8004a06:	444b      	add	r3, r9
 8004a08:	106d      	asrs	r5, r5, #1
 8004a0a:	429d      	cmp	r5, r3
 8004a0c:	bf38      	it	cc
 8004a0e:	461d      	movcc	r5, r3
 8004a10:	0553      	lsls	r3, r2, #21
 8004a12:	d527      	bpl.n	8004a64 <__ssputs_r+0x8c>
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7ff ff53 	bl	80048c0 <_malloc_r>
 8004a1a:	4606      	mov	r6, r0
 8004a1c:	b360      	cbz	r0, 8004a78 <__ssputs_r+0xa0>
 8004a1e:	464a      	mov	r2, r9
 8004a20:	6921      	ldr	r1, [r4, #16]
 8004a22:	f000 fafd 	bl	8005020 <memcpy>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a30:	81a3      	strh	r3, [r4, #12]
 8004a32:	6126      	str	r6, [r4, #16]
 8004a34:	444e      	add	r6, r9
 8004a36:	6026      	str	r6, [r4, #0]
 8004a38:	463e      	mov	r6, r7
 8004a3a:	6165      	str	r5, [r4, #20]
 8004a3c:	eba5 0509 	sub.w	r5, r5, r9
 8004a40:	60a5      	str	r5, [r4, #8]
 8004a42:	42be      	cmp	r6, r7
 8004a44:	d900      	bls.n	8004a48 <__ssputs_r+0x70>
 8004a46:	463e      	mov	r6, r7
 8004a48:	4632      	mov	r2, r6
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	6820      	ldr	r0, [r4, #0]
 8004a4e:	f000 faaf 	bl	8004fb0 <memmove>
 8004a52:	2000      	movs	r0, #0
 8004a54:	68a3      	ldr	r3, [r4, #8]
 8004a56:	1b9b      	subs	r3, r3, r6
 8004a58:	60a3      	str	r3, [r4, #8]
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	4433      	add	r3, r6
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a64:	462a      	mov	r2, r5
 8004a66:	f000 fae9 	bl	800503c <_realloc_r>
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d1e0      	bne.n	8004a32 <__ssputs_r+0x5a>
 8004a70:	4650      	mov	r0, sl
 8004a72:	6921      	ldr	r1, [r4, #16]
 8004a74:	f7ff febc 	bl	80047f0 <_free_r>
 8004a78:	230c      	movs	r3, #12
 8004a7a:	f8ca 3000 	str.w	r3, [sl]
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a88:	81a3      	strh	r3, [r4, #12]
 8004a8a:	e7e9      	b.n	8004a60 <__ssputs_r+0x88>

08004a8c <_svfiprintf_r>:
 8004a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a90:	4698      	mov	r8, r3
 8004a92:	898b      	ldrh	r3, [r1, #12]
 8004a94:	4607      	mov	r7, r0
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	460d      	mov	r5, r1
 8004a9a:	4614      	mov	r4, r2
 8004a9c:	b09d      	sub	sp, #116	; 0x74
 8004a9e:	d50e      	bpl.n	8004abe <_svfiprintf_r+0x32>
 8004aa0:	690b      	ldr	r3, [r1, #16]
 8004aa2:	b963      	cbnz	r3, 8004abe <_svfiprintf_r+0x32>
 8004aa4:	2140      	movs	r1, #64	; 0x40
 8004aa6:	f7ff ff0b 	bl	80048c0 <_malloc_r>
 8004aaa:	6028      	str	r0, [r5, #0]
 8004aac:	6128      	str	r0, [r5, #16]
 8004aae:	b920      	cbnz	r0, 8004aba <_svfiprintf_r+0x2e>
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	e0d0      	b.n	8004c5c <_svfiprintf_r+0x1d0>
 8004aba:	2340      	movs	r3, #64	; 0x40
 8004abc:	616b      	str	r3, [r5, #20]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ac8:	2330      	movs	r3, #48	; 0x30
 8004aca:	f04f 0901 	mov.w	r9, #1
 8004ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ad2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004c74 <_svfiprintf_r+0x1e8>
 8004ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ada:	4623      	mov	r3, r4
 8004adc:	469a      	mov	sl, r3
 8004ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae2:	b10a      	cbz	r2, 8004ae8 <_svfiprintf_r+0x5c>
 8004ae4:	2a25      	cmp	r2, #37	; 0x25
 8004ae6:	d1f9      	bne.n	8004adc <_svfiprintf_r+0x50>
 8004ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8004aec:	d00b      	beq.n	8004b06 <_svfiprintf_r+0x7a>
 8004aee:	465b      	mov	r3, fp
 8004af0:	4622      	mov	r2, r4
 8004af2:	4629      	mov	r1, r5
 8004af4:	4638      	mov	r0, r7
 8004af6:	f7ff ff6f 	bl	80049d8 <__ssputs_r>
 8004afa:	3001      	adds	r0, #1
 8004afc:	f000 80a9 	beq.w	8004c52 <_svfiprintf_r+0x1c6>
 8004b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b02:	445a      	add	r2, fp
 8004b04:	9209      	str	r2, [sp, #36]	; 0x24
 8004b06:	f89a 3000 	ldrb.w	r3, [sl]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80a1 	beq.w	8004c52 <_svfiprintf_r+0x1c6>
 8004b10:	2300      	movs	r3, #0
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b1a:	f10a 0a01 	add.w	sl, sl, #1
 8004b1e:	9304      	str	r3, [sp, #16]
 8004b20:	9307      	str	r3, [sp, #28]
 8004b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b26:	931a      	str	r3, [sp, #104]	; 0x68
 8004b28:	4654      	mov	r4, sl
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b30:	4850      	ldr	r0, [pc, #320]	; (8004c74 <_svfiprintf_r+0x1e8>)
 8004b32:	f000 fa67 	bl	8005004 <memchr>
 8004b36:	9a04      	ldr	r2, [sp, #16]
 8004b38:	b9d8      	cbnz	r0, 8004b72 <_svfiprintf_r+0xe6>
 8004b3a:	06d0      	lsls	r0, r2, #27
 8004b3c:	bf44      	itt	mi
 8004b3e:	2320      	movmi	r3, #32
 8004b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b44:	0711      	lsls	r1, r2, #28
 8004b46:	bf44      	itt	mi
 8004b48:	232b      	movmi	r3, #43	; 0x2b
 8004b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b52:	2b2a      	cmp	r3, #42	; 0x2a
 8004b54:	d015      	beq.n	8004b82 <_svfiprintf_r+0xf6>
 8004b56:	4654      	mov	r4, sl
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f04f 0c0a 	mov.w	ip, #10
 8004b5e:	9a07      	ldr	r2, [sp, #28]
 8004b60:	4621      	mov	r1, r4
 8004b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b66:	3b30      	subs	r3, #48	; 0x30
 8004b68:	2b09      	cmp	r3, #9
 8004b6a:	d94d      	bls.n	8004c08 <_svfiprintf_r+0x17c>
 8004b6c:	b1b0      	cbz	r0, 8004b9c <_svfiprintf_r+0x110>
 8004b6e:	9207      	str	r2, [sp, #28]
 8004b70:	e014      	b.n	8004b9c <_svfiprintf_r+0x110>
 8004b72:	eba0 0308 	sub.w	r3, r0, r8
 8004b76:	fa09 f303 	lsl.w	r3, r9, r3
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	46a2      	mov	sl, r4
 8004b7e:	9304      	str	r3, [sp, #16]
 8004b80:	e7d2      	b.n	8004b28 <_svfiprintf_r+0x9c>
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	1d19      	adds	r1, r3, #4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	9103      	str	r1, [sp, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfbb      	ittet	lt
 8004b8e:	425b      	neglt	r3, r3
 8004b90:	f042 0202 	orrlt.w	r2, r2, #2
 8004b94:	9307      	strge	r3, [sp, #28]
 8004b96:	9307      	strlt	r3, [sp, #28]
 8004b98:	bfb8      	it	lt
 8004b9a:	9204      	strlt	r2, [sp, #16]
 8004b9c:	7823      	ldrb	r3, [r4, #0]
 8004b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004ba0:	d10c      	bne.n	8004bbc <_svfiprintf_r+0x130>
 8004ba2:	7863      	ldrb	r3, [r4, #1]
 8004ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba6:	d134      	bne.n	8004c12 <_svfiprintf_r+0x186>
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	3402      	adds	r4, #2
 8004bac:	1d1a      	adds	r2, r3, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	9203      	str	r2, [sp, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfb8      	it	lt
 8004bb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bba:	9305      	str	r3, [sp, #20]
 8004bbc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004c78 <_svfiprintf_r+0x1ec>
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	4650      	mov	r0, sl
 8004bc4:	7821      	ldrb	r1, [r4, #0]
 8004bc6:	f000 fa1d 	bl	8005004 <memchr>
 8004bca:	b138      	cbz	r0, 8004bdc <_svfiprintf_r+0x150>
 8004bcc:	2240      	movs	r2, #64	; 0x40
 8004bce:	9b04      	ldr	r3, [sp, #16]
 8004bd0:	eba0 000a 	sub.w	r0, r0, sl
 8004bd4:	4082      	lsls	r2, r0
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	3401      	adds	r4, #1
 8004bda:	9304      	str	r3, [sp, #16]
 8004bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be0:	2206      	movs	r2, #6
 8004be2:	4826      	ldr	r0, [pc, #152]	; (8004c7c <_svfiprintf_r+0x1f0>)
 8004be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004be8:	f000 fa0c 	bl	8005004 <memchr>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d038      	beq.n	8004c62 <_svfiprintf_r+0x1d6>
 8004bf0:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <_svfiprintf_r+0x1f4>)
 8004bf2:	bb1b      	cbnz	r3, 8004c3c <_svfiprintf_r+0x1b0>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	3307      	adds	r3, #7
 8004bf8:	f023 0307 	bic.w	r3, r3, #7
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	9303      	str	r3, [sp, #12]
 8004c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c02:	4433      	add	r3, r6
 8004c04:	9309      	str	r3, [sp, #36]	; 0x24
 8004c06:	e768      	b.n	8004ada <_svfiprintf_r+0x4e>
 8004c08:	460c      	mov	r4, r1
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c10:	e7a6      	b.n	8004b60 <_svfiprintf_r+0xd4>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f04f 0c0a 	mov.w	ip, #10
 8004c18:	4619      	mov	r1, r3
 8004c1a:	3401      	adds	r4, #1
 8004c1c:	9305      	str	r3, [sp, #20]
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c24:	3a30      	subs	r2, #48	; 0x30
 8004c26:	2a09      	cmp	r2, #9
 8004c28:	d903      	bls.n	8004c32 <_svfiprintf_r+0x1a6>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0c6      	beq.n	8004bbc <_svfiprintf_r+0x130>
 8004c2e:	9105      	str	r1, [sp, #20]
 8004c30:	e7c4      	b.n	8004bbc <_svfiprintf_r+0x130>
 8004c32:	4604      	mov	r4, r0
 8004c34:	2301      	movs	r3, #1
 8004c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c3a:	e7f0      	b.n	8004c1e <_svfiprintf_r+0x192>
 8004c3c:	ab03      	add	r3, sp, #12
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	462a      	mov	r2, r5
 8004c42:	4638      	mov	r0, r7
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <_svfiprintf_r+0x1f8>)
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	f3af 8000 	nop.w
 8004c4c:	1c42      	adds	r2, r0, #1
 8004c4e:	4606      	mov	r6, r0
 8004c50:	d1d6      	bne.n	8004c00 <_svfiprintf_r+0x174>
 8004c52:	89ab      	ldrh	r3, [r5, #12]
 8004c54:	065b      	lsls	r3, r3, #25
 8004c56:	f53f af2d 	bmi.w	8004ab4 <_svfiprintf_r+0x28>
 8004c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c5c:	b01d      	add	sp, #116	; 0x74
 8004c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c62:	ab03      	add	r3, sp, #12
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	462a      	mov	r2, r5
 8004c68:	4638      	mov	r0, r7
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <_svfiprintf_r+0x1f8>)
 8004c6c:	a904      	add	r1, sp, #16
 8004c6e:	f000 f87d 	bl	8004d6c <_printf_i>
 8004c72:	e7eb      	b.n	8004c4c <_svfiprintf_r+0x1c0>
 8004c74:	080057ce 	.word	0x080057ce
 8004c78:	080057d4 	.word	0x080057d4
 8004c7c:	080057d8 	.word	0x080057d8
 8004c80:	00000000 	.word	0x00000000
 8004c84:	080049d9 	.word	0x080049d9

08004c88 <_printf_common>:
 8004c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	4699      	mov	r9, r3
 8004c90:	688a      	ldr	r2, [r1, #8]
 8004c92:	690b      	ldr	r3, [r1, #16]
 8004c94:	4607      	mov	r7, r0
 8004c96:	4293      	cmp	r3, r2
 8004c98:	bfb8      	it	lt
 8004c9a:	4613      	movlt	r3, r2
 8004c9c:	6033      	str	r3, [r6, #0]
 8004c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ca8:	b10a      	cbz	r2, 8004cae <_printf_common+0x26>
 8004caa:	3301      	adds	r3, #1
 8004cac:	6033      	str	r3, [r6, #0]
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	0699      	lsls	r1, r3, #26
 8004cb2:	bf42      	ittt	mi
 8004cb4:	6833      	ldrmi	r3, [r6, #0]
 8004cb6:	3302      	addmi	r3, #2
 8004cb8:	6033      	strmi	r3, [r6, #0]
 8004cba:	6825      	ldr	r5, [r4, #0]
 8004cbc:	f015 0506 	ands.w	r5, r5, #6
 8004cc0:	d106      	bne.n	8004cd0 <_printf_common+0x48>
 8004cc2:	f104 0a19 	add.w	sl, r4, #25
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	6832      	ldr	r2, [r6, #0]
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	42ab      	cmp	r3, r5
 8004cce:	dc2b      	bgt.n	8004d28 <_printf_common+0xa0>
 8004cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd4:	1e13      	subs	r3, r2, #0
 8004cd6:	6822      	ldr	r2, [r4, #0]
 8004cd8:	bf18      	it	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	0692      	lsls	r2, r2, #26
 8004cde:	d430      	bmi.n	8004d42 <_printf_common+0xba>
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce8:	47c0      	blx	r8
 8004cea:	3001      	adds	r0, #1
 8004cec:	d023      	beq.n	8004d36 <_printf_common+0xae>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	f003 0306 	and.w	r3, r3, #6
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	bf14      	ite	ne
 8004cfa:	2500      	movne	r5, #0
 8004cfc:	6833      	ldreq	r3, [r6, #0]
 8004cfe:	f04f 0600 	mov.w	r6, #0
 8004d02:	bf08      	it	eq
 8004d04:	68e5      	ldreq	r5, [r4, #12]
 8004d06:	f104 041a 	add.w	r4, r4, #26
 8004d0a:	bf08      	it	eq
 8004d0c:	1aed      	subeq	r5, r5, r3
 8004d0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d12:	bf08      	it	eq
 8004d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	bfc4      	itt	gt
 8004d1c:	1a9b      	subgt	r3, r3, r2
 8004d1e:	18ed      	addgt	r5, r5, r3
 8004d20:	42b5      	cmp	r5, r6
 8004d22:	d11a      	bne.n	8004d5a <_printf_common+0xd2>
 8004d24:	2000      	movs	r0, #0
 8004d26:	e008      	b.n	8004d3a <_printf_common+0xb2>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	4652      	mov	r2, sl
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	4638      	mov	r0, r7
 8004d30:	47c0      	blx	r8
 8004d32:	3001      	adds	r0, #1
 8004d34:	d103      	bne.n	8004d3e <_printf_common+0xb6>
 8004d36:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3e:	3501      	adds	r5, #1
 8004d40:	e7c1      	b.n	8004cc6 <_printf_common+0x3e>
 8004d42:	2030      	movs	r0, #48	; 0x30
 8004d44:	18e1      	adds	r1, r4, r3
 8004d46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d50:	4422      	add	r2, r4
 8004d52:	3302      	adds	r3, #2
 8004d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d58:	e7c2      	b.n	8004ce0 <_printf_common+0x58>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4638      	mov	r0, r7
 8004d62:	47c0      	blx	r8
 8004d64:	3001      	adds	r0, #1
 8004d66:	d0e6      	beq.n	8004d36 <_printf_common+0xae>
 8004d68:	3601      	adds	r6, #1
 8004d6a:	e7d9      	b.n	8004d20 <_printf_common+0x98>

08004d6c <_printf_i>:
 8004d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	7e0f      	ldrb	r7, [r1, #24]
 8004d72:	4691      	mov	r9, r2
 8004d74:	2f78      	cmp	r7, #120	; 0x78
 8004d76:	4680      	mov	r8, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	469a      	mov	sl, r3
 8004d7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d82:	d807      	bhi.n	8004d94 <_printf_i+0x28>
 8004d84:	2f62      	cmp	r7, #98	; 0x62
 8004d86:	d80a      	bhi.n	8004d9e <_printf_i+0x32>
 8004d88:	2f00      	cmp	r7, #0
 8004d8a:	f000 80d5 	beq.w	8004f38 <_printf_i+0x1cc>
 8004d8e:	2f58      	cmp	r7, #88	; 0x58
 8004d90:	f000 80c1 	beq.w	8004f16 <_printf_i+0x1aa>
 8004d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d9c:	e03a      	b.n	8004e14 <_printf_i+0xa8>
 8004d9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004da2:	2b15      	cmp	r3, #21
 8004da4:	d8f6      	bhi.n	8004d94 <_printf_i+0x28>
 8004da6:	a101      	add	r1, pc, #4	; (adr r1, 8004dac <_printf_i+0x40>)
 8004da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004e19 	.word	0x08004e19
 8004db4:	08004d95 	.word	0x08004d95
 8004db8:	08004d95 	.word	0x08004d95
 8004dbc:	08004d95 	.word	0x08004d95
 8004dc0:	08004d95 	.word	0x08004d95
 8004dc4:	08004e19 	.word	0x08004e19
 8004dc8:	08004d95 	.word	0x08004d95
 8004dcc:	08004d95 	.word	0x08004d95
 8004dd0:	08004d95 	.word	0x08004d95
 8004dd4:	08004d95 	.word	0x08004d95
 8004dd8:	08004f1f 	.word	0x08004f1f
 8004ddc:	08004e45 	.word	0x08004e45
 8004de0:	08004ed9 	.word	0x08004ed9
 8004de4:	08004d95 	.word	0x08004d95
 8004de8:	08004d95 	.word	0x08004d95
 8004dec:	08004f41 	.word	0x08004f41
 8004df0:	08004d95 	.word	0x08004d95
 8004df4:	08004e45 	.word	0x08004e45
 8004df8:	08004d95 	.word	0x08004d95
 8004dfc:	08004d95 	.word	0x08004d95
 8004e00:	08004ee1 	.word	0x08004ee1
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	1d1a      	adds	r2, r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	602a      	str	r2, [r5, #0]
 8004e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0a0      	b.n	8004f5a <_printf_i+0x1ee>
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	0607      	lsls	r7, r0, #24
 8004e1e:	f103 0104 	add.w	r1, r3, #4
 8004e22:	6029      	str	r1, [r5, #0]
 8004e24:	d501      	bpl.n	8004e2a <_printf_i+0xbe>
 8004e26:	681e      	ldr	r6, [r3, #0]
 8004e28:	e003      	b.n	8004e32 <_printf_i+0xc6>
 8004e2a:	0646      	lsls	r6, r0, #25
 8004e2c:	d5fb      	bpl.n	8004e26 <_printf_i+0xba>
 8004e2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	da03      	bge.n	8004e3e <_printf_i+0xd2>
 8004e36:	232d      	movs	r3, #45	; 0x2d
 8004e38:	4276      	negs	r6, r6
 8004e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e3e:	230a      	movs	r3, #10
 8004e40:	4859      	ldr	r0, [pc, #356]	; (8004fa8 <_printf_i+0x23c>)
 8004e42:	e012      	b.n	8004e6a <_printf_i+0xfe>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	6820      	ldr	r0, [r4, #0]
 8004e48:	1d19      	adds	r1, r3, #4
 8004e4a:	6029      	str	r1, [r5, #0]
 8004e4c:	0605      	lsls	r5, r0, #24
 8004e4e:	d501      	bpl.n	8004e54 <_printf_i+0xe8>
 8004e50:	681e      	ldr	r6, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <_printf_i+0xee>
 8004e54:	0641      	lsls	r1, r0, #25
 8004e56:	d5fb      	bpl.n	8004e50 <_printf_i+0xe4>
 8004e58:	881e      	ldrh	r6, [r3, #0]
 8004e5a:	2f6f      	cmp	r7, #111	; 0x6f
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2308      	moveq	r3, #8
 8004e60:	230a      	movne	r3, #10
 8004e62:	4851      	ldr	r0, [pc, #324]	; (8004fa8 <_printf_i+0x23c>)
 8004e64:	2100      	movs	r1, #0
 8004e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e6a:	6865      	ldr	r5, [r4, #4]
 8004e6c:	2d00      	cmp	r5, #0
 8004e6e:	bfa8      	it	ge
 8004e70:	6821      	ldrge	r1, [r4, #0]
 8004e72:	60a5      	str	r5, [r4, #8]
 8004e74:	bfa4      	itt	ge
 8004e76:	f021 0104 	bicge.w	r1, r1, #4
 8004e7a:	6021      	strge	r1, [r4, #0]
 8004e7c:	b90e      	cbnz	r6, 8004e82 <_printf_i+0x116>
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	d04b      	beq.n	8004f1a <_printf_i+0x1ae>
 8004e82:	4615      	mov	r5, r2
 8004e84:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e88:	fb03 6711 	mls	r7, r3, r1, r6
 8004e8c:	5dc7      	ldrb	r7, [r0, r7]
 8004e8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e92:	4637      	mov	r7, r6
 8004e94:	42bb      	cmp	r3, r7
 8004e96:	460e      	mov	r6, r1
 8004e98:	d9f4      	bls.n	8004e84 <_printf_i+0x118>
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d10b      	bne.n	8004eb6 <_printf_i+0x14a>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	07de      	lsls	r6, r3, #31
 8004ea2:	d508      	bpl.n	8004eb6 <_printf_i+0x14a>
 8004ea4:	6923      	ldr	r3, [r4, #16]
 8004ea6:	6861      	ldr	r1, [r4, #4]
 8004ea8:	4299      	cmp	r1, r3
 8004eaa:	bfde      	ittt	le
 8004eac:	2330      	movle	r3, #48	; 0x30
 8004eae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eb6:	1b52      	subs	r2, r2, r5
 8004eb8:	6122      	str	r2, [r4, #16]
 8004eba:	464b      	mov	r3, r9
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	f8cd a000 	str.w	sl, [sp]
 8004ec4:	aa03      	add	r2, sp, #12
 8004ec6:	f7ff fedf 	bl	8004c88 <_printf_common>
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d14a      	bne.n	8004f64 <_printf_i+0x1f8>
 8004ece:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed2:	b004      	add	sp, #16
 8004ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	f043 0320 	orr.w	r3, r3, #32
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	2778      	movs	r7, #120	; 0x78
 8004ee2:	4832      	ldr	r0, [pc, #200]	; (8004fac <_printf_i+0x240>)
 8004ee4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	6829      	ldr	r1, [r5, #0]
 8004eec:	061f      	lsls	r7, r3, #24
 8004eee:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ef2:	d402      	bmi.n	8004efa <_printf_i+0x18e>
 8004ef4:	065f      	lsls	r7, r3, #25
 8004ef6:	bf48      	it	mi
 8004ef8:	b2b6      	uxthmi	r6, r6
 8004efa:	07df      	lsls	r7, r3, #31
 8004efc:	bf48      	it	mi
 8004efe:	f043 0320 	orrmi.w	r3, r3, #32
 8004f02:	6029      	str	r1, [r5, #0]
 8004f04:	bf48      	it	mi
 8004f06:	6023      	strmi	r3, [r4, #0]
 8004f08:	b91e      	cbnz	r6, 8004f12 <_printf_i+0x1a6>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	f023 0320 	bic.w	r3, r3, #32
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	2310      	movs	r3, #16
 8004f14:	e7a6      	b.n	8004e64 <_printf_i+0xf8>
 8004f16:	4824      	ldr	r0, [pc, #144]	; (8004fa8 <_printf_i+0x23c>)
 8004f18:	e7e4      	b.n	8004ee4 <_printf_i+0x178>
 8004f1a:	4615      	mov	r5, r2
 8004f1c:	e7bd      	b.n	8004e9a <_printf_i+0x12e>
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	6826      	ldr	r6, [r4, #0]
 8004f22:	1d18      	adds	r0, r3, #4
 8004f24:	6961      	ldr	r1, [r4, #20]
 8004f26:	6028      	str	r0, [r5, #0]
 8004f28:	0635      	lsls	r5, r6, #24
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	d501      	bpl.n	8004f32 <_printf_i+0x1c6>
 8004f2e:	6019      	str	r1, [r3, #0]
 8004f30:	e002      	b.n	8004f38 <_printf_i+0x1cc>
 8004f32:	0670      	lsls	r0, r6, #25
 8004f34:	d5fb      	bpl.n	8004f2e <_printf_i+0x1c2>
 8004f36:	8019      	strh	r1, [r3, #0]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4615      	mov	r5, r2
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	e7bc      	b.n	8004eba <_printf_i+0x14e>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	2100      	movs	r1, #0
 8004f44:	1d1a      	adds	r2, r3, #4
 8004f46:	602a      	str	r2, [r5, #0]
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f000 f859 	bl	8005004 <memchr>
 8004f52:	b108      	cbz	r0, 8004f58 <_printf_i+0x1ec>
 8004f54:	1b40      	subs	r0, r0, r5
 8004f56:	6060      	str	r0, [r4, #4]
 8004f58:	6863      	ldr	r3, [r4, #4]
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f62:	e7aa      	b.n	8004eba <_printf_i+0x14e>
 8004f64:	462a      	mov	r2, r5
 8004f66:	4649      	mov	r1, r9
 8004f68:	4640      	mov	r0, r8
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	47d0      	blx	sl
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d0ad      	beq.n	8004ece <_printf_i+0x162>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	079b      	lsls	r3, r3, #30
 8004f76:	d413      	bmi.n	8004fa0 <_printf_i+0x234>
 8004f78:	68e0      	ldr	r0, [r4, #12]
 8004f7a:	9b03      	ldr	r3, [sp, #12]
 8004f7c:	4298      	cmp	r0, r3
 8004f7e:	bfb8      	it	lt
 8004f80:	4618      	movlt	r0, r3
 8004f82:	e7a6      	b.n	8004ed2 <_printf_i+0x166>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4632      	mov	r2, r6
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	47d0      	blx	sl
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d09d      	beq.n	8004ece <_printf_i+0x162>
 8004f92:	3501      	adds	r5, #1
 8004f94:	68e3      	ldr	r3, [r4, #12]
 8004f96:	9903      	ldr	r1, [sp, #12]
 8004f98:	1a5b      	subs	r3, r3, r1
 8004f9a:	42ab      	cmp	r3, r5
 8004f9c:	dcf2      	bgt.n	8004f84 <_printf_i+0x218>
 8004f9e:	e7eb      	b.n	8004f78 <_printf_i+0x20c>
 8004fa0:	2500      	movs	r5, #0
 8004fa2:	f104 0619 	add.w	r6, r4, #25
 8004fa6:	e7f5      	b.n	8004f94 <_printf_i+0x228>
 8004fa8:	080057df 	.word	0x080057df
 8004fac:	080057f0 	.word	0x080057f0

08004fb0 <memmove>:
 8004fb0:	4288      	cmp	r0, r1
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	eb01 0402 	add.w	r4, r1, r2
 8004fb8:	d902      	bls.n	8004fc0 <memmove+0x10>
 8004fba:	4284      	cmp	r4, r0
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	d807      	bhi.n	8004fd0 <memmove+0x20>
 8004fc0:	1e43      	subs	r3, r0, #1
 8004fc2:	42a1      	cmp	r1, r4
 8004fc4:	d008      	beq.n	8004fd8 <memmove+0x28>
 8004fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fce:	e7f8      	b.n	8004fc2 <memmove+0x12>
 8004fd0:	4601      	mov	r1, r0
 8004fd2:	4402      	add	r2, r0
 8004fd4:	428a      	cmp	r2, r1
 8004fd6:	d100      	bne.n	8004fda <memmove+0x2a>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fe2:	e7f7      	b.n	8004fd4 <memmove+0x24>

08004fe4 <_sbrk_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4d05      	ldr	r5, [pc, #20]	; (8005000 <_sbrk_r+0x1c>)
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fc faae 	bl	8001550 <_sbrk>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_sbrk_r+0x1a>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_sbrk_r+0x1a>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	200002d0 	.word	0x200002d0

08005004 <memchr>:
 8005004:	4603      	mov	r3, r0
 8005006:	b510      	push	{r4, lr}
 8005008:	b2c9      	uxtb	r1, r1
 800500a:	4402      	add	r2, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	4618      	mov	r0, r3
 8005010:	d101      	bne.n	8005016 <memchr+0x12>
 8005012:	2000      	movs	r0, #0
 8005014:	e003      	b.n	800501e <memchr+0x1a>
 8005016:	7804      	ldrb	r4, [r0, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	428c      	cmp	r4, r1
 800501c:	d1f6      	bne.n	800500c <memchr+0x8>
 800501e:	bd10      	pop	{r4, pc}

08005020 <memcpy>:
 8005020:	440a      	add	r2, r1
 8005022:	4291      	cmp	r1, r2
 8005024:	f100 33ff 	add.w	r3, r0, #4294967295
 8005028:	d100      	bne.n	800502c <memcpy+0xc>
 800502a:	4770      	bx	lr
 800502c:	b510      	push	{r4, lr}
 800502e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005032:	4291      	cmp	r1, r2
 8005034:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005038:	d1f9      	bne.n	800502e <memcpy+0xe>
 800503a:	bd10      	pop	{r4, pc}

0800503c <_realloc_r>:
 800503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005040:	4680      	mov	r8, r0
 8005042:	4614      	mov	r4, r2
 8005044:	460e      	mov	r6, r1
 8005046:	b921      	cbnz	r1, 8005052 <_realloc_r+0x16>
 8005048:	4611      	mov	r1, r2
 800504a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800504e:	f7ff bc37 	b.w	80048c0 <_malloc_r>
 8005052:	b92a      	cbnz	r2, 8005060 <_realloc_r+0x24>
 8005054:	f7ff fbcc 	bl	80047f0 <_free_r>
 8005058:	4625      	mov	r5, r4
 800505a:	4628      	mov	r0, r5
 800505c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005060:	f000 f81b 	bl	800509a <_malloc_usable_size_r>
 8005064:	4284      	cmp	r4, r0
 8005066:	4607      	mov	r7, r0
 8005068:	d802      	bhi.n	8005070 <_realloc_r+0x34>
 800506a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800506e:	d812      	bhi.n	8005096 <_realloc_r+0x5a>
 8005070:	4621      	mov	r1, r4
 8005072:	4640      	mov	r0, r8
 8005074:	f7ff fc24 	bl	80048c0 <_malloc_r>
 8005078:	4605      	mov	r5, r0
 800507a:	2800      	cmp	r0, #0
 800507c:	d0ed      	beq.n	800505a <_realloc_r+0x1e>
 800507e:	42bc      	cmp	r4, r7
 8005080:	4622      	mov	r2, r4
 8005082:	4631      	mov	r1, r6
 8005084:	bf28      	it	cs
 8005086:	463a      	movcs	r2, r7
 8005088:	f7ff ffca 	bl	8005020 <memcpy>
 800508c:	4631      	mov	r1, r6
 800508e:	4640      	mov	r0, r8
 8005090:	f7ff fbae 	bl	80047f0 <_free_r>
 8005094:	e7e1      	b.n	800505a <_realloc_r+0x1e>
 8005096:	4635      	mov	r5, r6
 8005098:	e7df      	b.n	800505a <_realloc_r+0x1e>

0800509a <_malloc_usable_size_r>:
 800509a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800509e:	1f18      	subs	r0, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bfbc      	itt	lt
 80050a4:	580b      	ldrlt	r3, [r1, r0]
 80050a6:	18c0      	addlt	r0, r0, r3
 80050a8:	4770      	bx	lr

080050aa <atan2>:
 80050aa:	f000 b8fd 	b.w	80052a8 <__ieee754_atan2>

080050ae <sqrt>:
 80050ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b0:	4606      	mov	r6, r0
 80050b2:	460f      	mov	r7, r1
 80050b4:	f000 f820 	bl	80050f8 <__ieee754_sqrt>
 80050b8:	4632      	mov	r2, r6
 80050ba:	4604      	mov	r4, r0
 80050bc:	460d      	mov	r5, r1
 80050be:	463b      	mov	r3, r7
 80050c0:	4630      	mov	r0, r6
 80050c2:	4639      	mov	r1, r7
 80050c4:	f7fb fca2 	bl	8000a0c <__aeabi_dcmpun>
 80050c8:	b990      	cbnz	r0, 80050f0 <sqrt+0x42>
 80050ca:	2200      	movs	r2, #0
 80050cc:	2300      	movs	r3, #0
 80050ce:	4630      	mov	r0, r6
 80050d0:	4639      	mov	r1, r7
 80050d2:	f7fb fc73 	bl	80009bc <__aeabi_dcmplt>
 80050d6:	b158      	cbz	r0, 80050f0 <sqrt+0x42>
 80050d8:	f7ff fb5e 	bl	8004798 <__errno>
 80050dc:	2321      	movs	r3, #33	; 0x21
 80050de:	2200      	movs	r2, #0
 80050e0:	6003      	str	r3, [r0, #0]
 80050e2:	2300      	movs	r3, #0
 80050e4:	4610      	mov	r0, r2
 80050e6:	4619      	mov	r1, r3
 80050e8:	f7fb fb20 	bl	800072c <__aeabi_ddiv>
 80050ec:	4604      	mov	r4, r0
 80050ee:	460d      	mov	r5, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050f8 <__ieee754_sqrt>:
 80050f8:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800529c <__ieee754_sqrt+0x1a4>
 80050fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005100:	ea3c 0c01 	bics.w	ip, ip, r1
 8005104:	460b      	mov	r3, r1
 8005106:	4606      	mov	r6, r0
 8005108:	460d      	mov	r5, r1
 800510a:	460a      	mov	r2, r1
 800510c:	4604      	mov	r4, r0
 800510e:	d10e      	bne.n	800512e <__ieee754_sqrt+0x36>
 8005110:	4602      	mov	r2, r0
 8005112:	f7fb f9e1 	bl	80004d8 <__aeabi_dmul>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4630      	mov	r0, r6
 800511c:	4629      	mov	r1, r5
 800511e:	f7fb f825 	bl	800016c <__adddf3>
 8005122:	4606      	mov	r6, r0
 8005124:	460d      	mov	r5, r1
 8005126:	4630      	mov	r0, r6
 8005128:	4629      	mov	r1, r5
 800512a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512e:	2900      	cmp	r1, #0
 8005130:	dc0d      	bgt.n	800514e <__ieee754_sqrt+0x56>
 8005132:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005136:	ea5c 0c00 	orrs.w	ip, ip, r0
 800513a:	d0f4      	beq.n	8005126 <__ieee754_sqrt+0x2e>
 800513c:	b139      	cbz	r1, 800514e <__ieee754_sqrt+0x56>
 800513e:	4602      	mov	r2, r0
 8005140:	f7fb f812 	bl	8000168 <__aeabi_dsub>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	f7fb faf0 	bl	800072c <__aeabi_ddiv>
 800514c:	e7e9      	b.n	8005122 <__ieee754_sqrt+0x2a>
 800514e:	1512      	asrs	r2, r2, #20
 8005150:	f000 8089 	beq.w	8005266 <__ieee754_sqrt+0x16e>
 8005154:	2500      	movs	r5, #0
 8005156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800515a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800515e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005162:	07d2      	lsls	r2, r2, #31
 8005164:	bf5c      	itt	pl
 8005166:	005b      	lslpl	r3, r3, #1
 8005168:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800516c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005170:	bf58      	it	pl
 8005172:	0064      	lslpl	r4, r4, #1
 8005174:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005178:	0062      	lsls	r2, r4, #1
 800517a:	2016      	movs	r0, #22
 800517c:	4629      	mov	r1, r5
 800517e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8005182:	1076      	asrs	r6, r6, #1
 8005184:	190f      	adds	r7, r1, r4
 8005186:	429f      	cmp	r7, r3
 8005188:	bfde      	ittt	le
 800518a:	1bdb      	suble	r3, r3, r7
 800518c:	1939      	addle	r1, r7, r4
 800518e:	192d      	addle	r5, r5, r4
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	3801      	subs	r0, #1
 8005194:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005198:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800519c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80051a0:	d1f0      	bne.n	8005184 <__ieee754_sqrt+0x8c>
 80051a2:	4604      	mov	r4, r0
 80051a4:	2720      	movs	r7, #32
 80051a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80051aa:	428b      	cmp	r3, r1
 80051ac:	eb0c 0e00 	add.w	lr, ip, r0
 80051b0:	dc02      	bgt.n	80051b8 <__ieee754_sqrt+0xc0>
 80051b2:	d113      	bne.n	80051dc <__ieee754_sqrt+0xe4>
 80051b4:	4596      	cmp	lr, r2
 80051b6:	d811      	bhi.n	80051dc <__ieee754_sqrt+0xe4>
 80051b8:	f1be 0f00 	cmp.w	lr, #0
 80051bc:	eb0e 000c 	add.w	r0, lr, ip
 80051c0:	da56      	bge.n	8005270 <__ieee754_sqrt+0x178>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	db54      	blt.n	8005270 <__ieee754_sqrt+0x178>
 80051c6:	f101 0801 	add.w	r8, r1, #1
 80051ca:	1a5b      	subs	r3, r3, r1
 80051cc:	4641      	mov	r1, r8
 80051ce:	4596      	cmp	lr, r2
 80051d0:	bf88      	it	hi
 80051d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80051d6:	eba2 020e 	sub.w	r2, r2, lr
 80051da:	4464      	add	r4, ip
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	3f01      	subs	r7, #1
 80051e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80051e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80051e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80051ec:	d1dd      	bne.n	80051aa <__ieee754_sqrt+0xb2>
 80051ee:	4313      	orrs	r3, r2
 80051f0:	d01b      	beq.n	800522a <__ieee754_sqrt+0x132>
 80051f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80052a0 <__ieee754_sqrt+0x1a8>
 80051f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80052a4 <__ieee754_sqrt+0x1ac>
 80051fa:	e9da 0100 	ldrd	r0, r1, [sl]
 80051fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8005202:	f7fa ffb1 	bl	8000168 <__aeabi_dsub>
 8005206:	e9da 8900 	ldrd	r8, r9, [sl]
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4640      	mov	r0, r8
 8005210:	4649      	mov	r1, r9
 8005212:	f7fb fbdd 	bl	80009d0 <__aeabi_dcmple>
 8005216:	b140      	cbz	r0, 800522a <__ieee754_sqrt+0x132>
 8005218:	e9da 0100 	ldrd	r0, r1, [sl]
 800521c:	e9db 2300 	ldrd	r2, r3, [fp]
 8005220:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005224:	d126      	bne.n	8005274 <__ieee754_sqrt+0x17c>
 8005226:	463c      	mov	r4, r7
 8005228:	3501      	adds	r5, #1
 800522a:	106b      	asrs	r3, r5, #1
 800522c:	0864      	lsrs	r4, r4, #1
 800522e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005232:	07ea      	lsls	r2, r5, #31
 8005234:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005238:	bf48      	it	mi
 800523a:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800523e:	4620      	mov	r0, r4
 8005240:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005244:	e76d      	b.n	8005122 <__ieee754_sqrt+0x2a>
 8005246:	0ae3      	lsrs	r3, r4, #11
 8005248:	3915      	subs	r1, #21
 800524a:	0564      	lsls	r4, r4, #21
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0fa      	beq.n	8005246 <__ieee754_sqrt+0x14e>
 8005250:	02d8      	lsls	r0, r3, #11
 8005252:	d50a      	bpl.n	800526a <__ieee754_sqrt+0x172>
 8005254:	f1c2 0020 	rsb	r0, r2, #32
 8005258:	fa24 f000 	lsr.w	r0, r4, r0
 800525c:	1e55      	subs	r5, r2, #1
 800525e:	4094      	lsls	r4, r2
 8005260:	4303      	orrs	r3, r0
 8005262:	1b4a      	subs	r2, r1, r5
 8005264:	e776      	b.n	8005154 <__ieee754_sqrt+0x5c>
 8005266:	4611      	mov	r1, r2
 8005268:	e7f0      	b.n	800524c <__ieee754_sqrt+0x154>
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	3201      	adds	r2, #1
 800526e:	e7ef      	b.n	8005250 <__ieee754_sqrt+0x158>
 8005270:	4688      	mov	r8, r1
 8005272:	e7aa      	b.n	80051ca <__ieee754_sqrt+0xd2>
 8005274:	f7fa ff7a 	bl	800016c <__adddf3>
 8005278:	e9da 8900 	ldrd	r8, r9, [sl]
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4640      	mov	r0, r8
 8005282:	4649      	mov	r1, r9
 8005284:	f7fb fb9a 	bl	80009bc <__aeabi_dcmplt>
 8005288:	b120      	cbz	r0, 8005294 <__ieee754_sqrt+0x19c>
 800528a:	1ca1      	adds	r1, r4, #2
 800528c:	bf08      	it	eq
 800528e:	3501      	addeq	r5, #1
 8005290:	3402      	adds	r4, #2
 8005292:	e7ca      	b.n	800522a <__ieee754_sqrt+0x132>
 8005294:	3401      	adds	r4, #1
 8005296:	f024 0401 	bic.w	r4, r4, #1
 800529a:	e7c6      	b.n	800522a <__ieee754_sqrt+0x132>
 800529c:	7ff00000 	.word	0x7ff00000
 80052a0:	200000e0 	.word	0x200000e0
 80052a4:	200000e8 	.word	0x200000e8

080052a8 <__ieee754_atan2>:
 80052a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	4617      	mov	r7, r2
 80052ae:	4692      	mov	sl, r2
 80052b0:	4699      	mov	r9, r3
 80052b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052b6:	427b      	negs	r3, r7
 80052b8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8005438 <__ieee754_atan2+0x190>
 80052bc:	433b      	orrs	r3, r7
 80052be:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80052c2:	4543      	cmp	r3, r8
 80052c4:	4604      	mov	r4, r0
 80052c6:	460d      	mov	r5, r1
 80052c8:	d809      	bhi.n	80052de <__ieee754_atan2+0x36>
 80052ca:	4246      	negs	r6, r0
 80052cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052d0:	4306      	orrs	r6, r0
 80052d2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80052d6:	4546      	cmp	r6, r8
 80052d8:	468e      	mov	lr, r1
 80052da:	4683      	mov	fp, r0
 80052dc:	d908      	bls.n	80052f0 <__ieee754_atan2+0x48>
 80052de:	4652      	mov	r2, sl
 80052e0:	464b      	mov	r3, r9
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fa ff41 	bl	800016c <__adddf3>
 80052ea:	4604      	mov	r4, r0
 80052ec:	460d      	mov	r5, r1
 80052ee:	e019      	b.n	8005324 <__ieee754_atan2+0x7c>
 80052f0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80052f4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80052f8:	433e      	orrs	r6, r7
 80052fa:	d103      	bne.n	8005304 <__ieee754_atan2+0x5c>
 80052fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	f000 b8a2 	b.w	8005448 <atan>
 8005304:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8005308:	f006 0602 	and.w	r6, r6, #2
 800530c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8005310:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005314:	d10a      	bne.n	800532c <__ieee754_atan2+0x84>
 8005316:	2e02      	cmp	r6, #2
 8005318:	d067      	beq.n	80053ea <__ieee754_atan2+0x142>
 800531a:	2e03      	cmp	r6, #3
 800531c:	d102      	bne.n	8005324 <__ieee754_atan2+0x7c>
 800531e:	a53a      	add	r5, pc, #232	; (adr r5, 8005408 <__ieee754_atan2+0x160>)
 8005320:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005324:	4620      	mov	r0, r4
 8005326:	4629      	mov	r1, r5
 8005328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532c:	4317      	orrs	r7, r2
 800532e:	d106      	bne.n	800533e <__ieee754_atan2+0x96>
 8005330:	f1be 0f00 	cmp.w	lr, #0
 8005334:	da64      	bge.n	8005400 <__ieee754_atan2+0x158>
 8005336:	a536      	add	r5, pc, #216	; (adr r5, 8005410 <__ieee754_atan2+0x168>)
 8005338:	e9d5 4500 	ldrd	r4, r5, [r5]
 800533c:	e7f2      	b.n	8005324 <__ieee754_atan2+0x7c>
 800533e:	4542      	cmp	r2, r8
 8005340:	d10f      	bne.n	8005362 <__ieee754_atan2+0xba>
 8005342:	4293      	cmp	r3, r2
 8005344:	f106 36ff 	add.w	r6, r6, #4294967295
 8005348:	d107      	bne.n	800535a <__ieee754_atan2+0xb2>
 800534a:	2e02      	cmp	r6, #2
 800534c:	d851      	bhi.n	80053f2 <__ieee754_atan2+0x14a>
 800534e:	4b3b      	ldr	r3, [pc, #236]	; (800543c <__ieee754_atan2+0x194>)
 8005350:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005354:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005358:	e7e4      	b.n	8005324 <__ieee754_atan2+0x7c>
 800535a:	2e02      	cmp	r6, #2
 800535c:	d84d      	bhi.n	80053fa <__ieee754_atan2+0x152>
 800535e:	4b38      	ldr	r3, [pc, #224]	; (8005440 <__ieee754_atan2+0x198>)
 8005360:	e7f6      	b.n	8005350 <__ieee754_atan2+0xa8>
 8005362:	4543      	cmp	r3, r8
 8005364:	d0e4      	beq.n	8005330 <__ieee754_atan2+0x88>
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800536c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005370:	da21      	bge.n	80053b6 <__ieee754_atan2+0x10e>
 8005372:	f1b9 0f00 	cmp.w	r9, #0
 8005376:	da01      	bge.n	800537c <__ieee754_atan2+0xd4>
 8005378:	323c      	adds	r2, #60	; 0x3c
 800537a:	db20      	blt.n	80053be <__ieee754_atan2+0x116>
 800537c:	4652      	mov	r2, sl
 800537e:	464b      	mov	r3, r9
 8005380:	4620      	mov	r0, r4
 8005382:	4629      	mov	r1, r5
 8005384:	f7fb f9d2 	bl	800072c <__aeabi_ddiv>
 8005388:	f000 f9e8 	bl	800575c <fabs>
 800538c:	f000 f85c 	bl	8005448 <atan>
 8005390:	4604      	mov	r4, r0
 8005392:	460d      	mov	r5, r1
 8005394:	2e01      	cmp	r6, #1
 8005396:	d015      	beq.n	80053c4 <__ieee754_atan2+0x11c>
 8005398:	2e02      	cmp	r6, #2
 800539a:	d017      	beq.n	80053cc <__ieee754_atan2+0x124>
 800539c:	2e00      	cmp	r6, #0
 800539e:	d0c1      	beq.n	8005324 <__ieee754_atan2+0x7c>
 80053a0:	a31d      	add	r3, pc, #116	; (adr r3, 8005418 <__ieee754_atan2+0x170>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	4620      	mov	r0, r4
 80053a8:	4629      	mov	r1, r5
 80053aa:	f7fa fedd 	bl	8000168 <__aeabi_dsub>
 80053ae:	a31c      	add	r3, pc, #112	; (adr r3, 8005420 <__ieee754_atan2+0x178>)
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	e016      	b.n	80053e4 <__ieee754_atan2+0x13c>
 80053b6:	a51c      	add	r5, pc, #112	; (adr r5, 8005428 <__ieee754_atan2+0x180>)
 80053b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80053bc:	e7ea      	b.n	8005394 <__ieee754_atan2+0xec>
 80053be:	2400      	movs	r4, #0
 80053c0:	2500      	movs	r5, #0
 80053c2:	e7e7      	b.n	8005394 <__ieee754_atan2+0xec>
 80053c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80053c8:	461d      	mov	r5, r3
 80053ca:	e7ab      	b.n	8005324 <__ieee754_atan2+0x7c>
 80053cc:	a312      	add	r3, pc, #72	; (adr r3, 8005418 <__ieee754_atan2+0x170>)
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	4620      	mov	r0, r4
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7fa fec7 	bl	8000168 <__aeabi_dsub>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	a110      	add	r1, pc, #64	; (adr r1, 8005420 <__ieee754_atan2+0x178>)
 80053e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053e4:	f7fa fec0 	bl	8000168 <__aeabi_dsub>
 80053e8:	e77f      	b.n	80052ea <__ieee754_atan2+0x42>
 80053ea:	a50d      	add	r5, pc, #52	; (adr r5, 8005420 <__ieee754_atan2+0x178>)
 80053ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80053f0:	e798      	b.n	8005324 <__ieee754_atan2+0x7c>
 80053f2:	a50f      	add	r5, pc, #60	; (adr r5, 8005430 <__ieee754_atan2+0x188>)
 80053f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80053f8:	e794      	b.n	8005324 <__ieee754_atan2+0x7c>
 80053fa:	2400      	movs	r4, #0
 80053fc:	2500      	movs	r5, #0
 80053fe:	e791      	b.n	8005324 <__ieee754_atan2+0x7c>
 8005400:	a509      	add	r5, pc, #36	; (adr r5, 8005428 <__ieee754_atan2+0x180>)
 8005402:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005406:	e78d      	b.n	8005324 <__ieee754_atan2+0x7c>
 8005408:	54442d18 	.word	0x54442d18
 800540c:	c00921fb 	.word	0xc00921fb
 8005410:	54442d18 	.word	0x54442d18
 8005414:	bff921fb 	.word	0xbff921fb
 8005418:	33145c07 	.word	0x33145c07
 800541c:	3ca1a626 	.word	0x3ca1a626
 8005420:	54442d18 	.word	0x54442d18
 8005424:	400921fb 	.word	0x400921fb
 8005428:	54442d18 	.word	0x54442d18
 800542c:	3ff921fb 	.word	0x3ff921fb
 8005430:	54442d18 	.word	0x54442d18
 8005434:	3fe921fb 	.word	0x3fe921fb
 8005438:	7ff00000 	.word	0x7ff00000
 800543c:	08005808 	.word	0x08005808
 8005440:	08005820 	.word	0x08005820
 8005444:	00000000 	.word	0x00000000

08005448 <atan>:
 8005448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	4bb6      	ldr	r3, [pc, #728]	; (8005728 <atan+0x2e0>)
 800544e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005452:	429e      	cmp	r6, r3
 8005454:	4604      	mov	r4, r0
 8005456:	460d      	mov	r5, r1
 8005458:	468b      	mov	fp, r1
 800545a:	dd17      	ble.n	800548c <atan+0x44>
 800545c:	4bb3      	ldr	r3, [pc, #716]	; (800572c <atan+0x2e4>)
 800545e:	429e      	cmp	r6, r3
 8005460:	dc01      	bgt.n	8005466 <atan+0x1e>
 8005462:	d109      	bne.n	8005478 <atan+0x30>
 8005464:	b140      	cbz	r0, 8005478 <atan+0x30>
 8005466:	4622      	mov	r2, r4
 8005468:	462b      	mov	r3, r5
 800546a:	4620      	mov	r0, r4
 800546c:	4629      	mov	r1, r5
 800546e:	f7fa fe7d 	bl	800016c <__adddf3>
 8005472:	4604      	mov	r4, r0
 8005474:	460d      	mov	r5, r1
 8005476:	e005      	b.n	8005484 <atan+0x3c>
 8005478:	f1bb 0f00 	cmp.w	fp, #0
 800547c:	4cac      	ldr	r4, [pc, #688]	; (8005730 <atan+0x2e8>)
 800547e:	f300 8121 	bgt.w	80056c4 <atan+0x27c>
 8005482:	4dac      	ldr	r5, [pc, #688]	; (8005734 <atan+0x2ec>)
 8005484:	4620      	mov	r0, r4
 8005486:	4629      	mov	r1, r5
 8005488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548c:	4baa      	ldr	r3, [pc, #680]	; (8005738 <atan+0x2f0>)
 800548e:	429e      	cmp	r6, r3
 8005490:	dc11      	bgt.n	80054b6 <atan+0x6e>
 8005492:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005496:	429e      	cmp	r6, r3
 8005498:	dc0a      	bgt.n	80054b0 <atan+0x68>
 800549a:	a38b      	add	r3, pc, #556	; (adr r3, 80056c8 <atan+0x280>)
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f7fa fe64 	bl	800016c <__adddf3>
 80054a4:	2200      	movs	r2, #0
 80054a6:	4ba5      	ldr	r3, [pc, #660]	; (800573c <atan+0x2f4>)
 80054a8:	f7fb faa6 	bl	80009f8 <__aeabi_dcmpgt>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d1e9      	bne.n	8005484 <atan+0x3c>
 80054b0:	f04f 3aff 	mov.w	sl, #4294967295
 80054b4:	e027      	b.n	8005506 <atan+0xbe>
 80054b6:	f000 f951 	bl	800575c <fabs>
 80054ba:	4ba1      	ldr	r3, [pc, #644]	; (8005740 <atan+0x2f8>)
 80054bc:	4604      	mov	r4, r0
 80054be:	429e      	cmp	r6, r3
 80054c0:	460d      	mov	r5, r1
 80054c2:	f300 80b8 	bgt.w	8005636 <atan+0x1ee>
 80054c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80054ca:	429e      	cmp	r6, r3
 80054cc:	f300 809c 	bgt.w	8005608 <atan+0x1c0>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	f7fa fe4a 	bl	800016c <__adddf3>
 80054d8:	2200      	movs	r2, #0
 80054da:	4b98      	ldr	r3, [pc, #608]	; (800573c <atan+0x2f4>)
 80054dc:	f7fa fe44 	bl	8000168 <__aeabi_dsub>
 80054e0:	2200      	movs	r2, #0
 80054e2:	4606      	mov	r6, r0
 80054e4:	460f      	mov	r7, r1
 80054e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fa fe3d 	bl	800016c <__adddf3>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4630      	mov	r0, r6
 80054f8:	4639      	mov	r1, r7
 80054fa:	f7fb f917 	bl	800072c <__aeabi_ddiv>
 80054fe:	f04f 0a00 	mov.w	sl, #0
 8005502:	4604      	mov	r4, r0
 8005504:	460d      	mov	r5, r1
 8005506:	4622      	mov	r2, r4
 8005508:	462b      	mov	r3, r5
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	f7fa ffe3 	bl	80004d8 <__aeabi_dmul>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4680      	mov	r8, r0
 8005518:	4689      	mov	r9, r1
 800551a:	f7fa ffdd 	bl	80004d8 <__aeabi_dmul>
 800551e:	a36c      	add	r3, pc, #432	; (adr r3, 80056d0 <atan+0x288>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	4606      	mov	r6, r0
 8005526:	460f      	mov	r7, r1
 8005528:	f7fa ffd6 	bl	80004d8 <__aeabi_dmul>
 800552c:	a36a      	add	r3, pc, #424	; (adr r3, 80056d8 <atan+0x290>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fa fe1b 	bl	800016c <__adddf3>
 8005536:	4632      	mov	r2, r6
 8005538:	463b      	mov	r3, r7
 800553a:	f7fa ffcd 	bl	80004d8 <__aeabi_dmul>
 800553e:	a368      	add	r3, pc, #416	; (adr r3, 80056e0 <atan+0x298>)
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	f7fa fe12 	bl	800016c <__adddf3>
 8005548:	4632      	mov	r2, r6
 800554a:	463b      	mov	r3, r7
 800554c:	f7fa ffc4 	bl	80004d8 <__aeabi_dmul>
 8005550:	a365      	add	r3, pc, #404	; (adr r3, 80056e8 <atan+0x2a0>)
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f7fa fe09 	bl	800016c <__adddf3>
 800555a:	4632      	mov	r2, r6
 800555c:	463b      	mov	r3, r7
 800555e:	f7fa ffbb 	bl	80004d8 <__aeabi_dmul>
 8005562:	a363      	add	r3, pc, #396	; (adr r3, 80056f0 <atan+0x2a8>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f7fa fe00 	bl	800016c <__adddf3>
 800556c:	4632      	mov	r2, r6
 800556e:	463b      	mov	r3, r7
 8005570:	f7fa ffb2 	bl	80004d8 <__aeabi_dmul>
 8005574:	a360      	add	r3, pc, #384	; (adr r3, 80056f8 <atan+0x2b0>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	f7fa fdf7 	bl	800016c <__adddf3>
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	f7fa ffa9 	bl	80004d8 <__aeabi_dmul>
 8005586:	a35e      	add	r3, pc, #376	; (adr r3, 8005700 <atan+0x2b8>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	4680      	mov	r8, r0
 800558e:	4689      	mov	r9, r1
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	a35b      	add	r3, pc, #364	; (adr r3, 8005708 <atan+0x2c0>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fa fde3 	bl	8000168 <__aeabi_dsub>
 80055a2:	4632      	mov	r2, r6
 80055a4:	463b      	mov	r3, r7
 80055a6:	f7fa ff97 	bl	80004d8 <__aeabi_dmul>
 80055aa:	a359      	add	r3, pc, #356	; (adr r3, 8005710 <atan+0x2c8>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f7fa fdda 	bl	8000168 <__aeabi_dsub>
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	f7fa ff8e 	bl	80004d8 <__aeabi_dmul>
 80055bc:	a356      	add	r3, pc, #344	; (adr r3, 8005718 <atan+0x2d0>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f7fa fdd1 	bl	8000168 <__aeabi_dsub>
 80055c6:	4632      	mov	r2, r6
 80055c8:	463b      	mov	r3, r7
 80055ca:	f7fa ff85 	bl	80004d8 <__aeabi_dmul>
 80055ce:	a354      	add	r3, pc, #336	; (adr r3, 8005720 <atan+0x2d8>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fa fdc8 	bl	8000168 <__aeabi_dsub>
 80055d8:	4632      	mov	r2, r6
 80055da:	463b      	mov	r3, r7
 80055dc:	f7fa ff7c 	bl	80004d8 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4640      	mov	r0, r8
 80055e6:	4649      	mov	r1, r9
 80055e8:	f7fa fdc0 	bl	800016c <__adddf3>
 80055ec:	4622      	mov	r2, r4
 80055ee:	462b      	mov	r3, r5
 80055f0:	f7fa ff72 	bl	80004d8 <__aeabi_dmul>
 80055f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	d144      	bne.n	8005688 <atan+0x240>
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fa fdb1 	bl	8000168 <__aeabi_dsub>
 8005606:	e734      	b.n	8005472 <atan+0x2a>
 8005608:	2200      	movs	r2, #0
 800560a:	4b4c      	ldr	r3, [pc, #304]	; (800573c <atan+0x2f4>)
 800560c:	f7fa fdac 	bl	8000168 <__aeabi_dsub>
 8005610:	2200      	movs	r2, #0
 8005612:	4606      	mov	r6, r0
 8005614:	460f      	mov	r7, r1
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	4b48      	ldr	r3, [pc, #288]	; (800573c <atan+0x2f4>)
 800561c:	f7fa fda6 	bl	800016c <__adddf3>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4630      	mov	r0, r6
 8005626:	4639      	mov	r1, r7
 8005628:	f7fb f880 	bl	800072c <__aeabi_ddiv>
 800562c:	f04f 0a01 	mov.w	sl, #1
 8005630:	4604      	mov	r4, r0
 8005632:	460d      	mov	r5, r1
 8005634:	e767      	b.n	8005506 <atan+0xbe>
 8005636:	4b43      	ldr	r3, [pc, #268]	; (8005744 <atan+0x2fc>)
 8005638:	429e      	cmp	r6, r3
 800563a:	da1a      	bge.n	8005672 <atan+0x22a>
 800563c:	2200      	movs	r2, #0
 800563e:	4b42      	ldr	r3, [pc, #264]	; (8005748 <atan+0x300>)
 8005640:	f7fa fd92 	bl	8000168 <__aeabi_dsub>
 8005644:	2200      	movs	r2, #0
 8005646:	4606      	mov	r6, r0
 8005648:	460f      	mov	r7, r1
 800564a:	4620      	mov	r0, r4
 800564c:	4629      	mov	r1, r5
 800564e:	4b3e      	ldr	r3, [pc, #248]	; (8005748 <atan+0x300>)
 8005650:	f7fa ff42 	bl	80004d8 <__aeabi_dmul>
 8005654:	2200      	movs	r2, #0
 8005656:	4b39      	ldr	r3, [pc, #228]	; (800573c <atan+0x2f4>)
 8005658:	f7fa fd88 	bl	800016c <__adddf3>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fb f862 	bl	800072c <__aeabi_ddiv>
 8005668:	f04f 0a02 	mov.w	sl, #2
 800566c:	4604      	mov	r4, r0
 800566e:	460d      	mov	r5, r1
 8005670:	e749      	b.n	8005506 <atan+0xbe>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	2000      	movs	r0, #0
 8005678:	4934      	ldr	r1, [pc, #208]	; (800574c <atan+0x304>)
 800567a:	f7fb f857 	bl	800072c <__aeabi_ddiv>
 800567e:	f04f 0a03 	mov.w	sl, #3
 8005682:	4604      	mov	r4, r0
 8005684:	460d      	mov	r5, r1
 8005686:	e73e      	b.n	8005506 <atan+0xbe>
 8005688:	4b31      	ldr	r3, [pc, #196]	; (8005750 <atan+0x308>)
 800568a:	4e32      	ldr	r6, [pc, #200]	; (8005754 <atan+0x30c>)
 800568c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f7fa fd68 	bl	8000168 <__aeabi_dsub>
 8005698:	4622      	mov	r2, r4
 800569a:	462b      	mov	r3, r5
 800569c:	f7fa fd64 	bl	8000168 <__aeabi_dsub>
 80056a0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80056ac:	f7fa fd5c 	bl	8000168 <__aeabi_dsub>
 80056b0:	f1bb 0f00 	cmp.w	fp, #0
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	f6bf aee4 	bge.w	8005484 <atan+0x3c>
 80056bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056c0:	461d      	mov	r5, r3
 80056c2:	e6df      	b.n	8005484 <atan+0x3c>
 80056c4:	4d24      	ldr	r5, [pc, #144]	; (8005758 <atan+0x310>)
 80056c6:	e6dd      	b.n	8005484 <atan+0x3c>
 80056c8:	8800759c 	.word	0x8800759c
 80056cc:	7e37e43c 	.word	0x7e37e43c
 80056d0:	e322da11 	.word	0xe322da11
 80056d4:	3f90ad3a 	.word	0x3f90ad3a
 80056d8:	24760deb 	.word	0x24760deb
 80056dc:	3fa97b4b 	.word	0x3fa97b4b
 80056e0:	a0d03d51 	.word	0xa0d03d51
 80056e4:	3fb10d66 	.word	0x3fb10d66
 80056e8:	c54c206e 	.word	0xc54c206e
 80056ec:	3fb745cd 	.word	0x3fb745cd
 80056f0:	920083ff 	.word	0x920083ff
 80056f4:	3fc24924 	.word	0x3fc24924
 80056f8:	5555550d 	.word	0x5555550d
 80056fc:	3fd55555 	.word	0x3fd55555
 8005700:	2c6a6c2f 	.word	0x2c6a6c2f
 8005704:	bfa2b444 	.word	0xbfa2b444
 8005708:	52defd9a 	.word	0x52defd9a
 800570c:	3fadde2d 	.word	0x3fadde2d
 8005710:	af749a6d 	.word	0xaf749a6d
 8005714:	3fb3b0f2 	.word	0x3fb3b0f2
 8005718:	fe231671 	.word	0xfe231671
 800571c:	3fbc71c6 	.word	0x3fbc71c6
 8005720:	9998ebc4 	.word	0x9998ebc4
 8005724:	3fc99999 	.word	0x3fc99999
 8005728:	440fffff 	.word	0x440fffff
 800572c:	7ff00000 	.word	0x7ff00000
 8005730:	54442d18 	.word	0x54442d18
 8005734:	bff921fb 	.word	0xbff921fb
 8005738:	3fdbffff 	.word	0x3fdbffff
 800573c:	3ff00000 	.word	0x3ff00000
 8005740:	3ff2ffff 	.word	0x3ff2ffff
 8005744:	40038000 	.word	0x40038000
 8005748:	3ff80000 	.word	0x3ff80000
 800574c:	bff00000 	.word	0xbff00000
 8005750:	08005858 	.word	0x08005858
 8005754:	08005838 	.word	0x08005838
 8005758:	3ff921fb 	.word	0x3ff921fb

0800575c <fabs>:
 800575c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005760:	4619      	mov	r1, r3
 8005762:	4770      	bx	lr

08005764 <_init>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr

08005770 <_fini>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr

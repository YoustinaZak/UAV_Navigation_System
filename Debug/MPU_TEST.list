
MPU_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044ac  080044ac  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  080044ac  080044ac  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044ac  080044ac  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080044b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200000dc  08004590  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004590  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007436  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000186b  00000000  00000000  0002757e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00028df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f2  00000000  00000000  000295d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017694  00000000  00000000  00029bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b10f  00000000  00000000  0004125e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000823f9  00000000  00000000  0004c36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002464  00000000  00000000  000ce768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000d0bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004418 	.word	0x08004418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08004418 	.word	0x08004418

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <I2C_MPU_READ>:
 * @param Data: pointer to an array of data
 * @param Len: length of the array
 *
 * @return uint8_t: 1 if acknowledge received, 0 if acknowledge not received
 */
uint8_t I2C_MPU_READ(uint8_t SL_address, uint8_t *Data, uint8_t Len){
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ACK = HAL_I2C_Master_Receive(&hi2c1, SL_address<<1 ,
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	b29b      	uxth	r3, r3
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	b299      	uxth	r1, r3
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	b29b      	uxth	r3, r3
 8000680:	2264      	movs	r2, #100	; 0x64
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <I2C_MPU_READ+0x40>)
 8000688:	f001 fb3a 	bl	8001d00 <HAL_I2C_Master_Receive>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
						Data, Len, 100); //sends read bit automatically
				return (ACK == HAL_OK) ? 1 : 0;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf0c      	ite	eq
 8000696:	2301      	moveq	r3, #1
 8000698:	2300      	movne	r3, #0
 800069a:	b2db      	uxtb	r3, r3
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000f8 	.word	0x200000f8

080006a8 <I2C_MPU_WRITE>:
 * @param Data: pointer to an array of data
 * @param Len: length of the array
 *
 * @return uint8_t: 1 if acknowledge received, 0 if acknowledge not received
 */
uint8_t I2C_MPU_WRITE(uint8_t SL_address, uint8_t *Data, uint8_t Len){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ACK = HAL_I2C_Master_Transmit(&hi2c1, SL_address << 1,
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	b299      	uxth	r1, r3
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	2264      	movs	r2, #100	; 0x64
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	4807      	ldr	r0, [pc, #28]	; (80006e8 <I2C_MPU_WRITE+0x40>)
 80006cc:	f001 fa1a 	bl	8001b04 <HAL_I2C_Master_Transmit>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]
							Data, Len, 100); //sends write bit automatically
					return (ACK == HAL_OK) ? 1 : 0;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf0c      	ite	eq
 80006da:	2301      	moveq	r3, #1
 80006dc:	2300      	movne	r3, #0
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000f8 	.word	0x200000f8

080006ec <I2C_MPU_CHECK>:
 *
 * @param SL_address
 * @param Data
 * @param Len
 */
uint8_t I2C_MPU_CHECK(uint8_t SL_address){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	uint8_t check;
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, SL_address << 1, 0x75, 1, &check, 1, 100);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	b299      	uxth	r1, r3
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	9302      	str	r3, [sp, #8]
 8000702:	2301      	movs	r3, #1
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	f107 030e 	add.w	r3, r7, #14
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	2275      	movs	r2, #117	; 0x75
 8000710:	4810      	ldr	r0, [pc, #64]	; (8000754 <I2C_MPU_CHECK+0x68>)
 8000712:	f001 fe5b 	bl	80023cc <HAL_I2C_Mem_Read>

	    if (check == 0x68) {  // 0x68 is the default WHO_AM_I register value
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	2b68      	cmp	r3, #104	; 0x68
 800071a:	d117      	bne.n	800074c <I2C_MPU_CHECK+0x60>
	        data = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	737b      	strb	r3, [r7, #13]
	        // Wake up the MPU6050 by writing 0 to the Power Management register (0x6B)
	        HAL_StatusTypeDef ACK =HAL_I2C_Mem_Write(&hi2c1, MPU_slave_address << 1, 0x6B, 1, &data, 1, 100);
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2301      	movs	r3, #1
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	f107 030d 	add.w	r3, r7, #13
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	226b      	movs	r2, #107	; 0x6b
 8000732:	21d0      	movs	r1, #208	; 0xd0
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <I2C_MPU_CHECK+0x68>)
 8000736:	f001 fd4f 	bl	80021d8 <HAL_I2C_Mem_Write>
 800073a:	4603      	mov	r3, r0
 800073c:	73fb      	strb	r3, [r7, #15]
	        if(ACK==HAL_OK){
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <I2C_MPU_CHECK+0x5c>
	        	return 1;
 8000744:	2301      	movs	r3, #1
 8000746:	e001      	b.n	800074c <I2C_MPU_CHECK+0x60>
	        }
	        return 0;
 8000748:	2300      	movs	r3, #0
 800074a:	e7ff      	b.n	800074c <I2C_MPU_CHECK+0x60>
	    }

}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000f8 	.word	0x200000f8

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fd87 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f877 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 f8df 	bl	8000928 <MX_GPIO_Init>
  MX_I2C1_Init();
 800076a:	f000 f8af 	bl	80008cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Alcd_Init(& lcd1, 1, 0);                     //removeable
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	4831      	ldr	r0, [pc, #196]	; (8000838 <main+0xe0>)
 8000774:	f000 fb20 	bl	8000db8 <Alcd_Init>
  Alcd_PutAt_n(&lcd1, 1, 0, "UnderTest", 9);    //removeable
 8000778:	2309      	movs	r3, #9
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <main+0xe4>)
 800077e:	2200      	movs	r2, #0
 8000780:	2101      	movs	r1, #1
 8000782:	482d      	ldr	r0, [pc, #180]	; (8000838 <main+0xe0>)
 8000784:	f000 fbd3 	bl	8000f2e <Alcd_PutAt_n>
  HAL_Delay(3000);                             //removeable
 8000788:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800078c:	f000 fdd2 	bl	8001334 <HAL_Delay>


  MPU_Check(&mpu_6050);  //test success
 8000790:	482b      	ldr	r0, [pc, #172]	; (8000840 <main+0xe8>)
 8000792:	f000 fc39 	bl	8001008 <MPU_Check>
  MPU_Init(&mpu_6050);   //test success
 8000796:	482a      	ldr	r0, [pc, #168]	; (8000840 <main+0xe8>)
 8000798:	f000 fc42 	bl	8001020 <MPU_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      MPU_GET_ACC_RAW(&mpu_6050);
 800079c:	4828      	ldr	r0, [pc, #160]	; (8000840 <main+0xe8>)
 800079e:	f000 fc66 	bl	800106e <MPU_GET_ACC_RAW>
      MPU_GET_GYRO_RAW(&mpu_6050);
 80007a2:	4827      	ldr	r0, [pc, #156]	; (8000840 <main+0xe8>)
 80007a4:	f000 fc99 	bl	80010da <MPU_GET_GYRO_RAW>
      MPU_CALC_ACC_NORM(&mpu_6050);
 80007a8:	4825      	ldr	r0, [pc, #148]	; (8000840 <main+0xe8>)
 80007aa:	f000 fccf 	bl	800114c <MPU_CALC_ACC_NORM>
      MPU_CALC_GYRO_NORM(&mpu_6050);
 80007ae:	4824      	ldr	r0, [pc, #144]	; (8000840 <main+0xe8>)
 80007b0:	f000 fd22 	bl	80011f8 <MPU_CALC_GYRO_NORM>

	  sprintf(test,"x:%05d",(int)(mpu_6050.norm_acc_x *100));
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <main+0xe8>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4922      	ldr	r1, [pc, #136]	; (8000844 <main+0xec>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fddc 	bl	8000378 <__aeabi_fmul>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff28 	bl	8000618 <__aeabi_f2iz>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	491e      	ldr	r1, [pc, #120]	; (8000848 <main+0xf0>)
 80007ce:	481f      	ldr	r0, [pc, #124]	; (800084c <main+0xf4>)
 80007d0:	f003 f970 	bl	8003ab4 <siprintf>
	  sprintf(Data,"z:%05d",(int)(mpu_6050.norm_acc_z *100));
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <main+0xe8>)
 80007d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d8:	491a      	ldr	r1, [pc, #104]	; (8000844 <main+0xec>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fdcc 	bl	8000378 <__aeabi_fmul>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff18 	bl	8000618 <__aeabi_f2iz>
 80007e8:	4602      	mov	r2, r0
 80007ea:	463b      	mov	r3, r7
 80007ec:	4918      	ldr	r1, [pc, #96]	; (8000850 <main+0xf8>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f960 	bl	8003ab4 <siprintf>
	  Alcd_PutAt_n(&lcd1, 0, 0, test, strlen(test));
 80007f4:	4815      	ldr	r0, [pc, #84]	; (800084c <main+0xf4>)
 80007f6:	f7ff fca9 	bl	800014c <strlen>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <main+0xf4>)
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	480c      	ldr	r0, [pc, #48]	; (8000838 <main+0xe0>)
 8000808:	f000 fb91 	bl	8000f2e <Alcd_PutAt_n>
	  Alcd_PutAt_n(&lcd1, 1, 0, Data, strlen(Data));
 800080c:	463b      	mov	r3, r7
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fc9c 	bl	800014c <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b2db      	uxtb	r3, r3
 8000818:	463a      	mov	r2, r7
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	4613      	mov	r3, r2
 800081e:	2200      	movs	r2, #0
 8000820:	2101      	movs	r1, #1
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <main+0xe0>)
 8000824:	f000 fb83 	bl	8000f2e <Alcd_PutAt_n>
	  HAL_Delay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f000 fd82 	bl	8001334 <HAL_Delay>
	  Alcd_Clear(&lcd1);
 8000830:	4801      	ldr	r0, [pc, #4]	; (8000838 <main+0xe0>)
 8000832:	f000 fb95 	bl	8000f60 <Alcd_Clear>
  {
 8000836:	e7b1      	b.n	800079c <main+0x44>
 8000838:	20000000 	.word	0x20000000
 800083c:	08004430 	.word	0x08004430
 8000840:	20000020 	.word	0x20000020
 8000844:	42c80000 	.word	0x42c80000
 8000848:	0800443c 	.word	0x0800443c
 800084c:	2000014c 	.word	0x2000014c
 8000850:	08004444 	.word	0x08004444

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b090      	sub	sp, #64	; 0x40
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	2228      	movs	r2, #40	; 0x28
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f003 f946 	bl	8003af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087a:	2301      	movs	r3, #1
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000882:	2300      	movs	r3, #0
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	4618      	mov	r0, r3
 800088c:	f002 fd16 	bl	80032bc <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000896:	f000 f875 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 ff84 	bl	80037c0 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008be:	f000 f861 	bl	8000984 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3740      	adds	r7, #64	; 0x40
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C1_Init+0x50>)
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <MX_I2C1_Init+0x54>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_I2C1_Init+0x50>)
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_I2C1_Init+0x58>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_I2C1_Init+0x50>)
 80008ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_I2C1_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_I2C1_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_I2C1_Init+0x50>)
 800090a:	f000 ffb7 	bl	800187c <HAL_I2C_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000914:	f000 f836 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000f8 	.word	0x200000f8
 8000920:	40005400 	.word	0x40005400
 8000924:	000186a0 	.word	0x000186a0

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_GPIO_Init+0x58>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_GPIO_Init+0x58>)
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_GPIO_Init+0x58>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_GPIO_Init+0x58>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <MX_GPIO_Init+0x58>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_GPIO_Init+0x58>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_GPIO_Init+0x58>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a07      	ldr	r2, [pc, #28]	; (8000980 <MX_GPIO_Init+0x58>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <MX_GPIO_Init+0x58>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_MspInit+0x5c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <HAL_MspInit+0x5c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6193      	str	r3, [r2, #24]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_MspInit+0x5c>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x5c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_MspInit+0x5c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_MspInit+0x5c>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_MspInit+0x60>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_MspInit+0x60>)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010000 	.word	0x40010000

080009f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <HAL_I2C_MspInit+0x70>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d123      	bne.n	8000a5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_I2C_MspInit+0x74>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <HAL_I2C_MspInit+0x74>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_I2C_MspInit+0x74>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a2c:	23c0      	movs	r3, #192	; 0xc0
 8000a2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	2312      	movs	r3, #18
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <HAL_I2C_MspInit+0x78>)
 8000a40:	f000 fd80 	bl	8001544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_I2C_MspInit+0x74>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_I2C_MspInit+0x74>)
 8000a4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a4e:	61d3      	str	r3, [r2, #28]
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_I2C_MspInit+0x74>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40005400 	.word	0x40005400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010c00 	.word	0x40010c00

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 fc21 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f003 f808 	bl	8003b04 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20005000 	.word	0x20005000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20000174 	.word	0x20000174
 8000b28:	200002c8 	.word	0x200002c8

08000b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b38:	f7ff fff8 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b3e:	490c      	ldr	r1, [pc, #48]	; (8000b70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b54:	4c09      	ldr	r4, [pc, #36]	; (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 ffd5 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fdf7 	bl	8000758 <main>
  bx lr
 8000b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000b74:	080044b4 	.word	0x080044b4
  ldr r2, =_sbss
 8000b78:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000b7c:	200002c4 	.word	0x200002c4

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>
	...

08000b84 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <DWT_Delay_Init+0x58>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <DWT_Delay_Init+0x58>)
 8000b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b92:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <DWT_Delay_Init+0x58>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <DWT_Delay_Init+0x58>)
 8000b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b9e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <DWT_Delay_Init+0x5c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <DWT_Delay_Init+0x5c>)
 8000ba6:	f023 0301 	bic.w	r3, r3, #1
 8000baa:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <DWT_Delay_Init+0x5c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <DWT_Delay_Init+0x5c>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <DWT_Delay_Init+0x5c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000bbe:	bf00      	nop
     __ASM volatile ("NOP");
 8000bc0:	bf00      	nop
  __ASM volatile ("NOP");
 8000bc2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <DWT_Delay_Init+0x5c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e000      	b.n	8000bd2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000bd0:	2301      	movs	r3, #1
  }
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000edf0 	.word	0xe000edf0
 8000be0:	e0001000 	.word	0xe0001000

08000be4 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <DWT_Delay_us+0x40>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000bf2:	f002 ff23 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <DWT_Delay_us+0x44>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9b      	lsrs	r3, r3, #18
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000c08:	bf00      	nop
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <DWT_Delay_us+0x40>)
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	1ad2      	subs	r2, r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d3f8      	bcc.n	8000c0a <DWT_Delay_us+0x26>
		;
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e0001000 	.word	0xe0001000
 8000c28:	431bde83 	.word	0x431bde83

08000c2c <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ffd3 	bl	8000be4 <DWT_Delay_us>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7a1b      	ldrb	r3, [r3, #8]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	230f      	movs	r3, #15
 8000c60:	408b      	lsls	r3, r1
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4619      	mov	r1, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	7a09      	ldrb	r1, [r1, #8]
 8000c7a:	408b      	lsls	r3, r1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	60da      	str	r2, [r3, #12]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6958      	ldr	r0, [r3, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	8b1b      	ldrh	r3, [r3, #24]
 8000ca4:	78fa      	ldrb	r2, [r7, #3]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f000 fdd0 	bl	800184c <HAL_GPIO_WritePin>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68d8      	ldr	r0, [r3, #12]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	8a1b      	ldrh	r3, [r3, #16]
 8000cc8:	78fa      	ldrb	r2, [r7, #3]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f000 fdbe 	bl	800184c <HAL_GPIO_WritePin>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	f107 0208 	add.w	r2, r7, #8
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 fc1c 	bl	8001544 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	8a1b      	ldrh	r3, [r3, #16]
 8000d10:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	f107 0208 	add.w	r2, r7, #8
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fc11 	bl	8001544 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7a1b      	ldrb	r3, [r3, #8]
 8000d26:	461a      	mov	r2, r3
 8000d28:	230f      	movs	r3, #15
 8000d2a:	4093      	lsls	r3, r2
 8000d2c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f107 0208 	add.w	r2, r7, #8
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fc03 	bl	8001544 <HAL_GPIO_Init>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
 8000d52:	4613      	mov	r3, r2
 8000d54:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ff98 	bl	8000c90 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000d60:	78bb      	ldrb	r3, [r7, #2]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff6c 	bl	8000c46 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000d6e:	2101      	movs	r1, #1
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff9f 	bl	8000cb4 <EN_SET>
 8000d76:	200a      	movs	r0, #10
 8000d78:	f7ff ff58 	bl	8000c2c <usDelay>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff98 	bl	8000cb4 <EN_SET>
 8000d84:	2064      	movs	r0, #100	; 0x64
 8000d86:	f7ff ff51 	bl	8000c2c <usDelay>
	;
	Write_HalfByte(lcd, value);
 8000d8a:	78bb      	ldrb	r3, [r7, #2]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ff59 	bl	8000c46 <Write_HalfByte>
	PulseEn
 8000d94:	2101      	movs	r1, #1
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff8c 	bl	8000cb4 <EN_SET>
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f7ff ff45 	bl	8000c2c <usDelay>
 8000da2:	2100      	movs	r1, #0
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff85 	bl	8000cb4 <EN_SET>
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f7ff ff3e 	bl	8000c2c <usDelay>
	;
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8000dc8:	f7ff fedc 	bl	8000b84 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff83 	bl	8000cd8 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2240      	movs	r2, #64	; 0x40
 8000ddc:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	78ba      	ldrb	r2, [r7, #2]
 8000de2:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8000de4:	78bb      	ldrb	r3, [r7, #2]
 8000de6:	3340      	adds	r3, #64	; 0x40
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8000dee:	2100      	movs	r1, #0
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff4d 	bl	8000c90 <RS_SET>
	EN_SET(lcd, 0);
 8000df6:	2100      	movs	r1, #0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff5b 	bl	8000cb4 <EN_SET>
	usDelay(50000);
 8000dfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e02:	f7ff ff13 	bl	8000c2c <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e018      	b.n	8000e3e <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff19 	bl	8000c46 <Write_HalfByte>
		PulseEn
 8000e14:	2101      	movs	r1, #1
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <EN_SET>
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f7ff ff05 	bl	8000c2c <usDelay>
 8000e22:	2100      	movs	r1, #0
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff45 	bl	8000cb4 <EN_SET>
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f7ff fefe 	bl	8000c2c <usDelay>
		;
		usDelay(4500);
 8000e30:	f241 1094 	movw	r0, #4500	; 0x1194
 8000e34:	f7ff fefa 	bl	8000c2c <usDelay>
	for (x = 0; x < 2; x++)
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d9e3      	bls.n	8000e0c <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000e44:	2103      	movs	r1, #3
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fefd 	bl	8000c46 <Write_HalfByte>
	PulseEn
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff30 	bl	8000cb4 <EN_SET>
 8000e54:	200a      	movs	r0, #10
 8000e56:	f7ff fee9 	bl	8000c2c <usDelay>
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <EN_SET>
 8000e62:	2064      	movs	r0, #100	; 0x64
 8000e64:	f7ff fee2 	bl	8000c2c <usDelay>
	;
	usDelay(150);
 8000e68:	2096      	movs	r0, #150	; 0x96
 8000e6a:	f7ff fedf 	bl	8000c2c <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000e6e:	2102      	movs	r1, #2
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fee8 	bl	8000c46 <Write_HalfByte>
	PulseEn
 8000e76:	2101      	movs	r1, #1
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff1b 	bl	8000cb4 <EN_SET>
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f7ff fed4 	bl	8000c2c <usDelay>
 8000e84:	2100      	movs	r1, #0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff14 	bl	8000cb4 <EN_SET>
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f7ff fecd 	bl	8000c2c <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000e92:	2228      	movs	r2, #40	; 0x28
 8000e94:	2100      	movs	r1, #0
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff55 	bl	8000d46 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f86d 	bl	8000f82 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f859 	bl	8000f60 <Alcd_Clear>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	70fb      	strb	r3, [r7, #3]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	7e9a      	ldrb	r2, [r3, #26]
 8000ece:	78bb      	ldrb	r3, [r7, #2]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	461a      	mov	r2, r3
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff2f 	bl	8000d46 <Alcd_SendByte>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	4613      	mov	r3, r2
 8000efc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
 8000f02:	e00b      	b.n	8000f1c <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2101      	movs	r1, #1
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff ff18 	bl	8000d46 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	75fb      	strb	r3, [r7, #23]
 8000f1c:	7dfa      	ldrb	r2, [r7, #23]
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3ef      	bcc.n	8000f04 <Alcd_Put_n+0x14>
	}
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	72fb      	strb	r3, [r7, #11]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000f40:	7aba      	ldrb	r2, [r7, #10]
 8000f42:	7afb      	ldrb	r3, [r7, #11]
 8000f44:	4619      	mov	r1, r3
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff ffb5 	bl	8000eb6 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000f4c:	7e3b      	ldrb	r3, [r7, #24]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f7ff ffcc 	bl	8000ef0 <Alcd_Put_n>
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff feea 	bl	8000d46 <Alcd_SendByte>
	usDelay(2000);
 8000f72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f76:	f7ff fe59 	bl	8000c2c <usDelay>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4603      	mov	r3, r0
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70bb      	strb	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7f9b      	ldrb	r3, [r3, #30]
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d006      	beq.n	8000fca <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7f9b      	ldrb	r3, [r3, #30]
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8000fca:	787b      	ldrb	r3, [r7, #1]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7f9b      	ldrb	r3, [r3, #30]
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7f9b      	ldrb	r3, [r3, #30]
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7f9b      	ldrb	r3, [r3, #30]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fea3 	bl	8000d46 <Alcd_SendByte>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <MPU_Check>:
 * @fn void MPU_Check(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_Check(MPU_t *sensor){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	sensor->HW_Interface.Check_UI(MPU_slave_address);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001014:	2068      	movs	r0, #104	; 0x68
 8001016:	4798      	blx	r3
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <MPU_Init>:
 * @fn void MPU_Init(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_Init(MPU_t *sensor){            //test success
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	sensor->gyro_scale_buffer[0]=0x1B;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	221b      	movs	r2, #27
 800102c:	701a      	strb	r2, [r3, #0]
	sensor->gyro_scale_buffer[1]= (sensor->gyro_scale_range)<<3;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	789b      	ldrb	r3, [r3, #2]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	b2da      	uxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	705a      	strb	r2, [r3, #1]
	sensor->acc_scale_buffer[0]=0x1C;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	221c      	movs	r2, #28
 800103e:	70da      	strb	r2, [r3, #3]
	sensor->acc_scale_buffer[1]= (sensor->acc_scale_range)<<3;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	795b      	ldrb	r3, [r3, #5]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	711a      	strb	r2, [r3, #4]
	sensor->HW_Interface.Write_UI(MPU_slave_address, sensor->gyro_scale_buffer, 2 );
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	2202      	movs	r2, #2
 8001054:	2068      	movs	r0, #104	; 0x68
 8001056:	4798      	blx	r3
	sensor->HW_Interface.Write_UI(MPU_slave_address, sensor->acc_scale_buffer, 2 );
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	1cd1      	adds	r1, r2, #3
 8001060:	2202      	movs	r2, #2
 8001062:	2068      	movs	r0, #104	; 0x68
 8001064:	4798      	blx	r3
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <MPU_GET_ACC_RAW>:
 * @fn void MPU_GET_ACC_RAW(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_GET_ACC_RAW(MPU_t *sensor){ //leh pointer
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]

	sensor->acc_buffer[0]=59;                               //recheck
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	223b      	movs	r2, #59	; 0x3b
 800107a:	80da      	strh	r2, [r3, #6]
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->acc_buffer, 7 );
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	1d91      	adds	r1, r2, #6
 8001084:	2207      	movs	r2, #7
 8001086:	2068      	movs	r0, #104	; 0x68
 8001088:	4798      	blx	r3
	sensor->acc_x = sensor->acc_buffer[1] << 8 | sensor->acc_buffer[2];
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800109a:	4313      	orrs	r3, r2
 800109c:	b21a      	sxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	829a      	strh	r2, [r3, #20]
	sensor->acc_y = sensor->acc_buffer[3] << 8 | sensor->acc_buffer[4];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	839a      	strh	r2, [r3, #28]
	sensor->acc_z = sensor->acc_buffer[5] << 8 | sensor->acc_buffer[6];
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <MPU_GET_GYRO_RAW>:
 * @fn void MPU_GET_GYRO_RAW(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_GET_GYRO_RAW(MPU_t *sensor){ //leh pointer
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]

	sensor->gyro_buffer[0]=67;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2243      	movs	r2, #67	; 0x43
 80010e6:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->HW_Interface.Read_UI(MPU_slave_address, sensor->gyro_buffer, 7 );
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80010f2:	2207      	movs	r2, #7
 80010f4:	2068      	movs	r0, #104	; 0x68
 80010f6:	4798      	blx	r3
	sensor->gyro_x = sensor->gyro_buffer[1] << 8 | sensor->gyro_buffer[2];
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001108:	4313      	orrs	r3, r2
 800110a:	b21a      	sxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	875a      	strh	r2, [r3, #58]	; 0x3a
	sensor->gyro_y = sensor->gyro_buffer[3] << 8 | sensor->gyro_buffer[4];
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sensor->gyro_z = sensor->gyro_buffer[5] << 8 | sensor->gyro_buffer[6];
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MPU_CALC_ACC_NORM>:
 * @fn void MPU_CALC_ACC_NORM(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_CALC_ACC_NORM(MPU_t *sensor){
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	sensor->norm_acc_x = (float)sensor->acc_x / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f8b8 	bl	80002d0 <__aeabi_i2f>
 8001160:	4604      	mov	r4, r0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	795b      	ldrb	r3, [r3, #5]
 8001166:	3301      	adds	r3, #1
 8001168:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f8ad 	bl	80002d0 <__aeabi_i2f>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff f9b0 	bl	80004e0 <__aeabi_fdiv>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
	sensor->norm_acc_y = (float)sensor->acc_y / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f89e 	bl	80002d0 <__aeabi_i2f>
 8001194:	4604      	mov	r4, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	795b      	ldrb	r3, [r3, #5]
 800119a:	3301      	adds	r3, #1
 800119c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a0:	fa42 f303 	asr.w	r3, r2, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f893 	bl	80002d0 <__aeabi_i2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff f996 	bl	80004e0 <__aeabi_fdiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	621a      	str	r2, [r3, #32]
	sensor->norm_acc_z = (float)sensor->acc_z / ((1<<15) / (1<<(1+sensor->acc_scale_range)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f884 	bl	80002d0 <__aeabi_i2f>
 80011c8:	4604      	mov	r4, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	795b      	ldrb	r3, [r3, #5]
 80011ce:	3301      	adds	r3, #1
 80011d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d4:	fa42 f303 	asr.w	r3, r2, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f879 	bl	80002d0 <__aeabi_i2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff f97c 	bl	80004e0 <__aeabi_fdiv>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}

080011f8 <MPU_CALC_GYRO_NORM>:
 * @fn void MPU_CALC_GYRO_NORM(MPU_t*)
 * @brief
 *
 * @param sensor
 */
void MPU_CALC_GYRO_NORM(MPU_t *sensor){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	sensor->norm_gyro_x = sensor->gyro_x / (131 / (1<<sensor->gyro_scale_range));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	4619      	mov	r1, r3
 800120e:	2383      	movs	r3, #131	; 0x83
 8001210:	410b      	asrs	r3, r1
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f85a 	bl	80002d0 <__aeabi_i2f>
 800121c:	4602      	mov	r2, r0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	63da      	str	r2, [r3, #60]	; 0x3c
	sensor->norm_gyro_y = sensor->gyro_y / (131 / (1<<sensor->gyro_scale_range));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8001228:	461a      	mov	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	4619      	mov	r1, r3
 8001230:	2383      	movs	r3, #131	; 0x83
 8001232:	410b      	asrs	r3, r1
 8001234:	fb92 f3f3 	sdiv	r3, r2, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f849 	bl	80002d0 <__aeabi_i2f>
 800123e:	4602      	mov	r2, r0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
	sensor->norm_gyro_z = sensor->gyro_z / (131 / (1<<sensor->gyro_scale_range));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	789b      	ldrb	r3, [r3, #2]
 8001250:	4619      	mov	r1, r3
 8001252:	2383      	movs	r3, #131	; 0x83
 8001254:	410b      	asrs	r3, r1
 8001256:	fb92 f3f3 	sdiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f838 	bl	80002d0 <__aeabi_i2f>
 8001260:	4602      	mov	r2, r0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	64da      	str	r2, [r3, #76]	; 0x4c

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_Init+0x28>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_Init+0x28>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f92b 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	200f      	movs	r0, #15
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fb80 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f935 	bl	800152a <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f90b 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000080 	.word	0x20000080
 80012f4:	20000088 	.word	0x20000088
 80012f8:	20000084 	.word	0x20000084

080012fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x1c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x20>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a03      	ldr	r2, [pc, #12]	; (800131c <HAL_IncTick+0x20>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000088 	.word	0x20000088
 800131c:	20000178 	.word	0x20000178

08001320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <HAL_GetTick+0x10>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000178 	.word	0x20000178

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff fff0 	bl	8001320 <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffe0 	bl	8001320 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000088 	.word	0x20000088

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f7ff ff90 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff49 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff5e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff90 	bl	8001434 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5f 	bl	80013e0 <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffb0 	bl	8001498 <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b08b      	sub	sp, #44	; 0x2c
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e169      	b.n	800182c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001558:	2201      	movs	r2, #1
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8158 	bne.w	8001826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a9a      	ldr	r2, [pc, #616]	; (80017e4 <HAL_GPIO_Init+0x2a0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d05e      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 8001580:	4a98      	ldr	r2, [pc, #608]	; (80017e4 <HAL_GPIO_Init+0x2a0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d875      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 8001586:	4a98      	ldr	r2, [pc, #608]	; (80017e8 <HAL_GPIO_Init+0x2a4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d058      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 800158c:	4a96      	ldr	r2, [pc, #600]	; (80017e8 <HAL_GPIO_Init+0x2a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d86f      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 8001592:	4a96      	ldr	r2, [pc, #600]	; (80017ec <HAL_GPIO_Init+0x2a8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d052      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 8001598:	4a94      	ldr	r2, [pc, #592]	; (80017ec <HAL_GPIO_Init+0x2a8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d869      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 800159e:	4a94      	ldr	r2, [pc, #592]	; (80017f0 <HAL_GPIO_Init+0x2ac>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d04c      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 80015a4:	4a92      	ldr	r2, [pc, #584]	; (80017f0 <HAL_GPIO_Init+0x2ac>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d863      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015aa:	4a92      	ldr	r2, [pc, #584]	; (80017f4 <HAL_GPIO_Init+0x2b0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d046      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 80015b0:	4a90      	ldr	r2, [pc, #576]	; (80017f4 <HAL_GPIO_Init+0x2b0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d85d      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d82a      	bhi.n	8001610 <HAL_GPIO_Init+0xcc>
 80015ba:	2b12      	cmp	r3, #18
 80015bc:	d859      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <HAL_GPIO_Init+0x80>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	0800163f 	.word	0x0800163f
 80015c8:	08001619 	.word	0x08001619
 80015cc:	0800162b 	.word	0x0800162b
 80015d0:	0800166d 	.word	0x0800166d
 80015d4:	08001673 	.word	0x08001673
 80015d8:	08001673 	.word	0x08001673
 80015dc:	08001673 	.word	0x08001673
 80015e0:	08001673 	.word	0x08001673
 80015e4:	08001673 	.word	0x08001673
 80015e8:	08001673 	.word	0x08001673
 80015ec:	08001673 	.word	0x08001673
 80015f0:	08001673 	.word	0x08001673
 80015f4:	08001673 	.word	0x08001673
 80015f8:	08001673 	.word	0x08001673
 80015fc:	08001673 	.word	0x08001673
 8001600:	08001673 	.word	0x08001673
 8001604:	08001673 	.word	0x08001673
 8001608:	08001621 	.word	0x08001621
 800160c:	08001635 	.word	0x08001635
 8001610:	4a79      	ldr	r2, [pc, #484]	; (80017f8 <HAL_GPIO_Init+0x2b4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001616:	e02c      	b.n	8001672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e029      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	3304      	adds	r3, #4
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e024      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	3308      	adds	r3, #8
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e01f      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	330c      	adds	r3, #12
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e01a      	b.n	8001674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001646:	2304      	movs	r3, #4
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e013      	b.n	8001674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001654:	2308      	movs	r3, #8
 8001656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	611a      	str	r2, [r3, #16]
          break;
 800165e:	e009      	b.n	8001674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	615a      	str	r2, [r3, #20]
          break;
 800166a:	e003      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x130>
          break;
 8001672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d801      	bhi.n	800167e <HAL_GPIO_Init+0x13a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	e001      	b.n	8001682 <HAL_GPIO_Init+0x13e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2bff      	cmp	r3, #255	; 0xff
 8001688:	d802      	bhi.n	8001690 <HAL_GPIO_Init+0x14c>
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x152>
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3b08      	subs	r3, #8
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	210f      	movs	r1, #15
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	401a      	ands	r2, r3
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	431a      	orrs	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80b1 	beq.w	8001826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c4:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016dc:	4a48      	ldr	r2, [pc, #288]	; (8001800 <HAL_GPIO_Init+0x2bc>)
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a40      	ldr	r2, [pc, #256]	; (8001804 <HAL_GPIO_Init+0x2c0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_GPIO_Init+0x1ec>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3f      	ldr	r2, [pc, #252]	; (8001808 <HAL_GPIO_Init+0x2c4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_Init+0x1e8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3e      	ldr	r2, [pc, #248]	; (800180c <HAL_GPIO_Init+0x2c8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x1e4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <HAL_GPIO_Init+0x2cc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_Init+0x1e0>
 8001720:	2303      	movs	r3, #3
 8001722:	e006      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001724:	2304      	movs	r3, #4
 8001726:	e004      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001728:	2302      	movs	r3, #2
 800172a:	e002      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001730:	2300      	movs	r3, #0
 8001732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001734:	f002 0203 	and.w	r2, r2, #3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4093      	lsls	r3, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001742:	492f      	ldr	r1, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x2bc>)
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	492c      	ldr	r1, [pc, #176]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	4928      	ldr	r1, [pc, #160]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	4922      	ldr	r1, [pc, #136]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	60cb      	str	r3, [r1, #12]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	491e      	ldr	r1, [pc, #120]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4918      	ldr	r1, [pc, #96]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4914      	ldr	r1, [pc, #80]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d021      	beq.n	8001818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	e021      	b.n	8001826 <HAL_GPIO_Init+0x2e2>
 80017e2:	bf00      	nop
 80017e4:	10320000 	.word	0x10320000
 80017e8:	10310000 	.word	0x10310000
 80017ec:	10220000 	.word	0x10220000
 80017f0:	10210000 	.word	0x10210000
 80017f4:	10120000 	.word	0x10120000
 80017f8:	10110000 	.word	0x10110000
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	40010800 	.word	0x40010800
 8001808:	40010c00 	.word	0x40010c00
 800180c:	40011000 	.word	0x40011000
 8001810:	40011400 	.word	0x40011400
 8001814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_GPIO_Init+0x304>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	43db      	mvns	r3, r3
 8001820:	4909      	ldr	r1, [pc, #36]	; (8001848 <HAL_GPIO_Init+0x304>)
 8001822:	4013      	ands	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	3301      	adds	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f47f ae8e 	bne.w	8001558 <HAL_GPIO_Init+0x14>
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	372c      	adds	r7, #44	; 0x2c
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e12b      	b.n	8001ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff f8a6 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2224      	movs	r2, #36	; 0x24
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e0:	f002 f8b6 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 80018e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a81      	ldr	r2, [pc, #516]	; (8001af0 <HAL_I2C_Init+0x274>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d807      	bhi.n	8001900 <HAL_I2C_Init+0x84>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4a80      	ldr	r2, [pc, #512]	; (8001af4 <HAL_I2C_Init+0x278>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bf94      	ite	ls
 80018f8:	2301      	movls	r3, #1
 80018fa:	2300      	movhi	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	e006      	b.n	800190e <HAL_I2C_Init+0x92>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a7d      	ldr	r2, [pc, #500]	; (8001af8 <HAL_I2C_Init+0x27c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	bf94      	ite	ls
 8001908:	2301      	movls	r3, #1
 800190a:	2300      	movhi	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0e7      	b.n	8001ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4a78      	ldr	r2, [pc, #480]	; (8001afc <HAL_I2C_Init+0x280>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9b      	lsrs	r3, r3, #18
 8001920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <HAL_I2C_Init+0x274>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d802      	bhi.n	8001950 <HAL_I2C_Init+0xd4>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	e009      	b.n	8001964 <HAL_I2C_Init+0xe8>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <HAL_I2C_Init+0x284>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	3301      	adds	r3, #1
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	430b      	orrs	r3, r1
 800196a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	495c      	ldr	r1, [pc, #368]	; (8001af0 <HAL_I2C_Init+0x274>)
 8001980:	428b      	cmp	r3, r1
 8001982:	d819      	bhi.n	80019b8 <HAL_I2C_Init+0x13c>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e59      	subs	r1, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001992:	1c59      	adds	r1, r3, #1
 8001994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001998:	400b      	ands	r3, r1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00a      	beq.n	80019b4 <HAL_I2C_Init+0x138>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1e59      	subs	r1, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b2:	e051      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e04f      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d111      	bne.n	80019e4 <HAL_I2C_Init+0x168>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e58      	subs	r0, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	440b      	add	r3, r1
 80019ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e012      	b.n	8001a0a <HAL_I2C_Init+0x18e>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e58      	subs	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	0099      	lsls	r1, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Init+0x196>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e022      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10e      	bne.n	8001a38 <HAL_I2C_Init+0x1bc>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e58      	subs	r0, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6859      	ldr	r1, [r3, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	440b      	add	r3, r1
 8001a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a36:	e00f      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1e58      	subs	r0, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	0099      	lsls	r1, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	6809      	ldr	r1, [r1, #0]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6911      	ldr	r1, [r2, #16]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68d2      	ldr	r2, [r2, #12]
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	000186a0 	.word	0x000186a0
 8001af4:	001e847f 	.word	0x001e847f
 8001af8:	003d08ff 	.word	0x003d08ff
 8001afc:	431bde83 	.word	0x431bde83
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	817b      	strh	r3, [r7, #10]
 8001b14:	4613      	mov	r3, r2
 8001b16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff fc02 	bl	8001320 <HAL_GetTick>
 8001b1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	f040 80e0 	bne.w	8001cec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2319      	movs	r3, #25
 8001b32:	2201      	movs	r2, #1
 8001b34:	4970      	ldr	r1, [pc, #448]	; (8001cf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f001 f98a 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
 8001b44:	e0d3      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_I2C_Master_Transmit+0x50>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e0cc      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d007      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2221      	movs	r2, #33	; 0x21
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2210      	movs	r2, #16
 8001b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	893a      	ldrh	r2, [r7, #8]
 8001baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <HAL_I2C_Master_Transmit+0x1f8>)
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	6a3a      	ldr	r2, [r7, #32]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 fe76 	bl	80028b4 <I2C_MasterRequestWrite>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e08d      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001be8:	e066      	b.n	8001cb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	6a39      	ldr	r1, [r7, #32]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f001 fa48 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00d      	beq.n	8001c16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d107      	bne.n	8001c12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e06b      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d11b      	bne.n	8001c8c <HAL_I2C_Master_Transmit+0x188>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d017      	beq.n	8001c8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	6a39      	ldr	r1, [r7, #32]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f001 fa3f 	bl	8003114 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d107      	bne.n	8001cb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e01a      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d194      	bne.n	8001bea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	00100002 	.word	0x00100002
 8001cfc:	ffff0000 	.word	0xffff0000

08001d00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	817b      	strh	r3, [r7, #10]
 8001d10:	4613      	mov	r3, r2
 8001d12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff fb02 	bl	8001320 <HAL_GetTick>
 8001d1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	f040 824b 	bne.w	80021c2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2319      	movs	r3, #25
 8001d32:	2201      	movs	r2, #1
 8001d34:	497f      	ldr	r1, [pc, #508]	; (8001f34 <HAL_I2C_Master_Receive+0x234>)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f001 f88a 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001d42:	2302      	movs	r3, #2
 8001d44:	e23e      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_I2C_Master_Receive+0x54>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e237      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d007      	beq.n	8001d7a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2222      	movs	r2, #34	; 0x22
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2210      	movs	r2, #16
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a5f      	ldr	r2, [pc, #380]	; (8001f38 <HAL_I2C_Master_Receive+0x238>)
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dbc:	8979      	ldrh	r1, [r7, #10]
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fdf8 	bl	80029b8 <I2C_MasterRequestRead>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e1f8      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d113      	bne.n	8001e02 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e1cc      	b.n	800219c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d11e      	bne.n	8001e48 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1a:	b672      	cpsid	i
}
 8001e1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e44:	b662      	cpsie	i
}
 8001e46:	e035      	b.n	8001eb4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d11e      	bne.n	8001e8e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e8a:	b662      	cpsie	i
}
 8001e8c:	e012      	b.n	8001eb4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001eb4:	e172      	b.n	800219c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	f200 811f 	bhi.w	80020fe <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d123      	bne.n	8001f10 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f001 f969 	bl	80031a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e173      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f0e:	e145      	b.n	800219c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d152      	bne.n	8001fbe <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <HAL_I2C_Master_Receive+0x23c>)
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 ff94 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e148      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
 8001f32:	bf00      	nop
 8001f34:	00100002 	.word	0x00100002
 8001f38:	ffff0000 	.word	0xffff0000
 8001f3c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f86:	b662      	cpsie	i
}
 8001f88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fbc:	e0ee      	b.n	800219c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4981      	ldr	r1, [pc, #516]	; (80021cc <HAL_I2C_Master_Receive+0x4cc>)
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 ff41 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0f5      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800201e:	4b6c      	ldr	r3, [pc, #432]	; (80021d0 <HAL_I2C_Master_Receive+0x4d0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <HAL_I2C_Master_Receive+0x4d4>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0a1a      	lsrs	r2, r3, #8
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	3b01      	subs	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d118      	bne.n	8002076 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002066:	b662      	cpsie	i
}
 8002068:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0a6      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b04      	cmp	r3, #4
 8002082:	d1d9      	bne.n	8002038 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020c6:	b662      	cpsie	i
}
 80020c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020fc:	e04e      	b.n	800219c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f001 f84e 	bl	80031a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e058      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d124      	bne.n	800219c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	2b03      	cmp	r3, #3
 8002158:	d107      	bne.n	800216a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002168:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f ae88 	bne.w	8001eb6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	00010004 	.word	0x00010004
 80021d0:	20000080 	.word	0x20000080
 80021d4:	14f8b589 	.word	0x14f8b589

080021d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af02      	add	r7, sp, #8
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	4608      	mov	r0, r1
 80021e2:	4611      	mov	r1, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	817b      	strh	r3, [r7, #10]
 80021ea:	460b      	mov	r3, r1
 80021ec:	813b      	strh	r3, [r7, #8]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f2:	f7ff f895 	bl	8001320 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b20      	cmp	r3, #32
 8002202:	f040 80d9 	bne.w	80023b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2319      	movs	r3, #25
 800220c:	2201      	movs	r2, #1
 800220e:	496d      	ldr	r1, [pc, #436]	; (80023c4 <HAL_I2C_Mem_Write+0x1ec>)
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fe1d 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800221c:	2302      	movs	r3, #2
 800221e:	e0cc      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_I2C_Mem_Write+0x56>
 800222a:	2302      	movs	r3, #2
 800222c:	e0c5      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d007      	beq.n	8002254 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2221      	movs	r2, #33	; 0x21
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_I2C_Mem_Write+0x1f0>)
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002296:	88f8      	ldrh	r0, [r7, #6]
 8002298:	893a      	ldrh	r2, [r7, #8]
 800229a:	8979      	ldrh	r1, [r7, #10]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	4603      	mov	r3, r0
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fc54 	bl	8002b54 <I2C_RequestMemoryWrite>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d052      	beq.n	8002358 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e081      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fee2 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d107      	bne.n	80022de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06b      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b04      	cmp	r3, #4
 800231e:	d11b      	bne.n	8002358 <HAL_I2C_Mem_Write+0x180>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1aa      	bne.n	80022b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fed5 	bl	8003114 <I2C_WaitOnBTFFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	2b04      	cmp	r3, #4
 8002376:	d107      	bne.n	8002388 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e016      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	00100002 	.word	0x00100002
 80023c8:	ffff0000 	.word	0xffff0000

080023cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	817b      	strh	r3, [r7, #10]
 80023de:	460b      	mov	r3, r1
 80023e0:	813b      	strh	r3, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ea:	f7fe ff99 	bl	8001320 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	f040 8250 	bne.w	800289e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2319      	movs	r3, #25
 8002404:	2201      	movs	r2, #1
 8002406:	4982      	ldr	r1, [pc, #520]	; (8002610 <HAL_I2C_Mem_Read+0x244>)
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fd21 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
 8002416:	e243      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Mem_Read+0x5a>
 8002422:	2302      	movs	r3, #2
 8002424:	e23c      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d007      	beq.n	800244c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2222      	movs	r2, #34	; 0x22
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800247c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a62      	ldr	r2, [pc, #392]	; (8002614 <HAL_I2C_Mem_Read+0x248>)
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800248e:	88f8      	ldrh	r0, [r7, #6]
 8002490:	893a      	ldrh	r2, [r7, #8]
 8002492:	8979      	ldrh	r1, [r7, #10]
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4603      	mov	r3, r0
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fbee 	bl	8002c80 <I2C_RequestMemoryRead>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e1f8      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d113      	bne.n	80024de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e1cc      	b.n	8002878 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d11e      	bne.n	8002524 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f6:	b672      	cpsid	i
}
 80024f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002520:	b662      	cpsie	i
}
 8002522:	e035      	b.n	8002590 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b02      	cmp	r3, #2
 800252a:	d11e      	bne.n	800256a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800253a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002564:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002566:	b662      	cpsie	i
}
 8002568:	e012      	b.n	8002590 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002590:	e172      	b.n	8002878 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	2b03      	cmp	r3, #3
 8002598:	f200 811f 	bhi.w	80027da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d123      	bne.n	80025ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fdfb 	bl	80031a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e173      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025ea:	e145      	b.n	8002878 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d152      	bne.n	800269a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	2200      	movs	r2, #0
 80025fc:	4906      	ldr	r1, [pc, #24]	; (8002618 <HAL_I2C_Mem_Read+0x24c>)
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fc26 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e148      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
 800260e:	bf00      	nop
 8002610:	00100002 	.word	0x00100002
 8002614:	ffff0000 	.word	0xffff0000
 8002618:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800261c:	b672      	cpsid	i
}
 800261e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002662:	b662      	cpsie	i
}
 8002664:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002698:	e0ee      	b.n	8002878 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	2200      	movs	r2, #0
 80026a2:	4981      	ldr	r1, [pc, #516]	; (80028a8 <HAL_I2C_Mem_Read+0x4dc>)
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fbd3 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0f5      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
}
 80026c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026fa:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <HAL_I2C_Mem_Read+0x4e0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	4a6b      	ldr	r2, [pc, #428]	; (80028b0 <HAL_I2C_Mem_Read+0x4e4>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0a1a      	lsrs	r2, r3, #8
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00da      	lsls	r2, r3, #3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	3b01      	subs	r3, #1
 8002718:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d118      	bne.n	8002752 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002742:	b662      	cpsie	i
}
 8002744:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0a6      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d1d9      	bne.n	8002714 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027a2:	b662      	cpsie	i
}
 80027a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d8:	e04e      	b.n	8002878 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fce0 	bl	80031a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e058      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d124      	bne.n	8002878 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b03      	cmp	r3, #3
 8002834:	d107      	bne.n	8002846 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002844:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f ae88 	bne.w	8002592 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	00010004 	.word	0x00010004
 80028ac:	20000080 	.word	0x20000080
 80028b0:	14f8b589 	.word	0x14f8b589

080028b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	460b      	mov	r3, r1
 80028c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d006      	beq.n	80028de <I2C_MasterRequestWrite+0x2a>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <I2C_MasterRequestWrite+0x2a>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028dc:	d108      	bne.n	80028f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e00b      	b.n	8002908 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	2b12      	cmp	r3, #18
 80028f6:	d107      	bne.n	8002908 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fa9b 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00d      	beq.n	800293c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292e:	d103      	bne.n	8002938 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e035      	b.n	80029a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002944:	d108      	bne.n	8002958 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002954:	611a      	str	r2, [r3, #16]
 8002956:	e01b      	b.n	8002990 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002958:	897b      	ldrh	r3, [r7, #10]
 800295a:	11db      	asrs	r3, r3, #7
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f003 0306 	and.w	r3, r3, #6
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f063 030f 	orn	r3, r3, #15
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <I2C_MasterRequestWrite+0xfc>)
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fae4 	bl	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e010      	b.n	80029a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4907      	ldr	r1, [pc, #28]	; (80029b4 <I2C_MasterRequestWrite+0x100>)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fad4 	bl	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	00010008 	.word	0x00010008
 80029b4:	00010002 	.word	0x00010002

080029b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	460b      	mov	r3, r1
 80029c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d006      	beq.n	80029f2 <I2C_MasterRequestRead+0x3a>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d003      	beq.n	80029f2 <I2C_MasterRequestRead+0x3a>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029f0:	d108      	bne.n	8002a04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e00b      	b.n	8002a1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	2b11      	cmp	r3, #17
 8002a0a:	d107      	bne.n	8002a1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fa11 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00d      	beq.n	8002a50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a42:	d103      	bne.n	8002a4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e079      	b.n	8002b44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a58:	d108      	bne.n	8002a6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e05f      	b.n	8002b2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a6c:	897b      	ldrh	r3, [r7, #10]
 8002a6e:	11db      	asrs	r3, r3, #7
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f003 0306 	and.w	r3, r3, #6
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f063 030f 	orn	r3, r3, #15
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4930      	ldr	r1, [pc, #192]	; (8002b4c <I2C_MasterRequestRead+0x194>)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fa5a 	bl	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e054      	b.n	8002b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4929      	ldr	r1, [pc, #164]	; (8002b50 <I2C_MasterRequestRead+0x198>)
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fa4a 	bl	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e044      	b.n	8002b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ade:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f9af 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b06:	d103      	bne.n	8002b10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e017      	b.n	8002b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b14:	897b      	ldrh	r3, [r7, #10]
 8002b16:	11db      	asrs	r3, r3, #7
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0306 	and.w	r3, r3, #6
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f063 030e 	orn	r3, r3, #14
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4907      	ldr	r1, [pc, #28]	; (8002b50 <I2C_MasterRequestRead+0x198>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa06 	bl	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	00010008 	.word	0x00010008
 8002b50:	00010002 	.word	0x00010002

08002b54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	460b      	mov	r3, r1
 8002b68:	813b      	strh	r3, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f960 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba4:	d103      	bne.n	8002bae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e05f      	b.n	8002c72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bb2:	897b      	ldrh	r3, [r7, #10]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	6a3a      	ldr	r2, [r7, #32]
 8002bc6:	492d      	ldr	r1, [pc, #180]	; (8002c7c <I2C_RequestMemoryWrite+0x128>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f9bb 	bl	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e04c      	b.n	8002c72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fa46 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e02b      	b.n	8002c72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c20:	893b      	ldrh	r3, [r7, #8]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]
 8002c2a:	e021      	b.n	8002c70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c2c:	893b      	ldrh	r3, [r7, #8]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fa20 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d107      	bne.n	8002c62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e005      	b.n	8002c72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c66:	893b      	ldrh	r3, [r7, #8]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	00010002 	.word	0x00010002

08002c80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	817b      	strh	r3, [r7, #10]
 8002c92:	460b      	mov	r3, r1
 8002c94:	813b      	strh	r3, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ca8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f8c2 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce0:	d103      	bne.n	8002cea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0aa      	b.n	8002e44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	6a3a      	ldr	r2, [r7, #32]
 8002d02:	4952      	ldr	r1, [pc, #328]	; (8002e4c <I2C_RequestMemoryRead+0x1cc>)
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f91d 	bl	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e097      	b.n	8002e44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f9a8 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e076      	b.n	8002e44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5c:	893b      	ldrh	r3, [r7, #8]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	e021      	b.n	8002dac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d68:	893b      	ldrh	r3, [r7, #8]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	6a39      	ldr	r1, [r7, #32]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f982 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d107      	bne.n	8002d9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e050      	b.n	8002e44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f967 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e035      	b.n	8002e44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f82b 	bl	8002e50 <I2C_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0e:	d103      	bne.n	8002e18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e013      	b.n	8002e44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e1c:	897b      	ldrh	r3, [r7, #10]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	6a3a      	ldr	r2, [r7, #32]
 8002e30:	4906      	ldr	r1, [pc, #24]	; (8002e4c <I2C_RequestMemoryRead+0x1cc>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f886 	bl	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	00010002 	.word	0x00010002

08002e50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e60:	e048      	b.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d044      	beq.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fe fa59 	bl	8001320 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d139      	bne.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10d      	bne.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	e00c      	b.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d116      	bne.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e023      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10d      	bne.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	e00c      	b.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	43da      	mvns	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4013      	ands	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d093      	beq.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f52:	e071      	b.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f62:	d123      	bne.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0204 	orr.w	r2, r3, #4
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e067      	b.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d041      	beq.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb4:	f7fe f9b4 	bl	8001320 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d302      	bcc.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d136      	bne.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10c      	bne.n	8002fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf14      	ite	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	2300      	moveq	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	e00b      	b.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf14      	ite	ne
 8003000:	2301      	movne	r3, #1
 8003002:	2300      	moveq	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d016      	beq.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e021      	b.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d10c      	bne.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	43da      	mvns	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e00b      	b.n	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	f47f af6d 	bne.w	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003090:	e034      	b.n	80030fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f8e3 	bl	800325e <I2C_IsAcknowledgeFailed>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e034      	b.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d028      	beq.n	80030fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe f939 	bl	8001320 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11d      	bne.n	80030fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d016      	beq.n	80030fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e007      	b.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d1c3      	bne.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003120:	e034      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f89b 	bl	800325e <I2C_IsAcknowledgeFailed>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e034      	b.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d028      	beq.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fe f8f1 	bl	8001320 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11d      	bne.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d016      	beq.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e007      	b.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d1c3      	bne.n	8003122 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b0:	e049      	b.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d119      	bne.n	80031f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0210 	mvn.w	r2, #16
 80031c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e030      	b.n	8003256 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f4:	f7fe f894 	bl	8001320 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d11d      	bne.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d016      	beq.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e007      	b.n	8003256 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d1ae      	bne.n	80031b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d11b      	bne.n	80032ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f043 0204 	orr.w	r2, r3, #4
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e272      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8087 	beq.w	80033ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032dc:	4b92      	ldr	r3, [pc, #584]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d00c      	beq.n	8003302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032e8:	4b8f      	ldr	r3, [pc, #572]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d112      	bne.n	800331a <HAL_RCC_OscConfig+0x5e>
 80032f4:	4b8c      	ldr	r3, [pc, #560]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d10b      	bne.n	800331a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003302:	4b89      	ldr	r3, [pc, #548]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d06c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x12c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d168      	bne.n	80033e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e24c      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003322:	d106      	bne.n	8003332 <HAL_RCC_OscConfig+0x76>
 8003324:	4b80      	ldr	r3, [pc, #512]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a7f      	ldr	r2, [pc, #508]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e02e      	b.n	8003390 <HAL_RCC_OscConfig+0xd4>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b7b      	ldr	r3, [pc, #492]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7a      	ldr	r2, [pc, #488]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b78      	ldr	r3, [pc, #480]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a77      	ldr	r2, [pc, #476]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800334c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e01d      	b.n	8003390 <HAL_RCC_OscConfig+0xd4>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0xbc>
 800335e:	4b72      	ldr	r3, [pc, #456]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a71      	ldr	r2, [pc, #452]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b6f      	ldr	r3, [pc, #444]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a6e      	ldr	r2, [pc, #440]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0xd4>
 8003378:	4b6b      	ldr	r3, [pc, #428]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a6a      	ldr	r2, [pc, #424]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800337e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b68      	ldr	r3, [pc, #416]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a67      	ldr	r2, [pc, #412]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800338a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fd ffc2 	bl	8001320 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fd ffbe 	bl	8001320 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e200      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b5d      	ldr	r3, [pc, #372]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0xe4>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd ffae 	bl	8001320 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd ffaa 	bl	8001320 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e1ec      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	4b53      	ldr	r3, [pc, #332]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x10c>
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d063      	beq.n	80034be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033f6:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003402:	4b49      	ldr	r3, [pc, #292]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b08      	cmp	r3, #8
 800340c:	d11c      	bne.n	8003448 <HAL_RCC_OscConfig+0x18c>
 800340e:	4b46      	ldr	r3, [pc, #280]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d116      	bne.n	8003448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	4b43      	ldr	r3, [pc, #268]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_RCC_OscConfig+0x176>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e1c0      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4939      	ldr	r1, [pc, #228]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	e03a      	b.n	80034be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003450:	4b36      	ldr	r3, [pc, #216]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fd ff63 	bl	8001320 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345e:	f7fd ff5f 	bl	8001320 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e1a1      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4927      	ldr	r1, [pc, #156]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
 8003490:	e015      	b.n	80034be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fd ff42 	bl	8001320 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a0:	f7fd ff3e 	bl	8001320 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e180      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d03a      	beq.n	8003540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d019      	beq.n	8003506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <HAL_RCC_OscConfig+0x274>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d8:	f7fd ff22 	bl	8001320 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e0:	f7fd ff1e 	bl	8001320 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e160      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034fe:	2001      	movs	r0, #1
 8003500:	f000 faba 	bl	8003a78 <RCC_Delay>
 8003504:	e01c      	b.n	8003540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_RCC_OscConfig+0x274>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7fd ff08 	bl	8001320 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003512:	e00f      	b.n	8003534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003514:	f7fd ff04 	bl	8001320 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d908      	bls.n	8003534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e146      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	42420000 	.word	0x42420000
 8003530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	4b92      	ldr	r3, [pc, #584]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e9      	bne.n	8003514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80a6 	beq.w	800369a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003552:	4b8b      	ldr	r3, [pc, #556]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10d      	bne.n	800357a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	4b88      	ldr	r3, [pc, #544]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	4a87      	ldr	r2, [pc, #540]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	61d3      	str	r3, [r2, #28]
 800356a:	4b85      	ldr	r3, [pc, #532]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b82      	ldr	r3, [pc, #520]	; (8003784 <HAL_RCC_OscConfig+0x4c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b7f      	ldr	r3, [pc, #508]	; (8003784 <HAL_RCC_OscConfig+0x4c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7e      	ldr	r2, [pc, #504]	; (8003784 <HAL_RCC_OscConfig+0x4c8>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7fd fec5 	bl	8001320 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7fd fec1 	bl	8001320 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b64      	cmp	r3, #100	; 0x64
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e103      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b75      	ldr	r3, [pc, #468]	; (8003784 <HAL_RCC_OscConfig+0x4c8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x312>
 80035c0:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a6e      	ldr	r2, [pc, #440]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6213      	str	r3, [r2, #32]
 80035cc:	e02d      	b.n	800362a <HAL_RCC_OscConfig+0x36e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x334>
 80035d6:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	4a69      	ldr	r2, [pc, #420]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6213      	str	r3, [r2, #32]
 80035e2:	4b67      	ldr	r3, [pc, #412]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4a66      	ldr	r2, [pc, #408]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	6213      	str	r3, [r2, #32]
 80035ee:	e01c      	b.n	800362a <HAL_RCC_OscConfig+0x36e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d10c      	bne.n	8003612 <HAL_RCC_OscConfig+0x356>
 80035f8:	4b61      	ldr	r3, [pc, #388]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	4a60      	ldr	r2, [pc, #384]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	f043 0304 	orr.w	r3, r3, #4
 8003602:	6213      	str	r3, [r2, #32]
 8003604:	4b5e      	ldr	r3, [pc, #376]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4a5d      	ldr	r2, [pc, #372]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6213      	str	r3, [r2, #32]
 8003610:	e00b      	b.n	800362a <HAL_RCC_OscConfig+0x36e>
 8003612:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4a5a      	ldr	r2, [pc, #360]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6213      	str	r3, [r2, #32]
 800361e:	4b58      	ldr	r3, [pc, #352]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4a57      	ldr	r2, [pc, #348]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d015      	beq.n	800365e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003632:	f7fd fe75 	bl	8001320 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fd fe71 	bl	8001320 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e0b1      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ee      	beq.n	800363a <HAL_RCC_OscConfig+0x37e>
 800365c:	e014      	b.n	8003688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365e:	f7fd fe5f 	bl	8001320 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fd fe5b 	bl	8001320 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	; 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e09b      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367c:	4b40      	ldr	r3, [pc, #256]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ee      	bne.n	8003666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368e:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	4a3b      	ldr	r2, [pc, #236]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8087 	beq.w	80037b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a4:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d061      	beq.n	8003774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d146      	bne.n	8003746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b8:	4b33      	ldr	r3, [pc, #204]	; (8003788 <HAL_RCC_OscConfig+0x4cc>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fd fe2f 	bl	8001320 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fd fe2b 	bl	8001320 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e06d      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	4b29      	ldr	r3, [pc, #164]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d108      	bne.n	8003700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ee:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4921      	ldr	r1, [pc, #132]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003700:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a19      	ldr	r1, [r3, #32]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	430b      	orrs	r3, r1
 8003712:	491b      	ldr	r1, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x4cc>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fd fdff 	bl	8001320 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd fdfb 	bl	8001320 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e03d      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x46a>
 8003744:	e035      	b.n	80037b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_RCC_OscConfig+0x4cc>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fd fde8 	bl	8001320 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003754:	f7fd fde4 	bl	8001320 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e026      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x498>
 8003772:	e01e      	b.n	80037b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e019      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
 8003780:	40021000 	.word	0x40021000
 8003784:	40007000 	.word	0x40007000
 8003788:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x500>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	429a      	cmp	r2, r3
 800379e:	d106      	bne.n	80037ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0d0      	b.n	8003976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d910      	bls.n	8003804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b67      	ldr	r3, [pc, #412]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 0207 	bic.w	r2, r3, #7
 80037ea:	4965      	ldr	r1, [pc, #404]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0b8      	b.n	8003976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d020      	beq.n	8003852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a58      	ldr	r2, [pc, #352]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800383e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	494d      	ldr	r1, [pc, #308]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d040      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d115      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e073      	b.n	8003976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06b      	b.n	8003976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389e:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4936      	ldr	r1, [pc, #216]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b0:	f7fd fd36 	bl	8001320 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fd fd32 	bl	8001320 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e053      	b.n	8003976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 020c 	and.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1eb      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d210      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 0207 	bic.w	r2, r3, #7
 80038f6:	4922      	ldr	r1, [pc, #136]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e032      	b.n	8003976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4916      	ldr	r1, [pc, #88]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394e:	f000 f821 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003952:	4602      	mov	r2, r0
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	490a      	ldr	r1, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	5ccb      	ldrb	r3, [r1, r3]
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1cc>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1d0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fc94 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40022000 	.word	0x40022000
 8003984:	40021000 	.word	0x40021000
 8003988:	0800444c 	.word	0x0800444c
 800398c:	20000080 	.word	0x20000080
 8003990:	20000084 	.word	0x20000084

08003994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ae:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x30>
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x36>
 80039c2:	e027      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80039c6:	613b      	str	r3, [r7, #16]
      break;
 80039c8:	e027      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0c9b      	lsrs	r3, r3, #18
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039d4:	5cd3      	ldrb	r3, [r2, r3]
 80039d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d010      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0c5b      	lsrs	r3, r3, #17
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	4a11      	ldr	r2, [pc, #68]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039ee:	5cd3      	ldrb	r3, [r2, r3]
 80039f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80039f6:	fb03 f202 	mul.w	r2, r3, r2
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e004      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	613b      	str	r3, [r7, #16]
      break;
 8003a12:	e002      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a16:	613b      	str	r3, [r7, #16]
      break;
 8003a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a1a:	693b      	ldr	r3, [r7, #16]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	08004464 	.word	0x08004464
 8003a34:	08004474 	.word	0x08004474
 8003a38:	003d0900 	.word	0x003d0900

08003a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a40:	4b02      	ldr	r3, [pc, #8]	; (8003a4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	20000080 	.word	0x20000080

08003a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a54:	f7ff fff2 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4903      	ldr	r1, [pc, #12]	; (8003a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	0800445c 	.word	0x0800445c

08003a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <RCC_Delay+0x34>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <RCC_Delay+0x38>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	0a5b      	lsrs	r3, r3, #9
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a94:	bf00      	nop
  }
  while (Delay --);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e5a      	subs	r2, r3, #1
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f9      	bne.n	8003a94 <RCC_Delay+0x1c>
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	20000080 	.word	0x20000080
 8003ab0:	10624dd3 	.word	0x10624dd3

08003ab4 <siprintf>:
 8003ab4:	b40e      	push	{r1, r2, r3}
 8003ab6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003aba:	b500      	push	{lr}
 8003abc:	b09c      	sub	sp, #112	; 0x70
 8003abe:	ab1d      	add	r3, sp, #116	; 0x74
 8003ac0:	9002      	str	r0, [sp, #8]
 8003ac2:	9006      	str	r0, [sp, #24]
 8003ac4:	9107      	str	r1, [sp, #28]
 8003ac6:	9104      	str	r1, [sp, #16]
 8003ac8:	4808      	ldr	r0, [pc, #32]	; (8003aec <siprintf+0x38>)
 8003aca:	4909      	ldr	r1, [pc, #36]	; (8003af0 <siprintf+0x3c>)
 8003acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ad0:	9105      	str	r1, [sp, #20]
 8003ad2:	6800      	ldr	r0, [r0, #0]
 8003ad4:	a902      	add	r1, sp, #8
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	f000 f98e 	bl	8003df8 <_svfiprintf_r>
 8003adc:	2200      	movs	r2, #0
 8003ade:	9b02      	ldr	r3, [sp, #8]
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	b01c      	add	sp, #112	; 0x70
 8003ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ae8:	b003      	add	sp, #12
 8003aea:	4770      	bx	lr
 8003aec:	200000d8 	.word	0x200000d8
 8003af0:	ffff0208 	.word	0xffff0208

08003af4 <memset>:
 8003af4:	4603      	mov	r3, r0
 8003af6:	4402      	add	r2, r0
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d100      	bne.n	8003afe <memset+0xa>
 8003afc:	4770      	bx	lr
 8003afe:	f803 1b01 	strb.w	r1, [r3], #1
 8003b02:	e7f9      	b.n	8003af8 <memset+0x4>

08003b04 <__errno>:
 8003b04:	4b01      	ldr	r3, [pc, #4]	; (8003b0c <__errno+0x8>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	200000d8 	.word	0x200000d8

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	2600      	movs	r6, #0
 8003b14:	4d0c      	ldr	r5, [pc, #48]	; (8003b48 <__libc_init_array+0x38>)
 8003b16:	4c0d      	ldr	r4, [pc, #52]	; (8003b4c <__libc_init_array+0x3c>)
 8003b18:	1b64      	subs	r4, r4, r5
 8003b1a:	10a4      	asrs	r4, r4, #2
 8003b1c:	42a6      	cmp	r6, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	f000 fc7a 	bl	8004418 <_init>
 8003b24:	2600      	movs	r6, #0
 8003b26:	4d0a      	ldr	r5, [pc, #40]	; (8003b50 <__libc_init_array+0x40>)
 8003b28:	4c0a      	ldr	r4, [pc, #40]	; (8003b54 <__libc_init_array+0x44>)
 8003b2a:	1b64      	subs	r4, r4, r5
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	42a6      	cmp	r6, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b38:	4798      	blx	r3
 8003b3a:	3601      	adds	r6, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b42:	4798      	blx	r3
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	080044ac 	.word	0x080044ac
 8003b4c:	080044ac 	.word	0x080044ac
 8003b50:	080044ac 	.word	0x080044ac
 8003b54:	080044b0 	.word	0x080044b0

08003b58 <__retarget_lock_acquire_recursive>:
 8003b58:	4770      	bx	lr

08003b5a <__retarget_lock_release_recursive>:
 8003b5a:	4770      	bx	lr

08003b5c <_free_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4605      	mov	r5, r0
 8003b60:	2900      	cmp	r1, #0
 8003b62:	d040      	beq.n	8003be6 <_free_r+0x8a>
 8003b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b68:	1f0c      	subs	r4, r1, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bfb8      	it	lt
 8003b6e:	18e4      	addlt	r4, r4, r3
 8003b70:	f000 f8dc 	bl	8003d2c <__malloc_lock>
 8003b74:	4a1c      	ldr	r2, [pc, #112]	; (8003be8 <_free_r+0x8c>)
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	b933      	cbnz	r3, 8003b88 <_free_r+0x2c>
 8003b7a:	6063      	str	r3, [r4, #4]
 8003b7c:	6014      	str	r4, [r2, #0]
 8003b7e:	4628      	mov	r0, r5
 8003b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b84:	f000 b8d8 	b.w	8003d38 <__malloc_unlock>
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	d908      	bls.n	8003b9e <_free_r+0x42>
 8003b8c:	6820      	ldr	r0, [r4, #0]
 8003b8e:	1821      	adds	r1, r4, r0
 8003b90:	428b      	cmp	r3, r1
 8003b92:	bf01      	itttt	eq
 8003b94:	6819      	ldreq	r1, [r3, #0]
 8003b96:	685b      	ldreq	r3, [r3, #4]
 8003b98:	1809      	addeq	r1, r1, r0
 8003b9a:	6021      	streq	r1, [r4, #0]
 8003b9c:	e7ed      	b.n	8003b7a <_free_r+0x1e>
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	b10b      	cbz	r3, 8003ba8 <_free_r+0x4c>
 8003ba4:	42a3      	cmp	r3, r4
 8003ba6:	d9fa      	bls.n	8003b9e <_free_r+0x42>
 8003ba8:	6811      	ldr	r1, [r2, #0]
 8003baa:	1850      	adds	r0, r2, r1
 8003bac:	42a0      	cmp	r0, r4
 8003bae:	d10b      	bne.n	8003bc8 <_free_r+0x6c>
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	4401      	add	r1, r0
 8003bb4:	1850      	adds	r0, r2, r1
 8003bb6:	4283      	cmp	r3, r0
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	d1e0      	bne.n	8003b7e <_free_r+0x22>
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4408      	add	r0, r1
 8003bc2:	6010      	str	r0, [r2, #0]
 8003bc4:	6053      	str	r3, [r2, #4]
 8003bc6:	e7da      	b.n	8003b7e <_free_r+0x22>
 8003bc8:	d902      	bls.n	8003bd0 <_free_r+0x74>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	e7d6      	b.n	8003b7e <_free_r+0x22>
 8003bd0:	6820      	ldr	r0, [r4, #0]
 8003bd2:	1821      	adds	r1, r4, r0
 8003bd4:	428b      	cmp	r3, r1
 8003bd6:	bf01      	itttt	eq
 8003bd8:	6819      	ldreq	r1, [r3, #0]
 8003bda:	685b      	ldreq	r3, [r3, #4]
 8003bdc:	1809      	addeq	r1, r1, r0
 8003bde:	6021      	streq	r1, [r4, #0]
 8003be0:	6063      	str	r3, [r4, #4]
 8003be2:	6054      	str	r4, [r2, #4]
 8003be4:	e7cb      	b.n	8003b7e <_free_r+0x22>
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	200002bc 	.word	0x200002bc

08003bec <sbrk_aligned>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	4e0e      	ldr	r6, [pc, #56]	; (8003c28 <sbrk_aligned+0x3c>)
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	6831      	ldr	r1, [r6, #0]
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	b911      	cbnz	r1, 8003bfe <sbrk_aligned+0x12>
 8003bf8:	f000 fbaa 	bl	8004350 <_sbrk_r>
 8003bfc:	6030      	str	r0, [r6, #0]
 8003bfe:	4621      	mov	r1, r4
 8003c00:	4628      	mov	r0, r5
 8003c02:	f000 fba5 	bl	8004350 <_sbrk_r>
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	d00a      	beq.n	8003c20 <sbrk_aligned+0x34>
 8003c0a:	1cc4      	adds	r4, r0, #3
 8003c0c:	f024 0403 	bic.w	r4, r4, #3
 8003c10:	42a0      	cmp	r0, r4
 8003c12:	d007      	beq.n	8003c24 <sbrk_aligned+0x38>
 8003c14:	1a21      	subs	r1, r4, r0
 8003c16:	4628      	mov	r0, r5
 8003c18:	f000 fb9a 	bl	8004350 <_sbrk_r>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d101      	bne.n	8003c24 <sbrk_aligned+0x38>
 8003c20:	f04f 34ff 	mov.w	r4, #4294967295
 8003c24:	4620      	mov	r0, r4
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	200002c0 	.word	0x200002c0

08003c2c <_malloc_r>:
 8003c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c30:	1ccd      	adds	r5, r1, #3
 8003c32:	f025 0503 	bic.w	r5, r5, #3
 8003c36:	3508      	adds	r5, #8
 8003c38:	2d0c      	cmp	r5, #12
 8003c3a:	bf38      	it	cc
 8003c3c:	250c      	movcc	r5, #12
 8003c3e:	2d00      	cmp	r5, #0
 8003c40:	4607      	mov	r7, r0
 8003c42:	db01      	blt.n	8003c48 <_malloc_r+0x1c>
 8003c44:	42a9      	cmp	r1, r5
 8003c46:	d905      	bls.n	8003c54 <_malloc_r+0x28>
 8003c48:	230c      	movs	r3, #12
 8003c4a:	2600      	movs	r6, #0
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4630      	mov	r0, r6
 8003c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d28 <_malloc_r+0xfc>
 8003c58:	f000 f868 	bl	8003d2c <__malloc_lock>
 8003c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c60:	461c      	mov	r4, r3
 8003c62:	bb5c      	cbnz	r4, 8003cbc <_malloc_r+0x90>
 8003c64:	4629      	mov	r1, r5
 8003c66:	4638      	mov	r0, r7
 8003c68:	f7ff ffc0 	bl	8003bec <sbrk_aligned>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	4604      	mov	r4, r0
 8003c70:	d155      	bne.n	8003d1e <_malloc_r+0xf2>
 8003c72:	f8d8 4000 	ldr.w	r4, [r8]
 8003c76:	4626      	mov	r6, r4
 8003c78:	2e00      	cmp	r6, #0
 8003c7a:	d145      	bne.n	8003d08 <_malloc_r+0xdc>
 8003c7c:	2c00      	cmp	r4, #0
 8003c7e:	d048      	beq.n	8003d12 <_malloc_r+0xe6>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	4631      	mov	r1, r6
 8003c84:	4638      	mov	r0, r7
 8003c86:	eb04 0903 	add.w	r9, r4, r3
 8003c8a:	f000 fb61 	bl	8004350 <_sbrk_r>
 8003c8e:	4581      	cmp	r9, r0
 8003c90:	d13f      	bne.n	8003d12 <_malloc_r+0xe6>
 8003c92:	6821      	ldr	r1, [r4, #0]
 8003c94:	4638      	mov	r0, r7
 8003c96:	1a6d      	subs	r5, r5, r1
 8003c98:	4629      	mov	r1, r5
 8003c9a:	f7ff ffa7 	bl	8003bec <sbrk_aligned>
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d037      	beq.n	8003d12 <_malloc_r+0xe6>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	442b      	add	r3, r5
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d038      	beq.n	8003d22 <_malloc_r+0xf6>
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	42a2      	cmp	r2, r4
 8003cb4:	d12b      	bne.n	8003d0e <_malloc_r+0xe2>
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	e00f      	b.n	8003cdc <_malloc_r+0xb0>
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	1b52      	subs	r2, r2, r5
 8003cc0:	d41f      	bmi.n	8003d02 <_malloc_r+0xd6>
 8003cc2:	2a0b      	cmp	r2, #11
 8003cc4:	d917      	bls.n	8003cf6 <_malloc_r+0xca>
 8003cc6:	1961      	adds	r1, r4, r5
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	6025      	str	r5, [r4, #0]
 8003ccc:	bf18      	it	ne
 8003cce:	6059      	strne	r1, [r3, #4]
 8003cd0:	6863      	ldr	r3, [r4, #4]
 8003cd2:	bf08      	it	eq
 8003cd4:	f8c8 1000 	streq.w	r1, [r8]
 8003cd8:	5162      	str	r2, [r4, r5]
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f104 060b 	add.w	r6, r4, #11
 8003ce2:	f000 f829 	bl	8003d38 <__malloc_unlock>
 8003ce6:	f026 0607 	bic.w	r6, r6, #7
 8003cea:	1d23      	adds	r3, r4, #4
 8003cec:	1af2      	subs	r2, r6, r3
 8003cee:	d0ae      	beq.n	8003c4e <_malloc_r+0x22>
 8003cf0:	1b9b      	subs	r3, r3, r6
 8003cf2:	50a3      	str	r3, [r4, r2]
 8003cf4:	e7ab      	b.n	8003c4e <_malloc_r+0x22>
 8003cf6:	42a3      	cmp	r3, r4
 8003cf8:	6862      	ldr	r2, [r4, #4]
 8003cfa:	d1dd      	bne.n	8003cb8 <_malloc_r+0x8c>
 8003cfc:	f8c8 2000 	str.w	r2, [r8]
 8003d00:	e7ec      	b.n	8003cdc <_malloc_r+0xb0>
 8003d02:	4623      	mov	r3, r4
 8003d04:	6864      	ldr	r4, [r4, #4]
 8003d06:	e7ac      	b.n	8003c62 <_malloc_r+0x36>
 8003d08:	4634      	mov	r4, r6
 8003d0a:	6876      	ldr	r6, [r6, #4]
 8003d0c:	e7b4      	b.n	8003c78 <_malloc_r+0x4c>
 8003d0e:	4613      	mov	r3, r2
 8003d10:	e7cc      	b.n	8003cac <_malloc_r+0x80>
 8003d12:	230c      	movs	r3, #12
 8003d14:	4638      	mov	r0, r7
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	f000 f80e 	bl	8003d38 <__malloc_unlock>
 8003d1c:	e797      	b.n	8003c4e <_malloc_r+0x22>
 8003d1e:	6025      	str	r5, [r4, #0]
 8003d20:	e7dc      	b.n	8003cdc <_malloc_r+0xb0>
 8003d22:	605b      	str	r3, [r3, #4]
 8003d24:	deff      	udf	#255	; 0xff
 8003d26:	bf00      	nop
 8003d28:	200002bc 	.word	0x200002bc

08003d2c <__malloc_lock>:
 8003d2c:	4801      	ldr	r0, [pc, #4]	; (8003d34 <__malloc_lock+0x8>)
 8003d2e:	f7ff bf13 	b.w	8003b58 <__retarget_lock_acquire_recursive>
 8003d32:	bf00      	nop
 8003d34:	200002b8 	.word	0x200002b8

08003d38 <__malloc_unlock>:
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <__malloc_unlock+0x8>)
 8003d3a:	f7ff bf0e 	b.w	8003b5a <__retarget_lock_release_recursive>
 8003d3e:	bf00      	nop
 8003d40:	200002b8 	.word	0x200002b8

08003d44 <__ssputs_r>:
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	461f      	mov	r7, r3
 8003d4a:	688e      	ldr	r6, [r1, #8]
 8003d4c:	4682      	mov	sl, r0
 8003d4e:	42be      	cmp	r6, r7
 8003d50:	460c      	mov	r4, r1
 8003d52:	4690      	mov	r8, r2
 8003d54:	680b      	ldr	r3, [r1, #0]
 8003d56:	d82c      	bhi.n	8003db2 <__ssputs_r+0x6e>
 8003d58:	898a      	ldrh	r2, [r1, #12]
 8003d5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d5e:	d026      	beq.n	8003dae <__ssputs_r+0x6a>
 8003d60:	6965      	ldr	r5, [r4, #20]
 8003d62:	6909      	ldr	r1, [r1, #16]
 8003d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d68:	eba3 0901 	sub.w	r9, r3, r1
 8003d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d70:	1c7b      	adds	r3, r7, #1
 8003d72:	444b      	add	r3, r9
 8003d74:	106d      	asrs	r5, r5, #1
 8003d76:	429d      	cmp	r5, r3
 8003d78:	bf38      	it	cc
 8003d7a:	461d      	movcc	r5, r3
 8003d7c:	0553      	lsls	r3, r2, #21
 8003d7e:	d527      	bpl.n	8003dd0 <__ssputs_r+0x8c>
 8003d80:	4629      	mov	r1, r5
 8003d82:	f7ff ff53 	bl	8003c2c <_malloc_r>
 8003d86:	4606      	mov	r6, r0
 8003d88:	b360      	cbz	r0, 8003de4 <__ssputs_r+0xa0>
 8003d8a:	464a      	mov	r2, r9
 8003d8c:	6921      	ldr	r1, [r4, #16]
 8003d8e:	f000 fafd 	bl	800438c <memcpy>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	6126      	str	r6, [r4, #16]
 8003da0:	444e      	add	r6, r9
 8003da2:	6026      	str	r6, [r4, #0]
 8003da4:	463e      	mov	r6, r7
 8003da6:	6165      	str	r5, [r4, #20]
 8003da8:	eba5 0509 	sub.w	r5, r5, r9
 8003dac:	60a5      	str	r5, [r4, #8]
 8003dae:	42be      	cmp	r6, r7
 8003db0:	d900      	bls.n	8003db4 <__ssputs_r+0x70>
 8003db2:	463e      	mov	r6, r7
 8003db4:	4632      	mov	r2, r6
 8003db6:	4641      	mov	r1, r8
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	f000 faaf 	bl	800431c <memmove>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	68a3      	ldr	r3, [r4, #8]
 8003dc2:	1b9b      	subs	r3, r3, r6
 8003dc4:	60a3      	str	r3, [r4, #8]
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	4433      	add	r3, r6
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd0:	462a      	mov	r2, r5
 8003dd2:	f000 fae9 	bl	80043a8 <_realloc_r>
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d1e0      	bne.n	8003d9e <__ssputs_r+0x5a>
 8003ddc:	4650      	mov	r0, sl
 8003dde:	6921      	ldr	r1, [r4, #16]
 8003de0:	f7ff febc 	bl	8003b5c <_free_r>
 8003de4:	230c      	movs	r3, #12
 8003de6:	f8ca 3000 	str.w	r3, [sl]
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df4:	81a3      	strh	r3, [r4, #12]
 8003df6:	e7e9      	b.n	8003dcc <__ssputs_r+0x88>

08003df8 <_svfiprintf_r>:
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	4698      	mov	r8, r3
 8003dfe:	898b      	ldrh	r3, [r1, #12]
 8003e00:	4607      	mov	r7, r0
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	460d      	mov	r5, r1
 8003e06:	4614      	mov	r4, r2
 8003e08:	b09d      	sub	sp, #116	; 0x74
 8003e0a:	d50e      	bpl.n	8003e2a <_svfiprintf_r+0x32>
 8003e0c:	690b      	ldr	r3, [r1, #16]
 8003e0e:	b963      	cbnz	r3, 8003e2a <_svfiprintf_r+0x32>
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	f7ff ff0b 	bl	8003c2c <_malloc_r>
 8003e16:	6028      	str	r0, [r5, #0]
 8003e18:	6128      	str	r0, [r5, #16]
 8003e1a:	b920      	cbnz	r0, 8003e26 <_svfiprintf_r+0x2e>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	e0d0      	b.n	8003fc8 <_svfiprintf_r+0x1d0>
 8003e26:	2340      	movs	r3, #64	; 0x40
 8003e28:	616b      	str	r3, [r5, #20]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	2320      	movs	r3, #32
 8003e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e34:	2330      	movs	r3, #48	; 0x30
 8003e36:	f04f 0901 	mov.w	r9, #1
 8003e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e3e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003fe0 <_svfiprintf_r+0x1e8>
 8003e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e46:	4623      	mov	r3, r4
 8003e48:	469a      	mov	sl, r3
 8003e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e4e:	b10a      	cbz	r2, 8003e54 <_svfiprintf_r+0x5c>
 8003e50:	2a25      	cmp	r2, #37	; 0x25
 8003e52:	d1f9      	bne.n	8003e48 <_svfiprintf_r+0x50>
 8003e54:	ebba 0b04 	subs.w	fp, sl, r4
 8003e58:	d00b      	beq.n	8003e72 <_svfiprintf_r+0x7a>
 8003e5a:	465b      	mov	r3, fp
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	4629      	mov	r1, r5
 8003e60:	4638      	mov	r0, r7
 8003e62:	f7ff ff6f 	bl	8003d44 <__ssputs_r>
 8003e66:	3001      	adds	r0, #1
 8003e68:	f000 80a9 	beq.w	8003fbe <_svfiprintf_r+0x1c6>
 8003e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e6e:	445a      	add	r2, fp
 8003e70:	9209      	str	r2, [sp, #36]	; 0x24
 8003e72:	f89a 3000 	ldrb.w	r3, [sl]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80a1 	beq.w	8003fbe <_svfiprintf_r+0x1c6>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e86:	f10a 0a01 	add.w	sl, sl, #1
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	9307      	str	r3, [sp, #28]
 8003e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e92:	931a      	str	r3, [sp, #104]	; 0x68
 8003e94:	4654      	mov	r4, sl
 8003e96:	2205      	movs	r2, #5
 8003e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9c:	4850      	ldr	r0, [pc, #320]	; (8003fe0 <_svfiprintf_r+0x1e8>)
 8003e9e:	f000 fa67 	bl	8004370 <memchr>
 8003ea2:	9a04      	ldr	r2, [sp, #16]
 8003ea4:	b9d8      	cbnz	r0, 8003ede <_svfiprintf_r+0xe6>
 8003ea6:	06d0      	lsls	r0, r2, #27
 8003ea8:	bf44      	itt	mi
 8003eaa:	2320      	movmi	r3, #32
 8003eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb0:	0711      	lsls	r1, r2, #28
 8003eb2:	bf44      	itt	mi
 8003eb4:	232b      	movmi	r3, #43	; 0x2b
 8003eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eba:	f89a 3000 	ldrb.w	r3, [sl]
 8003ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec0:	d015      	beq.n	8003eee <_svfiprintf_r+0xf6>
 8003ec2:	4654      	mov	r4, sl
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f04f 0c0a 	mov.w	ip, #10
 8003eca:	9a07      	ldr	r2, [sp, #28]
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ed2:	3b30      	subs	r3, #48	; 0x30
 8003ed4:	2b09      	cmp	r3, #9
 8003ed6:	d94d      	bls.n	8003f74 <_svfiprintf_r+0x17c>
 8003ed8:	b1b0      	cbz	r0, 8003f08 <_svfiprintf_r+0x110>
 8003eda:	9207      	str	r2, [sp, #28]
 8003edc:	e014      	b.n	8003f08 <_svfiprintf_r+0x110>
 8003ede:	eba0 0308 	sub.w	r3, r0, r8
 8003ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	46a2      	mov	sl, r4
 8003eea:	9304      	str	r3, [sp, #16]
 8003eec:	e7d2      	b.n	8003e94 <_svfiprintf_r+0x9c>
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	1d19      	adds	r1, r3, #4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	9103      	str	r1, [sp, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bfbb      	ittet	lt
 8003efa:	425b      	neglt	r3, r3
 8003efc:	f042 0202 	orrlt.w	r2, r2, #2
 8003f00:	9307      	strge	r3, [sp, #28]
 8003f02:	9307      	strlt	r3, [sp, #28]
 8003f04:	bfb8      	it	lt
 8003f06:	9204      	strlt	r2, [sp, #16]
 8003f08:	7823      	ldrb	r3, [r4, #0]
 8003f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f0c:	d10c      	bne.n	8003f28 <_svfiprintf_r+0x130>
 8003f0e:	7863      	ldrb	r3, [r4, #1]
 8003f10:	2b2a      	cmp	r3, #42	; 0x2a
 8003f12:	d134      	bne.n	8003f7e <_svfiprintf_r+0x186>
 8003f14:	9b03      	ldr	r3, [sp, #12]
 8003f16:	3402      	adds	r4, #2
 8003f18:	1d1a      	adds	r2, r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	9203      	str	r2, [sp, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bfb8      	it	lt
 8003f22:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f26:	9305      	str	r3, [sp, #20]
 8003f28:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003fe4 <_svfiprintf_r+0x1ec>
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	4650      	mov	r0, sl
 8003f30:	7821      	ldrb	r1, [r4, #0]
 8003f32:	f000 fa1d 	bl	8004370 <memchr>
 8003f36:	b138      	cbz	r0, 8003f48 <_svfiprintf_r+0x150>
 8003f38:	2240      	movs	r2, #64	; 0x40
 8003f3a:	9b04      	ldr	r3, [sp, #16]
 8003f3c:	eba0 000a 	sub.w	r0, r0, sl
 8003f40:	4082      	lsls	r2, r0
 8003f42:	4313      	orrs	r3, r2
 8003f44:	3401      	adds	r4, #1
 8003f46:	9304      	str	r3, [sp, #16]
 8003f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f4c:	2206      	movs	r2, #6
 8003f4e:	4826      	ldr	r0, [pc, #152]	; (8003fe8 <_svfiprintf_r+0x1f0>)
 8003f50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f54:	f000 fa0c 	bl	8004370 <memchr>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d038      	beq.n	8003fce <_svfiprintf_r+0x1d6>
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <_svfiprintf_r+0x1f4>)
 8003f5e:	bb1b      	cbnz	r3, 8003fa8 <_svfiprintf_r+0x1b0>
 8003f60:	9b03      	ldr	r3, [sp, #12]
 8003f62:	3307      	adds	r3, #7
 8003f64:	f023 0307 	bic.w	r3, r3, #7
 8003f68:	3308      	adds	r3, #8
 8003f6a:	9303      	str	r3, [sp, #12]
 8003f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6e:	4433      	add	r3, r6
 8003f70:	9309      	str	r3, [sp, #36]	; 0x24
 8003f72:	e768      	b.n	8003e46 <_svfiprintf_r+0x4e>
 8003f74:	460c      	mov	r4, r1
 8003f76:	2001      	movs	r0, #1
 8003f78:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f7c:	e7a6      	b.n	8003ecc <_svfiprintf_r+0xd4>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f04f 0c0a 	mov.w	ip, #10
 8003f84:	4619      	mov	r1, r3
 8003f86:	3401      	adds	r4, #1
 8003f88:	9305      	str	r3, [sp, #20]
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f90:	3a30      	subs	r2, #48	; 0x30
 8003f92:	2a09      	cmp	r2, #9
 8003f94:	d903      	bls.n	8003f9e <_svfiprintf_r+0x1a6>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0c6      	beq.n	8003f28 <_svfiprintf_r+0x130>
 8003f9a:	9105      	str	r1, [sp, #20]
 8003f9c:	e7c4      	b.n	8003f28 <_svfiprintf_r+0x130>
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fa6:	e7f0      	b.n	8003f8a <_svfiprintf_r+0x192>
 8003fa8:	ab03      	add	r3, sp, #12
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	462a      	mov	r2, r5
 8003fae:	4638      	mov	r0, r7
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <_svfiprintf_r+0x1f8>)
 8003fb2:	a904      	add	r1, sp, #16
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	1c42      	adds	r2, r0, #1
 8003fba:	4606      	mov	r6, r0
 8003fbc:	d1d6      	bne.n	8003f6c <_svfiprintf_r+0x174>
 8003fbe:	89ab      	ldrh	r3, [r5, #12]
 8003fc0:	065b      	lsls	r3, r3, #25
 8003fc2:	f53f af2d 	bmi.w	8003e20 <_svfiprintf_r+0x28>
 8003fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc8:	b01d      	add	sp, #116	; 0x74
 8003fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fce:	ab03      	add	r3, sp, #12
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <_svfiprintf_r+0x1f8>)
 8003fd8:	a904      	add	r1, sp, #16
 8003fda:	f000 f87d 	bl	80040d8 <_printf_i>
 8003fde:	e7eb      	b.n	8003fb8 <_svfiprintf_r+0x1c0>
 8003fe0:	08004476 	.word	0x08004476
 8003fe4:	0800447c 	.word	0x0800447c
 8003fe8:	08004480 	.word	0x08004480
 8003fec:	00000000 	.word	0x00000000
 8003ff0:	08003d45 	.word	0x08003d45

08003ff4 <_printf_common>:
 8003ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	4616      	mov	r6, r2
 8003ffa:	4699      	mov	r9, r3
 8003ffc:	688a      	ldr	r2, [r1, #8]
 8003ffe:	690b      	ldr	r3, [r1, #16]
 8004000:	4607      	mov	r7, r0
 8004002:	4293      	cmp	r3, r2
 8004004:	bfb8      	it	lt
 8004006:	4613      	movlt	r3, r2
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400e:	460c      	mov	r4, r1
 8004010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004014:	b10a      	cbz	r2, 800401a <_printf_common+0x26>
 8004016:	3301      	adds	r3, #1
 8004018:	6033      	str	r3, [r6, #0]
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	0699      	lsls	r1, r3, #26
 800401e:	bf42      	ittt	mi
 8004020:	6833      	ldrmi	r3, [r6, #0]
 8004022:	3302      	addmi	r3, #2
 8004024:	6033      	strmi	r3, [r6, #0]
 8004026:	6825      	ldr	r5, [r4, #0]
 8004028:	f015 0506 	ands.w	r5, r5, #6
 800402c:	d106      	bne.n	800403c <_printf_common+0x48>
 800402e:	f104 0a19 	add.w	sl, r4, #25
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	6832      	ldr	r2, [r6, #0]
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	42ab      	cmp	r3, r5
 800403a:	dc2b      	bgt.n	8004094 <_printf_common+0xa0>
 800403c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004040:	1e13      	subs	r3, r2, #0
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	bf18      	it	ne
 8004046:	2301      	movne	r3, #1
 8004048:	0692      	lsls	r2, r2, #26
 800404a:	d430      	bmi.n	80040ae <_printf_common+0xba>
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004054:	47c0      	blx	r8
 8004056:	3001      	adds	r0, #1
 8004058:	d023      	beq.n	80040a2 <_printf_common+0xae>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	6922      	ldr	r2, [r4, #16]
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	2b04      	cmp	r3, #4
 8004064:	bf14      	ite	ne
 8004066:	2500      	movne	r5, #0
 8004068:	6833      	ldreq	r3, [r6, #0]
 800406a:	f04f 0600 	mov.w	r6, #0
 800406e:	bf08      	it	eq
 8004070:	68e5      	ldreq	r5, [r4, #12]
 8004072:	f104 041a 	add.w	r4, r4, #26
 8004076:	bf08      	it	eq
 8004078:	1aed      	subeq	r5, r5, r3
 800407a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800407e:	bf08      	it	eq
 8004080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004084:	4293      	cmp	r3, r2
 8004086:	bfc4      	itt	gt
 8004088:	1a9b      	subgt	r3, r3, r2
 800408a:	18ed      	addgt	r5, r5, r3
 800408c:	42b5      	cmp	r5, r6
 800408e:	d11a      	bne.n	80040c6 <_printf_common+0xd2>
 8004090:	2000      	movs	r0, #0
 8004092:	e008      	b.n	80040a6 <_printf_common+0xb2>
 8004094:	2301      	movs	r3, #1
 8004096:	4652      	mov	r2, sl
 8004098:	4649      	mov	r1, r9
 800409a:	4638      	mov	r0, r7
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d103      	bne.n	80040aa <_printf_common+0xb6>
 80040a2:	f04f 30ff 	mov.w	r0, #4294967295
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	3501      	adds	r5, #1
 80040ac:	e7c1      	b.n	8004032 <_printf_common+0x3e>
 80040ae:	2030      	movs	r0, #48	; 0x30
 80040b0:	18e1      	adds	r1, r4, r3
 80040b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040bc:	4422      	add	r2, r4
 80040be:	3302      	adds	r3, #2
 80040c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040c4:	e7c2      	b.n	800404c <_printf_common+0x58>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4622      	mov	r2, r4
 80040ca:	4649      	mov	r1, r9
 80040cc:	4638      	mov	r0, r7
 80040ce:	47c0      	blx	r8
 80040d0:	3001      	adds	r0, #1
 80040d2:	d0e6      	beq.n	80040a2 <_printf_common+0xae>
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7d9      	b.n	800408c <_printf_common+0x98>

080040d8 <_printf_i>:
 80040d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	7e0f      	ldrb	r7, [r1, #24]
 80040de:	4691      	mov	r9, r2
 80040e0:	2f78      	cmp	r7, #120	; 0x78
 80040e2:	4680      	mov	r8, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	469a      	mov	sl, r3
 80040e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ee:	d807      	bhi.n	8004100 <_printf_i+0x28>
 80040f0:	2f62      	cmp	r7, #98	; 0x62
 80040f2:	d80a      	bhi.n	800410a <_printf_i+0x32>
 80040f4:	2f00      	cmp	r7, #0
 80040f6:	f000 80d5 	beq.w	80042a4 <_printf_i+0x1cc>
 80040fa:	2f58      	cmp	r7, #88	; 0x58
 80040fc:	f000 80c1 	beq.w	8004282 <_printf_i+0x1aa>
 8004100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004108:	e03a      	b.n	8004180 <_printf_i+0xa8>
 800410a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800410e:	2b15      	cmp	r3, #21
 8004110:	d8f6      	bhi.n	8004100 <_printf_i+0x28>
 8004112:	a101      	add	r1, pc, #4	; (adr r1, 8004118 <_printf_i+0x40>)
 8004114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004118:	08004171 	.word	0x08004171
 800411c:	08004185 	.word	0x08004185
 8004120:	08004101 	.word	0x08004101
 8004124:	08004101 	.word	0x08004101
 8004128:	08004101 	.word	0x08004101
 800412c:	08004101 	.word	0x08004101
 8004130:	08004185 	.word	0x08004185
 8004134:	08004101 	.word	0x08004101
 8004138:	08004101 	.word	0x08004101
 800413c:	08004101 	.word	0x08004101
 8004140:	08004101 	.word	0x08004101
 8004144:	0800428b 	.word	0x0800428b
 8004148:	080041b1 	.word	0x080041b1
 800414c:	08004245 	.word	0x08004245
 8004150:	08004101 	.word	0x08004101
 8004154:	08004101 	.word	0x08004101
 8004158:	080042ad 	.word	0x080042ad
 800415c:	08004101 	.word	0x08004101
 8004160:	080041b1 	.word	0x080041b1
 8004164:	08004101 	.word	0x08004101
 8004168:	08004101 	.word	0x08004101
 800416c:	0800424d 	.word	0x0800424d
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	602a      	str	r2, [r5, #0]
 8004178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800417c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004180:	2301      	movs	r3, #1
 8004182:	e0a0      	b.n	80042c6 <_printf_i+0x1ee>
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	0607      	lsls	r7, r0, #24
 800418a:	f103 0104 	add.w	r1, r3, #4
 800418e:	6029      	str	r1, [r5, #0]
 8004190:	d501      	bpl.n	8004196 <_printf_i+0xbe>
 8004192:	681e      	ldr	r6, [r3, #0]
 8004194:	e003      	b.n	800419e <_printf_i+0xc6>
 8004196:	0646      	lsls	r6, r0, #25
 8004198:	d5fb      	bpl.n	8004192 <_printf_i+0xba>
 800419a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800419e:	2e00      	cmp	r6, #0
 80041a0:	da03      	bge.n	80041aa <_printf_i+0xd2>
 80041a2:	232d      	movs	r3, #45	; 0x2d
 80041a4:	4276      	negs	r6, r6
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041aa:	230a      	movs	r3, #10
 80041ac:	4859      	ldr	r0, [pc, #356]	; (8004314 <_printf_i+0x23c>)
 80041ae:	e012      	b.n	80041d6 <_printf_i+0xfe>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	6029      	str	r1, [r5, #0]
 80041b8:	0605      	lsls	r5, r0, #24
 80041ba:	d501      	bpl.n	80041c0 <_printf_i+0xe8>
 80041bc:	681e      	ldr	r6, [r3, #0]
 80041be:	e002      	b.n	80041c6 <_printf_i+0xee>
 80041c0:	0641      	lsls	r1, r0, #25
 80041c2:	d5fb      	bpl.n	80041bc <_printf_i+0xe4>
 80041c4:	881e      	ldrh	r6, [r3, #0]
 80041c6:	2f6f      	cmp	r7, #111	; 0x6f
 80041c8:	bf0c      	ite	eq
 80041ca:	2308      	moveq	r3, #8
 80041cc:	230a      	movne	r3, #10
 80041ce:	4851      	ldr	r0, [pc, #324]	; (8004314 <_printf_i+0x23c>)
 80041d0:	2100      	movs	r1, #0
 80041d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d6:	6865      	ldr	r5, [r4, #4]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	bfa8      	it	ge
 80041dc:	6821      	ldrge	r1, [r4, #0]
 80041de:	60a5      	str	r5, [r4, #8]
 80041e0:	bfa4      	itt	ge
 80041e2:	f021 0104 	bicge.w	r1, r1, #4
 80041e6:	6021      	strge	r1, [r4, #0]
 80041e8:	b90e      	cbnz	r6, 80041ee <_printf_i+0x116>
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	d04b      	beq.n	8004286 <_printf_i+0x1ae>
 80041ee:	4615      	mov	r5, r2
 80041f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80041f4:	fb03 6711 	mls	r7, r3, r1, r6
 80041f8:	5dc7      	ldrb	r7, [r0, r7]
 80041fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041fe:	4637      	mov	r7, r6
 8004200:	42bb      	cmp	r3, r7
 8004202:	460e      	mov	r6, r1
 8004204:	d9f4      	bls.n	80041f0 <_printf_i+0x118>
 8004206:	2b08      	cmp	r3, #8
 8004208:	d10b      	bne.n	8004222 <_printf_i+0x14a>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	07de      	lsls	r6, r3, #31
 800420e:	d508      	bpl.n	8004222 <_printf_i+0x14a>
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	6861      	ldr	r1, [r4, #4]
 8004214:	4299      	cmp	r1, r3
 8004216:	bfde      	ittt	le
 8004218:	2330      	movle	r3, #48	; 0x30
 800421a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800421e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004222:	1b52      	subs	r2, r2, r5
 8004224:	6122      	str	r2, [r4, #16]
 8004226:	464b      	mov	r3, r9
 8004228:	4621      	mov	r1, r4
 800422a:	4640      	mov	r0, r8
 800422c:	f8cd a000 	str.w	sl, [sp]
 8004230:	aa03      	add	r2, sp, #12
 8004232:	f7ff fedf 	bl	8003ff4 <_printf_common>
 8004236:	3001      	adds	r0, #1
 8004238:	d14a      	bne.n	80042d0 <_printf_i+0x1f8>
 800423a:	f04f 30ff 	mov.w	r0, #4294967295
 800423e:	b004      	add	sp, #16
 8004240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	f043 0320 	orr.w	r3, r3, #32
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	2778      	movs	r7, #120	; 0x78
 800424e:	4832      	ldr	r0, [pc, #200]	; (8004318 <_printf_i+0x240>)
 8004250:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	6829      	ldr	r1, [r5, #0]
 8004258:	061f      	lsls	r7, r3, #24
 800425a:	f851 6b04 	ldr.w	r6, [r1], #4
 800425e:	d402      	bmi.n	8004266 <_printf_i+0x18e>
 8004260:	065f      	lsls	r7, r3, #25
 8004262:	bf48      	it	mi
 8004264:	b2b6      	uxthmi	r6, r6
 8004266:	07df      	lsls	r7, r3, #31
 8004268:	bf48      	it	mi
 800426a:	f043 0320 	orrmi.w	r3, r3, #32
 800426e:	6029      	str	r1, [r5, #0]
 8004270:	bf48      	it	mi
 8004272:	6023      	strmi	r3, [r4, #0]
 8004274:	b91e      	cbnz	r6, 800427e <_printf_i+0x1a6>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f023 0320 	bic.w	r3, r3, #32
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	2310      	movs	r3, #16
 8004280:	e7a6      	b.n	80041d0 <_printf_i+0xf8>
 8004282:	4824      	ldr	r0, [pc, #144]	; (8004314 <_printf_i+0x23c>)
 8004284:	e7e4      	b.n	8004250 <_printf_i+0x178>
 8004286:	4615      	mov	r5, r2
 8004288:	e7bd      	b.n	8004206 <_printf_i+0x12e>
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	6826      	ldr	r6, [r4, #0]
 800428e:	1d18      	adds	r0, r3, #4
 8004290:	6961      	ldr	r1, [r4, #20]
 8004292:	6028      	str	r0, [r5, #0]
 8004294:	0635      	lsls	r5, r6, #24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	d501      	bpl.n	800429e <_printf_i+0x1c6>
 800429a:	6019      	str	r1, [r3, #0]
 800429c:	e002      	b.n	80042a4 <_printf_i+0x1cc>
 800429e:	0670      	lsls	r0, r6, #25
 80042a0:	d5fb      	bpl.n	800429a <_printf_i+0x1c2>
 80042a2:	8019      	strh	r1, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	4615      	mov	r5, r2
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	e7bc      	b.n	8004226 <_printf_i+0x14e>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 f859 	bl	8004370 <memchr>
 80042be:	b108      	cbz	r0, 80042c4 <_printf_i+0x1ec>
 80042c0:	1b40      	subs	r0, r0, r5
 80042c2:	6060      	str	r0, [r4, #4]
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	2300      	movs	r3, #0
 80042ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ce:	e7aa      	b.n	8004226 <_printf_i+0x14e>
 80042d0:	462a      	mov	r2, r5
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	47d0      	blx	sl
 80042da:	3001      	adds	r0, #1
 80042dc:	d0ad      	beq.n	800423a <_printf_i+0x162>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	d413      	bmi.n	800430c <_printf_i+0x234>
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	4298      	cmp	r0, r3
 80042ea:	bfb8      	it	lt
 80042ec:	4618      	movlt	r0, r3
 80042ee:	e7a6      	b.n	800423e <_printf_i+0x166>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4632      	mov	r2, r6
 80042f4:	4649      	mov	r1, r9
 80042f6:	4640      	mov	r0, r8
 80042f8:	47d0      	blx	sl
 80042fa:	3001      	adds	r0, #1
 80042fc:	d09d      	beq.n	800423a <_printf_i+0x162>
 80042fe:	3501      	adds	r5, #1
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	9903      	ldr	r1, [sp, #12]
 8004304:	1a5b      	subs	r3, r3, r1
 8004306:	42ab      	cmp	r3, r5
 8004308:	dcf2      	bgt.n	80042f0 <_printf_i+0x218>
 800430a:	e7eb      	b.n	80042e4 <_printf_i+0x20c>
 800430c:	2500      	movs	r5, #0
 800430e:	f104 0619 	add.w	r6, r4, #25
 8004312:	e7f5      	b.n	8004300 <_printf_i+0x228>
 8004314:	08004487 	.word	0x08004487
 8004318:	08004498 	.word	0x08004498

0800431c <memmove>:
 800431c:	4288      	cmp	r0, r1
 800431e:	b510      	push	{r4, lr}
 8004320:	eb01 0402 	add.w	r4, r1, r2
 8004324:	d902      	bls.n	800432c <memmove+0x10>
 8004326:	4284      	cmp	r4, r0
 8004328:	4623      	mov	r3, r4
 800432a:	d807      	bhi.n	800433c <memmove+0x20>
 800432c:	1e43      	subs	r3, r0, #1
 800432e:	42a1      	cmp	r1, r4
 8004330:	d008      	beq.n	8004344 <memmove+0x28>
 8004332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800433a:	e7f8      	b.n	800432e <memmove+0x12>
 800433c:	4601      	mov	r1, r0
 800433e:	4402      	add	r2, r0
 8004340:	428a      	cmp	r2, r1
 8004342:	d100      	bne.n	8004346 <memmove+0x2a>
 8004344:	bd10      	pop	{r4, pc}
 8004346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800434a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800434e:	e7f7      	b.n	8004340 <memmove+0x24>

08004350 <_sbrk_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	2300      	movs	r3, #0
 8004354:	4d05      	ldr	r5, [pc, #20]	; (800436c <_sbrk_r+0x1c>)
 8004356:	4604      	mov	r4, r0
 8004358:	4608      	mov	r0, r1
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	f7fc fbb0 	bl	8000ac0 <_sbrk>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_sbrk_r+0x1a>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_sbrk_r+0x1a>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	200002b4 	.word	0x200002b4

08004370 <memchr>:
 8004370:	4603      	mov	r3, r0
 8004372:	b510      	push	{r4, lr}
 8004374:	b2c9      	uxtb	r1, r1
 8004376:	4402      	add	r2, r0
 8004378:	4293      	cmp	r3, r2
 800437a:	4618      	mov	r0, r3
 800437c:	d101      	bne.n	8004382 <memchr+0x12>
 800437e:	2000      	movs	r0, #0
 8004380:	e003      	b.n	800438a <memchr+0x1a>
 8004382:	7804      	ldrb	r4, [r0, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	428c      	cmp	r4, r1
 8004388:	d1f6      	bne.n	8004378 <memchr+0x8>
 800438a:	bd10      	pop	{r4, pc}

0800438c <memcpy>:
 800438c:	440a      	add	r2, r1
 800438e:	4291      	cmp	r1, r2
 8004390:	f100 33ff 	add.w	r3, r0, #4294967295
 8004394:	d100      	bne.n	8004398 <memcpy+0xc>
 8004396:	4770      	bx	lr
 8004398:	b510      	push	{r4, lr}
 800439a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800439e:	4291      	cmp	r1, r2
 80043a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043a4:	d1f9      	bne.n	800439a <memcpy+0xe>
 80043a6:	bd10      	pop	{r4, pc}

080043a8 <_realloc_r>:
 80043a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ac:	4680      	mov	r8, r0
 80043ae:	4614      	mov	r4, r2
 80043b0:	460e      	mov	r6, r1
 80043b2:	b921      	cbnz	r1, 80043be <_realloc_r+0x16>
 80043b4:	4611      	mov	r1, r2
 80043b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ba:	f7ff bc37 	b.w	8003c2c <_malloc_r>
 80043be:	b92a      	cbnz	r2, 80043cc <_realloc_r+0x24>
 80043c0:	f7ff fbcc 	bl	8003b5c <_free_r>
 80043c4:	4625      	mov	r5, r4
 80043c6:	4628      	mov	r0, r5
 80043c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043cc:	f000 f81b 	bl	8004406 <_malloc_usable_size_r>
 80043d0:	4284      	cmp	r4, r0
 80043d2:	4607      	mov	r7, r0
 80043d4:	d802      	bhi.n	80043dc <_realloc_r+0x34>
 80043d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043da:	d812      	bhi.n	8004402 <_realloc_r+0x5a>
 80043dc:	4621      	mov	r1, r4
 80043de:	4640      	mov	r0, r8
 80043e0:	f7ff fc24 	bl	8003c2c <_malloc_r>
 80043e4:	4605      	mov	r5, r0
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d0ed      	beq.n	80043c6 <_realloc_r+0x1e>
 80043ea:	42bc      	cmp	r4, r7
 80043ec:	4622      	mov	r2, r4
 80043ee:	4631      	mov	r1, r6
 80043f0:	bf28      	it	cs
 80043f2:	463a      	movcs	r2, r7
 80043f4:	f7ff ffca 	bl	800438c <memcpy>
 80043f8:	4631      	mov	r1, r6
 80043fa:	4640      	mov	r0, r8
 80043fc:	f7ff fbae 	bl	8003b5c <_free_r>
 8004400:	e7e1      	b.n	80043c6 <_realloc_r+0x1e>
 8004402:	4635      	mov	r5, r6
 8004404:	e7df      	b.n	80043c6 <_realloc_r+0x1e>

08004406 <_malloc_usable_size_r>:
 8004406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800440a:	1f18      	subs	r0, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	bfbc      	itt	lt
 8004410:	580b      	ldrlt	r3, [r1, r0]
 8004412:	18c0      	addlt	r0, r0, r3
 8004414:	4770      	bx	lr
	...

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
